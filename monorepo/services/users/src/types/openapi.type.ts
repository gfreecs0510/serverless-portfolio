/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/users/register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register a new user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['UserRequest'];
        };
      };
      responses: {
        /** @description Successful registration */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UserResponse'];
          };
        };
        /** @description Generic 400 */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['GenericErrorResponse'];
          };
        };
        /** @description Unauthorized */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedResponse'];
          };
        };
        /** @description Rate limited */
        429: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RateLimitedResponse'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ServerErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Login a user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['UserRequest'];
        };
      };
      responses: {
        /** @description User logged in successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              token?: components['schemas']['Token'];
              user?: components['schemas']['User'];
              /** @example success */
              message?: string;
            };
          };
        };
        /** @description Generic 400 */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['GenericErrorResponse'];
          };
        };
        /** @description Unauthorized */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedResponse'];
          };
        };
        /** @description Rate limited */
        429: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RateLimitedResponse'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ServerErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/changePassword': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Change user's password */
    patch: {
      parameters: {
        query?: never;
        header: {
          /** @description Bearer token for authorization. */
          Authorization: string;
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['ChangePasswordRequest'];
        };
      };
      responses: {
        /** @description change password successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              token?: components['schemas']['Token'];
              user?: components['schemas']['User'];
              /** @example success */
              message?: string;
            };
          };
        };
        /** @description Generic 400 */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['GenericErrorResponse'];
          };
        };
        /** @description Unauthorized */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedResponse'];
          };
        };
        /** @description Rate limited */
        429: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RateLimitedResponse'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ServerErrorResponse'];
          };
        };
      };
    };
    trace?: never;
  };
  '/users/verify': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Verify the user's token */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description Bearer token for authorization. */
          Authorization: string;
        };
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description verified token */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example verified */
              message?: string;
              user?: components['schemas']['User'];
            };
          };
        };
        /** @description Generic 400 */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['GenericErrorResponse'];
          };
        };
        /** @description Unauthorized */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedResponse'];
          };
        };
        /** @description Rate limited */
        429: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RateLimitedResponse'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ServerErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/users/noTokenAccess': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Check if ip is rate limited */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description verified token */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example allowed */
              message?: string;
            };
          };
        };
        /** @description Generic 400 */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['GenericErrorResponse'];
          };
        };
        /** @description Unauthorized */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['UnauthorizedResponse'];
          };
        };
        /** @description Rate limited */
        429: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RateLimitedResponse'];
          };
        };
        /** @description Server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ServerErrorResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description User token */
    Token: string;
    /**
     * Format: email
     * @description Must be a valid email address.
     */
    Username: string;
    /** @description Password must be between 10 and 72 characters, contain at least one uppercase letter, one digit, one special character, and no spaces. */
    Password: string;
    UserRequest: {
      username: components['schemas']['Username'];
      password: components['schemas']['Password'];
    };
    User: {
      username?: components['schemas']['Username'];
    };
    ChangePasswordRequest: {
      username: components['schemas']['Username'];
      oldPassword: components['schemas']['Password'];
      newPassword: components['schemas']['Password'];
    };
    UserResponse: {
      user?: components['schemas']['User'];
      token?: components['schemas']['Token'];
    };
    UnauthorizedResponse: {
      /** @example unauthorized */
      message?: string;
    };
    RateLimitedResponse: {
      /** @example rate limited */
      message?: string;
    };
    ServerErrorResponse: {
      /** @example internal server error */
      message?: string;
    };
    GenericErrorResponse: {
      /** @example error */
      message?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
