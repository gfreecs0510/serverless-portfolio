"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({
  "node_modules/safe-buffer/index.js"(exports2, module2) {
    var buffer = require("buffer");
    var Buffer2 = buffer.Buffer;
    function copyProps(src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
      module2.exports = buffer;
    } else {
      copyProps(buffer, exports2);
      exports2.Buffer = SafeBuffer;
    }
    function SafeBuffer(arg, encodingOrOffset, length) {
      return Buffer2(arg, encodingOrOffset, length);
    }
    SafeBuffer.prototype = Object.create(Buffer2.prototype);
    copyProps(Buffer2, SafeBuffer);
    SafeBuffer.from = function(arg, encodingOrOffset, length) {
      if (typeof arg === "number") {
        throw new TypeError("Argument must not be a number");
      }
      return Buffer2(arg, encodingOrOffset, length);
    };
    SafeBuffer.alloc = function(size, fill, encoding) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      var buf = Buffer2(size);
      if (fill !== void 0) {
        if (typeof encoding === "string") {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf;
    };
    SafeBuffer.allocUnsafe = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return Buffer2(size);
    };
    SafeBuffer.allocUnsafeSlow = function(size) {
      if (typeof size !== "number") {
        throw new TypeError("Argument must be a number");
      }
      return buffer.SlowBuffer(size);
    };
  }
});

// node_modules/jws/lib/data-stream.js
var require_data_stream = __commonJS({
  "node_modules/jws/lib/data-stream.js"(exports2, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var Stream = require("stream");
    var util = require("util");
    function DataStream(data) {
      this.buffer = null;
      this.writable = true;
      this.readable = true;
      if (!data) {
        this.buffer = Buffer2.alloc(0);
        return this;
      }
      if (typeof data.pipe === "function") {
        this.buffer = Buffer2.alloc(0);
        data.pipe(this);
        return this;
      }
      if (data.length || typeof data === "object") {
        this.buffer = data;
        this.writable = false;
        process.nextTick(function() {
          this.emit("end", data);
          this.readable = false;
          this.emit("close");
        }.bind(this));
        return this;
      }
      throw new TypeError("Unexpected data type (" + typeof data + ")");
    }
    util.inherits(DataStream, Stream);
    DataStream.prototype.write = function write(data) {
      this.buffer = Buffer2.concat([this.buffer, Buffer2.from(data)]);
      this.emit("data", data);
    };
    DataStream.prototype.end = function end(data) {
      if (data)
        this.write(data);
      this.emit("end", data);
      this.emit("close");
      this.writable = false;
      this.readable = false;
    };
    module2.exports = DataStream;
  }
});

// node_modules/buffer-equal-constant-time/index.js
var require_buffer_equal_constant_time = __commonJS({
  "node_modules/buffer-equal-constant-time/index.js"(exports2, module2) {
    "use strict";
    var Buffer2 = require("buffer").Buffer;
    var SlowBuffer = require("buffer").SlowBuffer;
    module2.exports = bufferEq;
    function bufferEq(a, b) {
      if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
        return false;
      }
      if (a.length !== b.length) {
        return false;
      }
      var c = 0;
      for (var i = 0; i < a.length; i++) {
        c |= a[i] ^ b[i];
      }
      return c === 0;
    }
    bufferEq.install = function() {
      Buffer2.prototype.equal = SlowBuffer.prototype.equal = function equal(that) {
        return bufferEq(this, that);
      };
    };
    var origBufEqual = Buffer2.prototype.equal;
    var origSlowBufEqual = SlowBuffer.prototype.equal;
    bufferEq.restore = function() {
      Buffer2.prototype.equal = origBufEqual;
      SlowBuffer.prototype.equal = origSlowBufEqual;
    };
  }
});

// node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js
var require_param_bytes_for_alg = __commonJS({
  "node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js"(exports2, module2) {
    "use strict";
    function getParamSize(keySize) {
      var result = (keySize / 8 | 0) + (keySize % 8 === 0 ? 0 : 1);
      return result;
    }
    var paramBytesForAlg = {
      ES256: getParamSize(256),
      ES384: getParamSize(384),
      ES512: getParamSize(521)
    };
    function getParamBytesForAlg(alg) {
      var paramBytes = paramBytesForAlg[alg];
      if (paramBytes) {
        return paramBytes;
      }
      throw new Error('Unknown algorithm "' + alg + '"');
    }
    module2.exports = getParamBytesForAlg;
  }
});

// node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js
var require_ecdsa_sig_formatter = __commonJS({
  "node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js"(exports2, module2) {
    "use strict";
    var Buffer2 = require_safe_buffer().Buffer;
    var getParamBytesForAlg = require_param_bytes_for_alg();
    var MAX_OCTET = 128;
    var CLASS_UNIVERSAL = 0;
    var PRIMITIVE_BIT = 32;
    var TAG_SEQ = 16;
    var TAG_INT = 2;
    var ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | CLASS_UNIVERSAL << 6;
    var ENCODED_TAG_INT = TAG_INT | CLASS_UNIVERSAL << 6;
    function base64Url(base64) {
      return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function signatureAsBuffer(signature) {
      if (Buffer2.isBuffer(signature)) {
        return signature;
      } else if ("string" === typeof signature) {
        return Buffer2.from(signature, "base64");
      }
      throw new TypeError("ECDSA signature must be a Base64 string or a Buffer");
    }
    function derToJose(signature, alg) {
      signature = signatureAsBuffer(signature);
      var paramBytes = getParamBytesForAlg(alg);
      var maxEncodedParamLength = paramBytes + 1;
      var inputLength = signature.length;
      var offset = 0;
      if (signature[offset++] !== ENCODED_TAG_SEQ) {
        throw new Error('Could not find expected "seq"');
      }
      var seqLength = signature[offset++];
      if (seqLength === (MAX_OCTET | 1)) {
        seqLength = signature[offset++];
      }
      if (inputLength - offset < seqLength) {
        throw new Error('"seq" specified length of "' + seqLength + '", only "' + (inputLength - offset) + '" remaining');
      }
      if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "r"');
      }
      var rLength = signature[offset++];
      if (inputLength - offset - 2 < rLength) {
        throw new Error('"r" specified length of "' + rLength + '", only "' + (inputLength - offset - 2) + '" available');
      }
      if (maxEncodedParamLength < rLength) {
        throw new Error('"r" specified length of "' + rLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
      }
      var rOffset = offset;
      offset += rLength;
      if (signature[offset++] !== ENCODED_TAG_INT) {
        throw new Error('Could not find expected "int" for "s"');
      }
      var sLength = signature[offset++];
      if (inputLength - offset !== sLength) {
        throw new Error('"s" specified length of "' + sLength + '", expected "' + (inputLength - offset) + '"');
      }
      if (maxEncodedParamLength < sLength) {
        throw new Error('"s" specified length of "' + sLength + '", max of "' + maxEncodedParamLength + '" is acceptable');
      }
      var sOffset = offset;
      offset += sLength;
      if (offset !== inputLength) {
        throw new Error('Expected to consume entire buffer, but "' + (inputLength - offset) + '" bytes remain');
      }
      var rPadding = paramBytes - rLength, sPadding = paramBytes - sLength;
      var dst = Buffer2.allocUnsafe(rPadding + rLength + sPadding + sLength);
      for (offset = 0; offset < rPadding; ++offset) {
        dst[offset] = 0;
      }
      signature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);
      offset = paramBytes;
      for (var o = offset; offset < o + sPadding; ++offset) {
        dst[offset] = 0;
      }
      signature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);
      dst = dst.toString("base64");
      dst = base64Url(dst);
      return dst;
    }
    function countPadding(buf, start, stop) {
      var padding = 0;
      while (start + padding < stop && buf[start + padding] === 0) {
        ++padding;
      }
      var needsSign = buf[start + padding] >= MAX_OCTET;
      if (needsSign) {
        --padding;
      }
      return padding;
    }
    function joseToDer(signature, alg) {
      signature = signatureAsBuffer(signature);
      var paramBytes = getParamBytesForAlg(alg);
      var signatureBytes = signature.length;
      if (signatureBytes !== paramBytes * 2) {
        throw new TypeError('"' + alg + '" signatures must be "' + paramBytes * 2 + '" bytes, saw "' + signatureBytes + '"');
      }
      var rPadding = countPadding(signature, 0, paramBytes);
      var sPadding = countPadding(signature, paramBytes, signature.length);
      var rLength = paramBytes - rPadding;
      var sLength = paramBytes - sPadding;
      var rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;
      var shortLength = rsBytes < MAX_OCTET;
      var dst = Buffer2.allocUnsafe((shortLength ? 2 : 3) + rsBytes);
      var offset = 0;
      dst[offset++] = ENCODED_TAG_SEQ;
      if (shortLength) {
        dst[offset++] = rsBytes;
      } else {
        dst[offset++] = MAX_OCTET | 1;
        dst[offset++] = rsBytes & 255;
      }
      dst[offset++] = ENCODED_TAG_INT;
      dst[offset++] = rLength;
      if (rPadding < 0) {
        dst[offset++] = 0;
        offset += signature.copy(dst, offset, 0, paramBytes);
      } else {
        offset += signature.copy(dst, offset, rPadding, paramBytes);
      }
      dst[offset++] = ENCODED_TAG_INT;
      dst[offset++] = sLength;
      if (sPadding < 0) {
        dst[offset++] = 0;
        signature.copy(dst, offset, paramBytes);
      } else {
        signature.copy(dst, offset, paramBytes + sPadding);
      }
      return dst;
    }
    module2.exports = {
      derToJose,
      joseToDer
    };
  }
});

// node_modules/jwa/index.js
var require_jwa = __commonJS({
  "node_modules/jwa/index.js"(exports2, module2) {
    var bufferEqual = require_buffer_equal_constant_time();
    var Buffer2 = require_safe_buffer().Buffer;
    var crypto = require("crypto");
    var formatEcdsa = require_ecdsa_sig_formatter();
    var util = require("util");
    var MSG_INVALID_ALGORITHM = '"%s" is not a valid algorithm.\n  Supported algorithms are:\n  "HS256", "HS384", "HS512", "RS256", "RS384", "RS512", "PS256", "PS384", "PS512", "ES256", "ES384", "ES512" and "none".';
    var MSG_INVALID_SECRET = "secret must be a string or buffer";
    var MSG_INVALID_VERIFIER_KEY = "key must be a string or a buffer";
    var MSG_INVALID_SIGNER_KEY = "key must be a string, a buffer or an object";
    var supportsKeyObjects = typeof crypto.createPublicKey === "function";
    if (supportsKeyObjects) {
      MSG_INVALID_VERIFIER_KEY += " or a KeyObject";
      MSG_INVALID_SECRET += "or a KeyObject";
    }
    function checkIsPublicKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.type !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.asymmetricKeyType !== "string") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_VERIFIER_KEY);
      }
    }
    function checkIsPrivateKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return;
      }
      if (typeof key === "object") {
        return;
      }
      throw typeError(MSG_INVALID_SIGNER_KEY);
    }
    function checkIsSecretKey(key) {
      if (Buffer2.isBuffer(key)) {
        return;
      }
      if (typeof key === "string") {
        return key;
      }
      if (!supportsKeyObjects) {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key !== "object") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (key.type !== "secret") {
        throw typeError(MSG_INVALID_SECRET);
      }
      if (typeof key.export !== "function") {
        throw typeError(MSG_INVALID_SECRET);
      }
    }
    function fromBase64(base64) {
      return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function toBase64(base64url) {
      base64url = base64url.toString();
      var padding = 4 - base64url.length % 4;
      if (padding !== 4) {
        for (var i = 0; i < padding; ++i) {
          base64url += "=";
        }
      }
      return base64url.replace(/\-/g, "+").replace(/_/g, "/");
    }
    function typeError(template) {
      var args = [].slice.call(arguments, 1);
      var errMsg = util.format.bind(util, template).apply(null, args);
      return new TypeError(errMsg);
    }
    function bufferOrString(obj) {
      return Buffer2.isBuffer(obj) || typeof obj === "string";
    }
    function normalizeInput(thing) {
      if (!bufferOrString(thing))
        thing = JSON.stringify(thing);
      return thing;
    }
    function createHmacSigner(bits) {
      return function sign(thing, secret) {
        checkIsSecretKey(secret);
        thing = normalizeInput(thing);
        var hmac = crypto.createHmac("sha" + bits, secret);
        var sig = (hmac.update(thing), hmac.digest("base64"));
        return fromBase64(sig);
      };
    }
    function createHmacVerifier(bits) {
      return function verify(thing, signature, secret) {
        var computedSig = createHmacSigner(bits)(thing, secret);
        return bufferEqual(Buffer2.from(signature), Buffer2.from(computedSig));
      };
    }
    function createKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign(privateKey, "base64"));
        return fromBase64(sig);
      };
    }
    function createKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify(publicKey, signature, "base64");
      };
    }
    function createPSSKeySigner(bits) {
      return function sign(thing, privateKey) {
        checkIsPrivateKey(privateKey);
        thing = normalizeInput(thing);
        var signer = crypto.createSign("RSA-SHA" + bits);
        var sig = (signer.update(thing), signer.sign({
          key: privateKey,
          padding: crypto.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST
        }, "base64"));
        return fromBase64(sig);
      };
    }
    function createPSSKeyVerifier(bits) {
      return function verify(thing, signature, publicKey) {
        checkIsPublicKey(publicKey);
        thing = normalizeInput(thing);
        signature = toBase64(signature);
        var verifier = crypto.createVerify("RSA-SHA" + bits);
        verifier.update(thing);
        return verifier.verify({
          key: publicKey,
          padding: crypto.constants.RSA_PKCS1_PSS_PADDING,
          saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST
        }, signature, "base64");
      };
    }
    function createECDSASigner(bits) {
      var inner = createKeySigner(bits);
      return function sign() {
        var signature = inner.apply(null, arguments);
        signature = formatEcdsa.derToJose(signature, "ES" + bits);
        return signature;
      };
    }
    function createECDSAVerifer(bits) {
      var inner = createKeyVerifier(bits);
      return function verify(thing, signature, publicKey) {
        signature = formatEcdsa.joseToDer(signature, "ES" + bits).toString("base64");
        var result = inner(thing, signature, publicKey);
        return result;
      };
    }
    function createNoneSigner() {
      return function sign() {
        return "";
      };
    }
    function createNoneVerifier() {
      return function verify(thing, signature) {
        return signature === "";
      };
    }
    module2.exports = function jwa(algorithm) {
      var signerFactories = {
        hs: createHmacSigner,
        rs: createKeySigner,
        ps: createPSSKeySigner,
        es: createECDSASigner,
        none: createNoneSigner
      };
      var verifierFactories = {
        hs: createHmacVerifier,
        rs: createKeyVerifier,
        ps: createPSSKeyVerifier,
        es: createECDSAVerifer,
        none: createNoneVerifier
      };
      var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);
      if (!match)
        throw typeError(MSG_INVALID_ALGORITHM, algorithm);
      var algo = (match[1] || match[3]).toLowerCase();
      var bits = match[2];
      return {
        sign: signerFactories[algo](bits),
        verify: verifierFactories[algo](bits)
      };
    };
  }
});

// node_modules/jws/lib/tostring.js
var require_tostring = __commonJS({
  "node_modules/jws/lib/tostring.js"(exports2, module2) {
    var Buffer2 = require("buffer").Buffer;
    module2.exports = function toString(obj) {
      if (typeof obj === "string")
        return obj;
      if (typeof obj === "number" || Buffer2.isBuffer(obj))
        return obj.toString();
      return JSON.stringify(obj);
    };
  }
});

// node_modules/jws/lib/sign-stream.js
var require_sign_stream = __commonJS({
  "node_modules/jws/lib/sign-stream.js"(exports2, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream = require("stream");
    var toString = require_tostring();
    var util = require("util");
    function base64url(string, encoding) {
      return Buffer2.from(string, encoding).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    }
    function jwsSecuredInput(header, payload, encoding) {
      encoding = encoding || "utf8";
      var encodedHeader = base64url(toString(header), "binary");
      var encodedPayload = base64url(toString(payload), encoding);
      return util.format("%s.%s", encodedHeader, encodedPayload);
    }
    function jwsSign(opts) {
      var header = opts.header;
      var payload = opts.payload;
      var secretOrKey = opts.secret || opts.privateKey;
      var encoding = opts.encoding;
      var algo = jwa(header.alg);
      var securedInput = jwsSecuredInput(header, payload, encoding);
      var signature = algo.sign(securedInput, secretOrKey);
      return util.format("%s.%s", securedInput, signature);
    }
    function SignStream(opts) {
      var secret = opts.secret || opts.privateKey || opts.key;
      var secretStream = new DataStream(secret);
      this.readable = true;
      this.header = opts.header;
      this.encoding = opts.encoding;
      this.secret = this.privateKey = this.key = secretStream;
      this.payload = new DataStream(opts.payload);
      this.secret.once("close", function() {
        if (!this.payload.writable && this.readable)
          this.sign();
      }.bind(this));
      this.payload.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.sign();
      }.bind(this));
    }
    util.inherits(SignStream, Stream);
    SignStream.prototype.sign = function sign() {
      try {
        var signature = jwsSign({
          header: this.header,
          payload: this.payload.buffer,
          secret: this.secret.buffer,
          encoding: this.encoding
        });
        this.emit("done", signature);
        this.emit("data", signature);
        this.emit("end");
        this.readable = false;
        return signature;
      } catch (e) {
        this.readable = false;
        this.emit("error", e);
        this.emit("close");
      }
    };
    SignStream.sign = jwsSign;
    module2.exports = SignStream;
  }
});

// node_modules/jws/lib/verify-stream.js
var require_verify_stream = __commonJS({
  "node_modules/jws/lib/verify-stream.js"(exports2, module2) {
    var Buffer2 = require_safe_buffer().Buffer;
    var DataStream = require_data_stream();
    var jwa = require_jwa();
    var Stream = require("stream");
    var toString = require_tostring();
    var util = require("util");
    var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
    function isObject(thing) {
      return Object.prototype.toString.call(thing) === "[object Object]";
    }
    function safeJsonParse(thing) {
      if (isObject(thing))
        return thing;
      try {
        return JSON.parse(thing);
      } catch (e) {
        return void 0;
      }
    }
    function headerFromJWS(jwsSig) {
      var encodedHeader = jwsSig.split(".", 1)[0];
      return safeJsonParse(Buffer2.from(encodedHeader, "base64").toString("binary"));
    }
    function securedInputFromJWS(jwsSig) {
      return jwsSig.split(".", 2).join(".");
    }
    function signatureFromJWS(jwsSig) {
      return jwsSig.split(".")[2];
    }
    function payloadFromJWS(jwsSig, encoding) {
      encoding = encoding || "utf8";
      var payload = jwsSig.split(".")[1];
      return Buffer2.from(payload, "base64").toString(encoding);
    }
    function isValidJws(string) {
      return JWS_REGEX.test(string) && !!headerFromJWS(string);
    }
    function jwsVerify(jwsSig, algorithm, secretOrKey) {
      if (!algorithm) {
        var err = new Error("Missing algorithm parameter for jws.verify");
        err.code = "MISSING_ALGORITHM";
        throw err;
      }
      jwsSig = toString(jwsSig);
      var signature = signatureFromJWS(jwsSig);
      var securedInput = securedInputFromJWS(jwsSig);
      var algo = jwa(algorithm);
      return algo.verify(securedInput, signature, secretOrKey);
    }
    function jwsDecode(jwsSig, opts) {
      opts = opts || {};
      jwsSig = toString(jwsSig);
      if (!isValidJws(jwsSig))
        return null;
      var header = headerFromJWS(jwsSig);
      if (!header)
        return null;
      var payload = payloadFromJWS(jwsSig);
      if (header.typ === "JWT" || opts.json)
        payload = JSON.parse(payload, opts.encoding);
      return {
        header,
        payload,
        signature: signatureFromJWS(jwsSig)
      };
    }
    function VerifyStream(opts) {
      opts = opts || {};
      var secretOrKey = opts.secret || opts.publicKey || opts.key;
      var secretStream = new DataStream(secretOrKey);
      this.readable = true;
      this.algorithm = opts.algorithm;
      this.encoding = opts.encoding;
      this.secret = this.publicKey = this.key = secretStream;
      this.signature = new DataStream(opts.signature);
      this.secret.once("close", function() {
        if (!this.signature.writable && this.readable)
          this.verify();
      }.bind(this));
      this.signature.once("close", function() {
        if (!this.secret.writable && this.readable)
          this.verify();
      }.bind(this));
    }
    util.inherits(VerifyStream, Stream);
    VerifyStream.prototype.verify = function verify() {
      try {
        var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);
        var obj = jwsDecode(this.signature.buffer, this.encoding);
        this.emit("done", valid, obj);
        this.emit("data", valid);
        this.emit("end");
        this.readable = false;
        return valid;
      } catch (e) {
        this.readable = false;
        this.emit("error", e);
        this.emit("close");
      }
    };
    VerifyStream.decode = jwsDecode;
    VerifyStream.isValid = isValidJws;
    VerifyStream.verify = jwsVerify;
    module2.exports = VerifyStream;
  }
});

// node_modules/jws/index.js
var require_jws = __commonJS({
  "node_modules/jws/index.js"(exports2) {
    var SignStream = require_sign_stream();
    var VerifyStream = require_verify_stream();
    var ALGORITHMS = [
      "HS256",
      "HS384",
      "HS512",
      "RS256",
      "RS384",
      "RS512",
      "PS256",
      "PS384",
      "PS512",
      "ES256",
      "ES384",
      "ES512"
    ];
    exports2.ALGORITHMS = ALGORITHMS;
    exports2.sign = SignStream.sign;
    exports2.verify = VerifyStream.verify;
    exports2.decode = VerifyStream.decode;
    exports2.isValid = VerifyStream.isValid;
    exports2.createSign = function createSign(opts) {
      return new SignStream(opts);
    };
    exports2.createVerify = function createVerify(opts) {
      return new VerifyStream(opts);
    };
  }
});

// node_modules/jsonwebtoken/decode.js
var require_decode = __commonJS({
  "node_modules/jsonwebtoken/decode.js"(exports2, module2) {
    var jws = require_jws();
    module2.exports = function(jwt2, options2) {
      options2 = options2 || {};
      var decoded = jws.decode(jwt2, options2);
      if (!decoded) {
        return null;
      }
      var payload = decoded.payload;
      if (typeof payload === "string") {
        try {
          var obj = JSON.parse(payload);
          if (obj !== null && typeof obj === "object") {
            payload = obj;
          }
        } catch (e) {
        }
      }
      if (options2.complete === true) {
        return {
          header: decoded.header,
          payload,
          signature: decoded.signature
        };
      }
      return payload;
    };
  }
});

// node_modules/jsonwebtoken/lib/JsonWebTokenError.js
var require_JsonWebTokenError = __commonJS({
  "node_modules/jsonwebtoken/lib/JsonWebTokenError.js"(exports2, module2) {
    var JsonWebTokenError = function(message, error) {
      Error.call(this, message);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      }
      this.name = "JsonWebTokenError";
      this.message = message;
      if (error) this.inner = error;
    };
    JsonWebTokenError.prototype = Object.create(Error.prototype);
    JsonWebTokenError.prototype.constructor = JsonWebTokenError;
    module2.exports = JsonWebTokenError;
  }
});

// node_modules/jsonwebtoken/lib/NotBeforeError.js
var require_NotBeforeError = __commonJS({
  "node_modules/jsonwebtoken/lib/NotBeforeError.js"(exports2, module2) {
    var JsonWebTokenError = require_JsonWebTokenError();
    var NotBeforeError = function(message, date) {
      JsonWebTokenError.call(this, message);
      this.name = "NotBeforeError";
      this.date = date;
    };
    NotBeforeError.prototype = Object.create(JsonWebTokenError.prototype);
    NotBeforeError.prototype.constructor = NotBeforeError;
    module2.exports = NotBeforeError;
  }
});

// node_modules/jsonwebtoken/lib/TokenExpiredError.js
var require_TokenExpiredError = __commonJS({
  "node_modules/jsonwebtoken/lib/TokenExpiredError.js"(exports2, module2) {
    var JsonWebTokenError = require_JsonWebTokenError();
    var TokenExpiredError = function(message, expiredAt) {
      JsonWebTokenError.call(this, message);
      this.name = "TokenExpiredError";
      this.expiredAt = expiredAt;
    };
    TokenExpiredError.prototype = Object.create(JsonWebTokenError.prototype);
    TokenExpiredError.prototype.constructor = TokenExpiredError;
    module2.exports = TokenExpiredError;
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports2, module2) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module2.exports = function(val2, options2) {
      options2 = options2 || {};
      var type = typeof val2;
      if (type === "string" && val2.length > 0) {
        return parse(val2);
      } else if (type === "number" && isFinite(val2)) {
        return options2.long ? fmtLong(val2) : fmtShort(val2);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val2)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/jsonwebtoken/lib/timespan.js
var require_timespan = __commonJS({
  "node_modules/jsonwebtoken/lib/timespan.js"(exports2, module2) {
    var ms = require_ms();
    module2.exports = function(time, iat) {
      var timestamp = iat || Math.floor(Date.now() / 1e3);
      if (typeof time === "string") {
        var milliseconds = ms(time);
        if (typeof milliseconds === "undefined") {
          return;
        }
        return Math.floor(timestamp + milliseconds / 1e3);
      } else if (typeof time === "number") {
        return timestamp + time;
      } else {
        return;
      }
    };
  }
});

// node_modules/semver/internal/constants.js
var require_constants = __commonJS({
  "node_modules/semver/internal/constants.js"(exports2, module2) {
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */
    9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    var MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;
    var RELEASE_TYPES = [
      "major",
      "premajor",
      "minor",
      "preminor",
      "patch",
      "prepatch",
      "prerelease"
    ];
    module2.exports = {
      MAX_LENGTH,
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_SAFE_INTEGER,
      RELEASE_TYPES,
      SEMVER_SPEC_VERSION,
      FLAG_INCLUDE_PRERELEASE: 1,
      FLAG_LOOSE: 2
    };
  }
});

// node_modules/semver/internal/debug.js
var require_debug = __commonJS({
  "node_modules/semver/internal/debug.js"(exports2, module2) {
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module2.exports = debug;
  }
});

// node_modules/semver/internal/re.js
var require_re = __commonJS({
  "node_modules/semver/internal/re.js"(exports2, module2) {
    var {
      MAX_SAFE_COMPONENT_LENGTH,
      MAX_SAFE_BUILD_LENGTH,
      MAX_LENGTH
    } = require_constants();
    var debug = require_debug();
    exports2 = module2.exports = {};
    var re = exports2.re = [];
    var safeRe = exports2.safeRe = [];
    var src = exports2.src = [];
    var t = exports2.t = {};
    var R = 0;
    var LETTERDASHNUMBER = "[a-zA-Z0-9-]";
    var safeRegexReplacements = [
      ["\\s", 1],
      ["\\d", MAX_LENGTH],
      [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
    ];
    var makeSafeRegex = (value) => {
      for (const [token, max] of safeRegexReplacements) {
        value = value.split(`${token}*`).join(`${token}{0,${max}}`).split(`${token}+`).join(`${token}{1,${max}}`);
      }
      return value;
    };
    var createToken = (name, value, isGlobal) => {
      const safe = makeSafeRegex(value);
      const index = R++;
      debug(name, index, value);
      t[name] = index;
      src[index] = value;
      re[index] = new RegExp(value, isGlobal ? "g" : void 0);
      safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
    createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
    createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
    createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
    createToken("FULL", `^${src[t.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
    createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COERCEPLAIN", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
    createToken("COERCE", `${src[t.COERCEPLAIN]}(?:$|[^\\d])`);
    createToken("COERCEFULL", src[t.COERCEPLAIN] + `(?:${src[t.PRERELEASE]})?(?:${src[t.BUILD]})?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t.COERCE], true);
    createToken("COERCERTLFULL", src[t.COERCEFULL], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports2.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports2.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports2.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({
  "node_modules/semver/internal/parse-options.js"(exports2, module2) {
    var looseOption = Object.freeze({ loose: true });
    var emptyOpts = Object.freeze({});
    var parseOptions = (options2) => {
      if (!options2) {
        return emptyOpts;
      }
      if (typeof options2 !== "object") {
        return looseOption;
      }
      return options2;
    };
    module2.exports = parseOptions;
  }
});

// node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({
  "node_modules/semver/internal/identifiers.js"(exports2, module2) {
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module2.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// node_modules/semver/classes/semver.js
var require_semver = __commonJS({
  "node_modules/semver/classes/semver.js"(exports2, module2) {
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants();
    var { safeRe: re, t } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class _SemVer {
      constructor(version, options2) {
        options2 = parseOptions(options2);
        if (version instanceof _SemVer) {
          if (version.loose === !!options2.loose && version.includePrerelease === !!options2.includePrerelease) {
            return version;
          } else {
            version = version.version;
          }
        } else if (typeof version !== "string") {
          throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
        }
        if (version.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug("SemVer", version, options2);
        this.options = options2;
        this.loose = !!options2.loose;
        this.includePrerelease = !!options2.includePrerelease;
        const m = version.trim().match(options2.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) {
          throw new TypeError(`Invalid Version: ${version}`);
        }
        this.raw = version;
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof _SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new _SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof _SemVer)) {
          other = new _SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug("build compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc(release, identifier, identifierBase) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier, identifierBase);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier, identifierBase);
            this.inc("pre", identifier, identifierBase);
            break;
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier, identifierBase);
            }
            this.inc("pre", identifier, identifierBase);
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          case "pre": {
            const base = Number(identifierBase) ? 1 : 0;
            if (!identifier && identifierBase === false) {
              throw new Error("invalid increment argument: identifier is empty");
            }
            if (this.prerelease.length === 0) {
              this.prerelease = [base];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === "number") {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                if (identifier === this.prerelease.join(".") && identifierBase === false) {
                  throw new Error("invalid increment argument: identifier already exists");
                }
                this.prerelease.push(base);
              }
            }
            if (identifier) {
              let prerelease = [identifier, base];
              if (identifierBase === false) {
                prerelease = [identifier];
              }
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = prerelease;
                }
              } else {
                this.prerelease = prerelease;
              }
            }
            break;
          }
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.raw = this.format();
        if (this.build.length) {
          this.raw += `+${this.build.join(".")}`;
        }
        return this;
      }
    };
    module2.exports = SemVer;
  }
});

// node_modules/semver/functions/parse.js
var require_parse = __commonJS({
  "node_modules/semver/functions/parse.js"(exports2, module2) {
    var SemVer = require_semver();
    var parse = (version, options2, throwErrors = false) => {
      if (version instanceof SemVer) {
        return version;
      }
      try {
        return new SemVer(version, options2);
      } catch (er) {
        if (!throwErrors) {
          return null;
        }
        throw er;
      }
    };
    module2.exports = parse;
  }
});

// node_modules/semver/functions/valid.js
var require_valid = __commonJS({
  "node_modules/semver/functions/valid.js"(exports2, module2) {
    var parse = require_parse();
    var valid = (version, options2) => {
      const v = parse(version, options2);
      return v ? v.version : null;
    };
    module2.exports = valid;
  }
});

// node_modules/semver/functions/clean.js
var require_clean = __commonJS({
  "node_modules/semver/functions/clean.js"(exports2, module2) {
    var parse = require_parse();
    var clean = (version, options2) => {
      const s = parse(version.trim().replace(/^[=v]+/, ""), options2);
      return s ? s.version : null;
    };
    module2.exports = clean;
  }
});

// node_modules/semver/functions/inc.js
var require_inc = __commonJS({
  "node_modules/semver/functions/inc.js"(exports2, module2) {
    var SemVer = require_semver();
    var inc = (version, release, options2, identifier, identifierBase) => {
      if (typeof options2 === "string") {
        identifierBase = identifier;
        identifier = options2;
        options2 = void 0;
      }
      try {
        return new SemVer(
          version instanceof SemVer ? version.version : version,
          options2
        ).inc(release, identifier, identifierBase).version;
      } catch (er) {
        return null;
      }
    };
    module2.exports = inc;
  }
});

// node_modules/semver/functions/diff.js
var require_diff = __commonJS({
  "node_modules/semver/functions/diff.js"(exports2, module2) {
    var parse = require_parse();
    var diff = (version1, version2) => {
      const v1 = parse(version1, null, true);
      const v2 = parse(version2, null, true);
      const comparison = v1.compare(v2);
      if (comparison === 0) {
        return null;
      }
      const v1Higher = comparison > 0;
      const highVersion = v1Higher ? v1 : v2;
      const lowVersion = v1Higher ? v2 : v1;
      const highHasPre = !!highVersion.prerelease.length;
      const lowHasPre = !!lowVersion.prerelease.length;
      if (lowHasPre && !highHasPre) {
        if (!lowVersion.patch && !lowVersion.minor) {
          return "major";
        }
        if (highVersion.patch) {
          return "patch";
        }
        if (highVersion.minor) {
          return "minor";
        }
        return "major";
      }
      const prefix = highHasPre ? "pre" : "";
      if (v1.major !== v2.major) {
        return prefix + "major";
      }
      if (v1.minor !== v2.minor) {
        return prefix + "minor";
      }
      if (v1.patch !== v2.patch) {
        return prefix + "patch";
      }
      return "prerelease";
    };
    module2.exports = diff;
  }
});

// node_modules/semver/functions/major.js
var require_major = __commonJS({
  "node_modules/semver/functions/major.js"(exports2, module2) {
    var SemVer = require_semver();
    var major = (a, loose) => new SemVer(a, loose).major;
    module2.exports = major;
  }
});

// node_modules/semver/functions/minor.js
var require_minor = __commonJS({
  "node_modules/semver/functions/minor.js"(exports2, module2) {
    var SemVer = require_semver();
    var minor = (a, loose) => new SemVer(a, loose).minor;
    module2.exports = minor;
  }
});

// node_modules/semver/functions/patch.js
var require_patch = __commonJS({
  "node_modules/semver/functions/patch.js"(exports2, module2) {
    var SemVer = require_semver();
    var patch = (a, loose) => new SemVer(a, loose).patch;
    module2.exports = patch;
  }
});

// node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({
  "node_modules/semver/functions/prerelease.js"(exports2, module2) {
    var parse = require_parse();
    var prerelease = (version, options2) => {
      const parsed = parse(version, options2);
      return parsed && parsed.prerelease.length ? parsed.prerelease : null;
    };
    module2.exports = prerelease;
  }
});

// node_modules/semver/functions/compare.js
var require_compare = __commonJS({
  "node_modules/semver/functions/compare.js"(exports2, module2) {
    var SemVer = require_semver();
    var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module2.exports = compare;
  }
});

// node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({
  "node_modules/semver/functions/rcompare.js"(exports2, module2) {
    var compare = require_compare();
    var rcompare = (a, b, loose) => compare(b, a, loose);
    module2.exports = rcompare;
  }
});

// node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({
  "node_modules/semver/functions/compare-loose.js"(exports2, module2) {
    var compare = require_compare();
    var compareLoose = (a, b) => compare(a, b, true);
    module2.exports = compareLoose;
  }
});

// node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({
  "node_modules/semver/functions/compare-build.js"(exports2, module2) {
    var SemVer = require_semver();
    var compareBuild = (a, b, loose) => {
      const versionA = new SemVer(a, loose);
      const versionB = new SemVer(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB);
    };
    module2.exports = compareBuild;
  }
});

// node_modules/semver/functions/sort.js
var require_sort = __commonJS({
  "node_modules/semver/functions/sort.js"(exports2, module2) {
    var compareBuild = require_compare_build();
    var sort = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
    module2.exports = sort;
  }
});

// node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({
  "node_modules/semver/functions/rsort.js"(exports2, module2) {
    var compareBuild = require_compare_build();
    var rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
    module2.exports = rsort;
  }
});

// node_modules/semver/functions/gt.js
var require_gt = __commonJS({
  "node_modules/semver/functions/gt.js"(exports2, module2) {
    var compare = require_compare();
    var gt = (a, b, loose) => compare(a, b, loose) > 0;
    module2.exports = gt;
  }
});

// node_modules/semver/functions/lt.js
var require_lt = __commonJS({
  "node_modules/semver/functions/lt.js"(exports2, module2) {
    var compare = require_compare();
    var lt = (a, b, loose) => compare(a, b, loose) < 0;
    module2.exports = lt;
  }
});

// node_modules/semver/functions/eq.js
var require_eq = __commonJS({
  "node_modules/semver/functions/eq.js"(exports2, module2) {
    var compare = require_compare();
    var eq = (a, b, loose) => compare(a, b, loose) === 0;
    module2.exports = eq;
  }
});

// node_modules/semver/functions/neq.js
var require_neq = __commonJS({
  "node_modules/semver/functions/neq.js"(exports2, module2) {
    var compare = require_compare();
    var neq = (a, b, loose) => compare(a, b, loose) !== 0;
    module2.exports = neq;
  }
});

// node_modules/semver/functions/gte.js
var require_gte = __commonJS({
  "node_modules/semver/functions/gte.js"(exports2, module2) {
    var compare = require_compare();
    var gte = (a, b, loose) => compare(a, b, loose) >= 0;
    module2.exports = gte;
  }
});

// node_modules/semver/functions/lte.js
var require_lte = __commonJS({
  "node_modules/semver/functions/lte.js"(exports2, module2) {
    var compare = require_compare();
    var lte = (a, b, loose) => compare(a, b, loose) <= 0;
    module2.exports = lte;
  }
});

// node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({
  "node_modules/semver/functions/cmp.js"(exports2, module2) {
    var eq = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a === b;
        case "!==":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module2.exports = cmp;
  }
});

// node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({
  "node_modules/semver/functions/coerce.js"(exports2, module2) {
    var SemVer = require_semver();
    var parse = require_parse();
    var { safeRe: re, t } = require_re();
    var coerce = (version, options2) => {
      if (version instanceof SemVer) {
        return version;
      }
      if (typeof version === "number") {
        version = String(version);
      }
      if (typeof version !== "string") {
        return null;
      }
      options2 = options2 || {};
      let match = null;
      if (!options2.rtl) {
        match = version.match(options2.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);
      } else {
        const coerceRtlRegex = options2.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];
        let next;
        while ((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)) {
          if (!match || next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
        }
        coerceRtlRegex.lastIndex = -1;
      }
      if (match === null) {
        return null;
      }
      const major = match[2];
      const minor = match[3] || "0";
      const patch = match[4] || "0";
      const prerelease = options2.includePrerelease && match[5] ? `-${match[5]}` : "";
      const build = options2.includePrerelease && match[6] ? `+${match[6]}` : "";
      return parse(`${major}.${minor}.${patch}${prerelease}${build}`, options2);
    };
    module2.exports = coerce;
  }
});

// node_modules/semver/internal/lrucache.js
var require_lrucache = __commonJS({
  "node_modules/semver/internal/lrucache.js"(exports2, module2) {
    var LRUCache = class {
      constructor() {
        this.max = 1e3;
        this.map = /* @__PURE__ */ new Map();
      }
      get(key) {
        const value = this.map.get(key);
        if (value === void 0) {
          return void 0;
        } else {
          this.map.delete(key);
          this.map.set(key, value);
          return value;
        }
      }
      delete(key) {
        return this.map.delete(key);
      }
      set(key, value) {
        const deleted = this.delete(key);
        if (!deleted && value !== void 0) {
          if (this.map.size >= this.max) {
            const firstKey = this.map.keys().next().value;
            this.delete(firstKey);
          }
          this.map.set(key, value);
        }
        return this;
      }
    };
    module2.exports = LRUCache;
  }
});

// node_modules/semver/classes/range.js
var require_range = __commonJS({
  "node_modules/semver/classes/range.js"(exports2, module2) {
    var SPACE_CHARACTERS = /\s+/g;
    var Range = class _Range {
      constructor(range, options2) {
        options2 = parseOptions(options2);
        if (range instanceof _Range) {
          if (range.loose === !!options2.loose && range.includePrerelease === !!options2.includePrerelease) {
            return range;
          } else {
            return new _Range(range.raw, options2);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.formatted = void 0;
          return this;
        }
        this.options = options2;
        this.loose = !!options2.loose;
        this.includePrerelease = !!options2.includePrerelease;
        this.raw = range.trim().replace(SPACE_CHARACTERS, " ");
        this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.formatted = void 0;
      }
      get range() {
        if (this.formatted === void 0) {
          this.formatted = "";
          for (let i = 0; i < this.set.length; i++) {
            if (i > 0) {
              this.formatted += "||";
            }
            const comps = this.set[i];
            for (let k = 0; k < comps.length; k++) {
              if (k > 0) {
                this.formatted += " ";
              }
              this.formatted += comps[k].toString().trim();
            }
          }
        }
        return this.formatted;
      }
      format() {
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
        const memoKey = memoOpts + ":" + range;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        debug("tilde trim", range);
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        debug("caret trim", range);
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options2) {
        if (!(range instanceof _Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options2) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options2) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options2);
              });
            });
          });
        });
      }
      // if ANY of the sets match ALL of its comparators, then pass
      test(version) {
        if (!version) {
          return false;
        }
        if (typeof version === "string") {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module2.exports = Range;
    var LRU = require_lrucache();
    var cache = new LRU();
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver();
    var {
      safeRe: re,
      t,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants();
    var isNullSet = (c) => c.value === "<0.0.0-0";
    var isAny = (c) => c.value === "";
    var isSatisfiable = (comparators, options2) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options2);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options2) => {
      debug("comp", comp, options2);
      comp = replaceCarets(comp, options2);
      debug("caret", comp);
      comp = replaceTildes(comp, options2);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options2);
      debug("xrange", comp);
      comp = replaceStars(comp, options2);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options2) => {
      return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options2)).join(" ");
    };
    var replaceTilde = (comp, options2) => {
      const r = options2.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options2) => {
      return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options2)).join(" ");
    };
    var replaceCaret = (comp, options2) => {
      debug("caret", comp, options2);
      const r = options2.loose ? re[t.CARETLOOSE] : re[t.CARET];
      const z = options2.includePrerelease ? "-0" : "";
      return comp.replace(r, (_, M, m, p, pr) => {
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options2) => {
      debug("replaceXRanges", comp, options2);
      return comp.split(/\s+/).map((c) => replaceXRange(c, options2)).join(" ");
    };
    var replaceXRange = (comp, options2) => {
      comp = comp.trim();
      const r = options2.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options2.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options2) => {
      debug("replaceStars", comp, options2);
      return comp.trim().replace(re[t.STAR], "");
    };
    var replaceGTE0 = (comp, options2) => {
      debug("replaceGTE0", comp, options2);
      return comp.trim().replace(re[options2.includePrerelease ? t.GTE0PRE : t.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set, version, options2) => {
      for (let i = 0; i < set.length; i++) {
        if (!set[i].test(version)) {
          return false;
        }
      }
      if (version.prerelease.length && !options2.includePrerelease) {
        for (let i = 0; i < set.length; i++) {
          debug(set[i].semver);
          if (set[i].semver === Comparator.ANY) {
            continue;
          }
          if (set[i].semver.prerelease.length > 0) {
            const allowed2 = set[i].semver;
            if (allowed2.major === version.major && allowed2.minor === version.minor && allowed2.patch === version.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({
  "node_modules/semver/classes/comparator.js"(exports2, module2) {
    var ANY = Symbol("SemVer ANY");
    var Comparator = class _Comparator {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options2) {
        options2 = parseOptions(options2);
        if (comp instanceof _Comparator) {
          if (comp.loose === !!options2.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        comp = comp.trim().split(/\s+/).join(" ");
        debug("comparator", comp, options2);
        this.options = options2;
        this.loose = !!options2.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version) {
        debug("Comparator.test", version, this.options.loose);
        if (this.semver === ANY || version === ANY) {
          return true;
        }
        if (typeof version === "string") {
          try {
            version = new SemVer(version, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version, this.operator, this.semver, this.options);
      }
      intersects(comp, options2) {
        if (!(comp instanceof _Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options2).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options2).test(comp.semver);
        }
        options2 = parseOptions(options2);
        if (options2.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) {
          return false;
        }
        if (!options2.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) {
          return false;
        }
        if (this.operator.startsWith(">") && comp.operator.startsWith(">")) {
          return true;
        }
        if (this.operator.startsWith("<") && comp.operator.startsWith("<")) {
          return true;
        }
        if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) {
          return true;
        }
        if (cmp(this.semver, "<", comp.semver, options2) && this.operator.startsWith(">") && comp.operator.startsWith("<")) {
          return true;
        }
        if (cmp(this.semver, ">", comp.semver, options2) && this.operator.startsWith("<") && comp.operator.startsWith(">")) {
          return true;
        }
        return false;
      }
    };
    module2.exports = Comparator;
    var parseOptions = require_parse_options();
    var { safeRe: re, t } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver();
    var Range = require_range();
  }
});

// node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({
  "node_modules/semver/functions/satisfies.js"(exports2, module2) {
    var Range = require_range();
    var satisfies = (version, range, options2) => {
      try {
        range = new Range(range, options2);
      } catch (er) {
        return false;
      }
      return range.test(version);
    };
    module2.exports = satisfies;
  }
});

// node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({
  "node_modules/semver/ranges/to-comparators.js"(exports2, module2) {
    var Range = require_range();
    var toComparators = (range, options2) => new Range(range, options2).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
    module2.exports = toComparators;
  }
});

// node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({
  "node_modules/semver/ranges/max-satisfying.js"(exports2, module2) {
    var SemVer = require_semver();
    var Range = require_range();
    var maxSatisfying = (versions, range, options2) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options2);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!max || maxSV.compare(v) === -1) {
            max = v;
            maxSV = new SemVer(max, options2);
          }
        }
      });
      return max;
    };
    module2.exports = maxSatisfying;
  }
});

// node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({
  "node_modules/semver/ranges/min-satisfying.js"(exports2, module2) {
    var SemVer = require_semver();
    var Range = require_range();
    var minSatisfying = (versions, range, options2) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range(range, options2);
      } catch (er) {
        return null;
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          if (!min || minSV.compare(v) === 1) {
            min = v;
            minSV = new SemVer(min, options2);
          }
        }
      });
      return min;
    };
    module2.exports = minSatisfying;
  }
});

// node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({
  "node_modules/semver/ranges/min-version.js"(exports2, module2) {
    var SemVer = require_semver();
    var Range = require_range();
    var gt = require_gt();
    var minVersion = (range, loose) => {
      range = new Range(range, loose);
      let minver = new SemVer("0.0.0");
      if (range.test(minver)) {
        return minver;
      }
      minver = new SemVer("0.0.0-0");
      if (range.test(minver)) {
        return minver;
      }
      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let setMin = null;
        comparators.forEach((comparator) => {
          const compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case ">":
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
            case "":
            case ">=":
              if (!setMin || gt(compver, setMin)) {
                setMin = compver;
              }
              break;
            case "<":
            case "<=":
              break;
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`);
          }
        });
        if (setMin && (!minver || gt(minver, setMin))) {
          minver = setMin;
        }
      }
      if (minver && range.test(minver)) {
        return minver;
      }
      return null;
    };
    module2.exports = minVersion;
  }
});

// node_modules/semver/ranges/valid.js
var require_valid2 = __commonJS({
  "node_modules/semver/ranges/valid.js"(exports2, module2) {
    var Range = require_range();
    var validRange = (range, options2) => {
      try {
        return new Range(range, options2).range || "*";
      } catch (er) {
        return null;
      }
    };
    module2.exports = validRange;
  }
});

// node_modules/semver/ranges/outside.js
var require_outside = __commonJS({
  "node_modules/semver/ranges/outside.js"(exports2, module2) {
    var SemVer = require_semver();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var Range = require_range();
    var satisfies = require_satisfies();
    var gt = require_gt();
    var lt = require_lt();
    var lte = require_lte();
    var gte = require_gte();
    var outside = (version, range, hilo, options2) => {
      version = new SemVer(version, options2);
      range = new Range(range, options2);
      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case ">":
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = ">";
          ecomp = ">=";
          break;
        case "<":
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = "<";
          ecomp = "<=";
          break;
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"');
      }
      if (satisfies(version, range, options2)) {
        return false;
      }
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];
        let high = null;
        let low = null;
        comparators.forEach((comparator) => {
          if (comparator.semver === ANY) {
            comparator = new Comparator(">=0.0.0");
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options2)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options2)) {
            low = comparator;
          }
        });
        if (high.operator === comp || high.operator === ecomp) {
          return false;
        }
        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {
          return false;
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false;
        }
      }
      return true;
    };
    module2.exports = outside;
  }
});

// node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({
  "node_modules/semver/ranges/gtr.js"(exports2, module2) {
    var outside = require_outside();
    var gtr = (version, range, options2) => outside(version, range, ">", options2);
    module2.exports = gtr;
  }
});

// node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({
  "node_modules/semver/ranges/ltr.js"(exports2, module2) {
    var outside = require_outside();
    var ltr = (version, range, options2) => outside(version, range, "<", options2);
    module2.exports = ltr;
  }
});

// node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({
  "node_modules/semver/ranges/intersects.js"(exports2, module2) {
    var Range = require_range();
    var intersects = (r1, r2, options2) => {
      r1 = new Range(r1, options2);
      r2 = new Range(r2, options2);
      return r1.intersects(r2, options2);
    };
    module2.exports = intersects;
  }
});

// node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({
  "node_modules/semver/ranges/simplify.js"(exports2, module2) {
    var satisfies = require_satisfies();
    var compare = require_compare();
    module2.exports = (versions, range, options2) => {
      const set = [];
      let first = null;
      let prev = null;
      const v = versions.sort((a, b) => compare(a, b, options2));
      for (const version of v) {
        const included = satisfies(version, range, options2);
        if (included) {
          prev = version;
          if (!first) {
            first = version;
          }
        } else {
          if (prev) {
            set.push([first, prev]);
          }
          prev = null;
          first = null;
        }
      }
      if (first) {
        set.push([first, null]);
      }
      const ranges = [];
      for (const [min, max] of set) {
        if (min === max) {
          ranges.push(min);
        } else if (!max && min === v[0]) {
          ranges.push("*");
        } else if (!max) {
          ranges.push(`>=${min}`);
        } else if (min === v[0]) {
          ranges.push(`<=${max}`);
        } else {
          ranges.push(`${min} - ${max}`);
        }
      }
      const simplified = ranges.join(" || ");
      const original = typeof range.raw === "string" ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range;
    };
  }
});

// node_modules/semver/ranges/subset.js
var require_subset = __commonJS({
  "node_modules/semver/ranges/subset.js"(exports2, module2) {
    var Range = require_range();
    var Comparator = require_comparator();
    var { ANY } = Comparator;
    var satisfies = require_satisfies();
    var compare = require_compare();
    var subset = (sub, dom, options2 = {}) => {
      if (sub === dom) {
        return true;
      }
      sub = new Range(sub, options2);
      dom = new Range(dom, options2);
      let sawNonNull = false;
      OUTER: for (const simpleSub of sub.set) {
        for (const simpleDom of dom.set) {
          const isSub = simpleSubset(simpleSub, simpleDom, options2);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub) {
            continue OUTER;
          }
        }
        if (sawNonNull) {
          return false;
        }
      }
      return true;
    };
    var minimumVersionWithPreRelease = [new Comparator(">=0.0.0-0")];
    var minimumVersion = [new Comparator(">=0.0.0")];
    var simpleSubset = (sub, dom, options2) => {
      if (sub === dom) {
        return true;
      }
      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY) {
          return true;
        } else if (options2.includePrerelease) {
          sub = minimumVersionWithPreRelease;
        } else {
          sub = minimumVersion;
        }
      }
      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options2.includePrerelease) {
          return true;
        } else {
          dom = minimumVersion;
        }
      }
      const eqSet = /* @__PURE__ */ new Set();
      let gt, lt;
      for (const c of sub) {
        if (c.operator === ">" || c.operator === ">=") {
          gt = higherGT(gt, c, options2);
        } else if (c.operator === "<" || c.operator === "<=") {
          lt = lowerLT(lt, c, options2);
        } else {
          eqSet.add(c.semver);
        }
      }
      if (eqSet.size > 1) {
        return null;
      }
      let gtltComp;
      if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options2);
        if (gtltComp > 0) {
          return null;
        } else if (gtltComp === 0 && (gt.operator !== ">=" || lt.operator !== "<=")) {
          return null;
        }
      }
      for (const eq of eqSet) {
        if (gt && !satisfies(eq, String(gt), options2)) {
          return null;
        }
        if (lt && !satisfies(eq, String(lt), options2)) {
          return null;
        }
        for (const c of dom) {
          if (!satisfies(eq, String(c), options2)) {
            return false;
          }
        }
        return true;
      }
      let higher, lower;
      let hasDomLT, hasDomGT;
      let needDomLTPre = lt && !options2.includePrerelease && lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt && !options2.includePrerelease && gt.semver.prerelease.length ? gt.semver : false;
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt.operator === "<" && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }
      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
        hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
        if (gt) {
          if (needDomGTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c.operator === ">" || c.operator === ">=") {
            higher = higherGT(gt, c, options2);
            if (higher === c && higher !== gt) {
              return false;
            }
          } else if (gt.operator === ">=" && !satisfies(gt.semver, String(c), options2)) {
            return false;
          }
        }
        if (lt) {
          if (needDomLTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c.operator === "<" || c.operator === "<=") {
            lower = lowerLT(lt, c, options2);
            if (lower === c && lower !== lt) {
              return false;
            }
          } else if (lt.operator === "<=" && !satisfies(lt.semver, String(c), options2)) {
            return false;
          }
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0) {
          return false;
        }
      }
      if (gt && hasDomLT && !lt && gtltComp !== 0) {
        return false;
      }
      if (lt && hasDomGT && !gt && gtltComp !== 0) {
        return false;
      }
      if (needDomGTPre || needDomLTPre) {
        return false;
      }
      return true;
    };
    var higherGT = (a, b, options2) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options2);
      return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
    };
    var lowerLT = (a, b, options2) => {
      if (!a) {
        return b;
      }
      const comp = compare(a.semver, b.semver, options2);
      return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
    };
    module2.exports = subset;
  }
});

// node_modules/semver/index.js
var require_semver2 = __commonJS({
  "node_modules/semver/index.js"(exports2, module2) {
    var internalRe = require_re();
    var constants = require_constants();
    var SemVer = require_semver();
    var identifiers = require_identifiers();
    var parse = require_parse();
    var valid = require_valid();
    var clean = require_clean();
    var inc = require_inc();
    var diff = require_diff();
    var major = require_major();
    var minor = require_minor();
    var patch = require_patch();
    var prerelease = require_prerelease();
    var compare = require_compare();
    var rcompare = require_rcompare();
    var compareLoose = require_compare_loose();
    var compareBuild = require_compare_build();
    var sort = require_sort();
    var rsort = require_rsort();
    var gt = require_gt();
    var lt = require_lt();
    var eq = require_eq();
    var neq = require_neq();
    var gte = require_gte();
    var lte = require_lte();
    var cmp = require_cmp();
    var coerce = require_coerce();
    var Comparator = require_comparator();
    var Range = require_range();
    var satisfies = require_satisfies();
    var toComparators = require_to_comparators();
    var maxSatisfying = require_max_satisfying();
    var minSatisfying = require_min_satisfying();
    var minVersion = require_min_version();
    var validRange = require_valid2();
    var outside = require_outside();
    var gtr = require_gtr();
    var ltr = require_ltr();
    var intersects = require_intersects();
    var simplifyRange = require_simplify();
    var subset = require_subset();
    module2.exports = {
      parse,
      valid,
      clean,
      inc,
      diff,
      major,
      minor,
      patch,
      prerelease,
      compare,
      rcompare,
      compareLoose,
      compareBuild,
      sort,
      rsort,
      gt,
      lt,
      eq,
      neq,
      gte,
      lte,
      cmp,
      coerce,
      Comparator,
      Range,
      satisfies,
      toComparators,
      maxSatisfying,
      minSatisfying,
      minVersion,
      validRange,
      outside,
      gtr,
      ltr,
      intersects,
      simplifyRange,
      subset,
      SemVer,
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,
      RELEASE_TYPES: constants.RELEASE_TYPES,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers
    };
  }
});

// node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js
var require_asymmetricKeyDetailsSupported = __commonJS({
  "node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js"(exports2, module2) {
    var semver = require_semver2();
    module2.exports = semver.satisfies(process.version, ">=15.7.0");
  }
});

// node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js
var require_rsaPssKeyDetailsSupported = __commonJS({
  "node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js"(exports2, module2) {
    var semver = require_semver2();
    module2.exports = semver.satisfies(process.version, ">=16.9.0");
  }
});

// node_modules/jsonwebtoken/lib/validateAsymmetricKey.js
var require_validateAsymmetricKey = __commonJS({
  "node_modules/jsonwebtoken/lib/validateAsymmetricKey.js"(exports2, module2) {
    var ASYMMETRIC_KEY_DETAILS_SUPPORTED = require_asymmetricKeyDetailsSupported();
    var RSA_PSS_KEY_DETAILS_SUPPORTED = require_rsaPssKeyDetailsSupported();
    var allowedAlgorithmsForKeys = {
      "ec": ["ES256", "ES384", "ES512"],
      "rsa": ["RS256", "PS256", "RS384", "PS384", "RS512", "PS512"],
      "rsa-pss": ["PS256", "PS384", "PS512"]
    };
    var allowedCurves = {
      ES256: "prime256v1",
      ES384: "secp384r1",
      ES512: "secp521r1"
    };
    module2.exports = function(algorithm, key) {
      if (!algorithm || !key) return;
      const keyType = key.asymmetricKeyType;
      if (!keyType) return;
      const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];
      if (!allowedAlgorithms) {
        throw new Error(`Unknown key type "${keyType}".`);
      }
      if (!allowedAlgorithms.includes(algorithm)) {
        throw new Error(`"alg" parameter for "${keyType}" key type must be one of: ${allowedAlgorithms.join(", ")}.`);
      }
      if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {
        switch (keyType) {
          case "ec":
            const keyCurve = key.asymmetricKeyDetails.namedCurve;
            const allowedCurve = allowedCurves[algorithm];
            if (keyCurve !== allowedCurve) {
              throw new Error(`"alg" parameter "${algorithm}" requires curve "${allowedCurve}".`);
            }
            break;
          case "rsa-pss":
            if (RSA_PSS_KEY_DETAILS_SUPPORTED) {
              const length = parseInt(algorithm.slice(-3), 10);
              const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key.asymmetricKeyDetails;
              if (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm) {
                throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of "alg" ${algorithm}.`);
              }
              if (saltLength !== void 0 && saltLength > length >> 3) {
                throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of "alg" ${algorithm}.`);
              }
            }
            break;
        }
      }
    };
  }
});

// node_modules/jsonwebtoken/lib/psSupported.js
var require_psSupported = __commonJS({
  "node_modules/jsonwebtoken/lib/psSupported.js"(exports2, module2) {
    var semver = require_semver2();
    module2.exports = semver.satisfies(process.version, "^6.12.0 || >=8.0.0");
  }
});

// node_modules/jsonwebtoken/verify.js
var require_verify = __commonJS({
  "node_modules/jsonwebtoken/verify.js"(exports2, module2) {
    var JsonWebTokenError = require_JsonWebTokenError();
    var NotBeforeError = require_NotBeforeError();
    var TokenExpiredError = require_TokenExpiredError();
    var decode = require_decode();
    var timespan = require_timespan();
    var validateAsymmetricKey = require_validateAsymmetricKey();
    var PS_SUPPORTED = require_psSupported();
    var jws = require_jws();
    var { KeyObject, createSecretKey, createPublicKey } = require("crypto");
    var PUB_KEY_ALGS = ["RS256", "RS384", "RS512"];
    var EC_KEY_ALGS = ["ES256", "ES384", "ES512"];
    var RSA_KEY_ALGS = ["RS256", "RS384", "RS512"];
    var HS_ALGS = ["HS256", "HS384", "HS512"];
    if (PS_SUPPORTED) {
      PUB_KEY_ALGS.splice(PUB_KEY_ALGS.length, 0, "PS256", "PS384", "PS512");
      RSA_KEY_ALGS.splice(RSA_KEY_ALGS.length, 0, "PS256", "PS384", "PS512");
    }
    module2.exports = function(jwtString, secretOrPublicKey, options2, callback) {
      if (typeof options2 === "function" && !callback) {
        callback = options2;
        options2 = {};
      }
      if (!options2) {
        options2 = {};
      }
      options2 = Object.assign({}, options2);
      let done;
      if (callback) {
        done = callback;
      } else {
        done = function(err, data) {
          if (err) throw err;
          return data;
        };
      }
      if (options2.clockTimestamp && typeof options2.clockTimestamp !== "number") {
        return done(new JsonWebTokenError("clockTimestamp must be a number"));
      }
      if (options2.nonce !== void 0 && (typeof options2.nonce !== "string" || options2.nonce.trim() === "")) {
        return done(new JsonWebTokenError("nonce must be a non-empty string"));
      }
      if (options2.allowInvalidAsymmetricKeyTypes !== void 0 && typeof options2.allowInvalidAsymmetricKeyTypes !== "boolean") {
        return done(new JsonWebTokenError("allowInvalidAsymmetricKeyTypes must be a boolean"));
      }
      const clockTimestamp = options2.clockTimestamp || Math.floor(Date.now() / 1e3);
      if (!jwtString) {
        return done(new JsonWebTokenError("jwt must be provided"));
      }
      if (typeof jwtString !== "string") {
        return done(new JsonWebTokenError("jwt must be a string"));
      }
      const parts = jwtString.split(".");
      if (parts.length !== 3) {
        return done(new JsonWebTokenError("jwt malformed"));
      }
      let decodedToken;
      try {
        decodedToken = decode(jwtString, { complete: true });
      } catch (err) {
        return done(err);
      }
      if (!decodedToken) {
        return done(new JsonWebTokenError("invalid token"));
      }
      const header = decodedToken.header;
      let getSecret;
      if (typeof secretOrPublicKey === "function") {
        if (!callback) {
          return done(new JsonWebTokenError("verify must be called asynchronous if secret or public key is provided as a callback"));
        }
        getSecret = secretOrPublicKey;
      } else {
        getSecret = function(header2, secretCallback) {
          return secretCallback(null, secretOrPublicKey);
        };
      }
      return getSecret(header, function(err, secretOrPublicKey2) {
        if (err) {
          return done(new JsonWebTokenError("error in secret or public key callback: " + err.message));
        }
        const hasSignature = parts[2].trim() !== "";
        if (!hasSignature && secretOrPublicKey2) {
          return done(new JsonWebTokenError("jwt signature is required"));
        }
        if (hasSignature && !secretOrPublicKey2) {
          return done(new JsonWebTokenError("secret or public key must be provided"));
        }
        if (!hasSignature && !options2.algorithms) {
          return done(new JsonWebTokenError('please specify "none" in "algorithms" to verify unsigned tokens'));
        }
        if (secretOrPublicKey2 != null && !(secretOrPublicKey2 instanceof KeyObject)) {
          try {
            secretOrPublicKey2 = createPublicKey(secretOrPublicKey2);
          } catch (_) {
            try {
              secretOrPublicKey2 = createSecretKey(typeof secretOrPublicKey2 === "string" ? Buffer.from(secretOrPublicKey2) : secretOrPublicKey2);
            } catch (_2) {
              return done(new JsonWebTokenError("secretOrPublicKey is not valid key material"));
            }
          }
        }
        if (!options2.algorithms) {
          if (secretOrPublicKey2.type === "secret") {
            options2.algorithms = HS_ALGS;
          } else if (["rsa", "rsa-pss"].includes(secretOrPublicKey2.asymmetricKeyType)) {
            options2.algorithms = RSA_KEY_ALGS;
          } else if (secretOrPublicKey2.asymmetricKeyType === "ec") {
            options2.algorithms = EC_KEY_ALGS;
          } else {
            options2.algorithms = PUB_KEY_ALGS;
          }
        }
        if (options2.algorithms.indexOf(decodedToken.header.alg) === -1) {
          return done(new JsonWebTokenError("invalid algorithm"));
        }
        if (header.alg.startsWith("HS") && secretOrPublicKey2.type !== "secret") {
          return done(new JsonWebTokenError(`secretOrPublicKey must be a symmetric key when using ${header.alg}`));
        } else if (/^(?:RS|PS|ES)/.test(header.alg) && secretOrPublicKey2.type !== "public") {
          return done(new JsonWebTokenError(`secretOrPublicKey must be an asymmetric key when using ${header.alg}`));
        }
        if (!options2.allowInvalidAsymmetricKeyTypes) {
          try {
            validateAsymmetricKey(header.alg, secretOrPublicKey2);
          } catch (e) {
            return done(e);
          }
        }
        let valid;
        try {
          valid = jws.verify(jwtString, decodedToken.header.alg, secretOrPublicKey2);
        } catch (e) {
          return done(e);
        }
        if (!valid) {
          return done(new JsonWebTokenError("invalid signature"));
        }
        const payload = decodedToken.payload;
        if (typeof payload.nbf !== "undefined" && !options2.ignoreNotBefore) {
          if (typeof payload.nbf !== "number") {
            return done(new JsonWebTokenError("invalid nbf value"));
          }
          if (payload.nbf > clockTimestamp + (options2.clockTolerance || 0)) {
            return done(new NotBeforeError("jwt not active", new Date(payload.nbf * 1e3)));
          }
        }
        if (typeof payload.exp !== "undefined" && !options2.ignoreExpiration) {
          if (typeof payload.exp !== "number") {
            return done(new JsonWebTokenError("invalid exp value"));
          }
          if (clockTimestamp >= payload.exp + (options2.clockTolerance || 0)) {
            return done(new TokenExpiredError("jwt expired", new Date(payload.exp * 1e3)));
          }
        }
        if (options2.audience) {
          const audiences = Array.isArray(options2.audience) ? options2.audience : [options2.audience];
          const target = Array.isArray(payload.aud) ? payload.aud : [payload.aud];
          const match = target.some(function(targetAudience) {
            return audiences.some(function(audience) {
              return audience instanceof RegExp ? audience.test(targetAudience) : audience === targetAudience;
            });
          });
          if (!match) {
            return done(new JsonWebTokenError("jwt audience invalid. expected: " + audiences.join(" or ")));
          }
        }
        if (options2.issuer) {
          const invalid_issuer = typeof options2.issuer === "string" && payload.iss !== options2.issuer || Array.isArray(options2.issuer) && options2.issuer.indexOf(payload.iss) === -1;
          if (invalid_issuer) {
            return done(new JsonWebTokenError("jwt issuer invalid. expected: " + options2.issuer));
          }
        }
        if (options2.subject) {
          if (payload.sub !== options2.subject) {
            return done(new JsonWebTokenError("jwt subject invalid. expected: " + options2.subject));
          }
        }
        if (options2.jwtid) {
          if (payload.jti !== options2.jwtid) {
            return done(new JsonWebTokenError("jwt jwtid invalid. expected: " + options2.jwtid));
          }
        }
        if (options2.nonce) {
          if (payload.nonce !== options2.nonce) {
            return done(new JsonWebTokenError("jwt nonce invalid. expected: " + options2.nonce));
          }
        }
        if (options2.maxAge) {
          if (typeof payload.iat !== "number") {
            return done(new JsonWebTokenError("iat required when maxAge is specified"));
          }
          const maxAgeTimestamp = timespan(options2.maxAge, payload.iat);
          if (typeof maxAgeTimestamp === "undefined") {
            return done(new JsonWebTokenError('"maxAge" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
          }
          if (clockTimestamp >= maxAgeTimestamp + (options2.clockTolerance || 0)) {
            return done(new TokenExpiredError("maxAge exceeded", new Date(maxAgeTimestamp * 1e3)));
          }
        }
        if (options2.complete === true) {
          const signature = decodedToken.signature;
          return done(null, {
            header,
            payload,
            signature
          });
        }
        return done(null, payload);
      });
    };
  }
});

// node_modules/lodash.includes/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.includes/index.js"(exports2, module2) {
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var MAX_INTEGER = 17976931348623157e292;
    var NAN = 0 / 0;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var freeParseInt = parseInt;
    function arrayMap(array, iteratee) {
      var index = -1, length = array ? array.length : 0, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeKeys = overArg(Object.keys, Object);
    var nativeMax = Math.max;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isString(value) {
      return typeof value == "string" || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function values(object) {
      return object ? baseValues(object, keys(object)) : [];
    }
    module2.exports = includes;
  }
});

// node_modules/lodash.isboolean/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.isboolean/index.js"(exports2, module2) {
    var boolTag = "[object Boolean]";
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function isBoolean(value) {
      return value === true || value === false || isObjectLike(value) && objectToString.call(value) == boolTag;
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    module2.exports = isBoolean;
  }
});

// node_modules/lodash.isinteger/index.js
var require_lodash3 = __commonJS({
  "node_modules/lodash.isinteger/index.js"(exports2, module2) {
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function isInteger(value) {
      return typeof value == "number" && value == toInteger(value);
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module2.exports = isInteger;
  }
});

// node_modules/lodash.isnumber/index.js
var require_lodash4 = __commonJS({
  "node_modules/lodash.isnumber/index.js"(exports2, module2) {
    var numberTag = "[object Number]";
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isNumber(value) {
      return typeof value == "number" || isObjectLike(value) && objectToString.call(value) == numberTag;
    }
    module2.exports = isNumber;
  }
});

// node_modules/lodash.isplainobject/index.js
var require_lodash5 = __commonJS({
  "node_modules/lodash.isplainobject/index.js"(exports2, module2) {
    var objectTag = "[object Object]";
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    var objectToString = objectProto.toString;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module2.exports = isPlainObject;
  }
});

// node_modules/lodash.isstring/index.js
var require_lodash6 = __commonJS({
  "node_modules/lodash.isstring/index.js"(exports2, module2) {
    var stringTag = "[object String]";
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var isArray = Array.isArray;
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isString(value) {
      return typeof value == "string" || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
    }
    module2.exports = isString;
  }
});

// node_modules/lodash.once/index.js
var require_lodash7 = __commonJS({
  "node_modules/lodash.once/index.js"(exports2, module2) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var INFINITY = 1 / 0;
    var MAX_INTEGER = 17976931348623157e292;
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    function before(n, func) {
      var result;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = void 0;
        }
        return result;
      };
    }
    function once(func) {
      return before(2, func);
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = value < 0 ? -1 : 1;
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }
    function toInteger(value) {
      var result = toFinite(value), remainder = result % 1;
      return result === result ? remainder ? result - remainder : result : 0;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module2.exports = once;
  }
});

// node_modules/jsonwebtoken/sign.js
var require_sign = __commonJS({
  "node_modules/jsonwebtoken/sign.js"(exports2, module2) {
    var timespan = require_timespan();
    var PS_SUPPORTED = require_psSupported();
    var validateAsymmetricKey = require_validateAsymmetricKey();
    var jws = require_jws();
    var includes = require_lodash();
    var isBoolean = require_lodash2();
    var isInteger = require_lodash3();
    var isNumber = require_lodash4();
    var isPlainObject = require_lodash5();
    var isString = require_lodash6();
    var once = require_lodash7();
    var { KeyObject, createSecretKey, createPrivateKey } = require("crypto");
    var SUPPORTED_ALGS = ["RS256", "RS384", "RS512", "ES256", "ES384", "ES512", "HS256", "HS384", "HS512", "none"];
    if (PS_SUPPORTED) {
      SUPPORTED_ALGS.splice(3, 0, "PS256", "PS384", "PS512");
    }
    var sign_options_schema = {
      expiresIn: { isValid: function(value) {
        return isInteger(value) || isString(value) && value;
      }, message: '"expiresIn" should be a number of seconds or string representing a timespan' },
      notBefore: { isValid: function(value) {
        return isInteger(value) || isString(value) && value;
      }, message: '"notBefore" should be a number of seconds or string representing a timespan' },
      audience: { isValid: function(value) {
        return isString(value) || Array.isArray(value);
      }, message: '"audience" must be a string or array' },
      algorithm: { isValid: includes.bind(null, SUPPORTED_ALGS), message: '"algorithm" must be a valid string enum value' },
      header: { isValid: isPlainObject, message: '"header" must be an object' },
      encoding: { isValid: isString, message: '"encoding" must be a string' },
      issuer: { isValid: isString, message: '"issuer" must be a string' },
      subject: { isValid: isString, message: '"subject" must be a string' },
      jwtid: { isValid: isString, message: '"jwtid" must be a string' },
      noTimestamp: { isValid: isBoolean, message: '"noTimestamp" must be a boolean' },
      keyid: { isValid: isString, message: '"keyid" must be a string' },
      mutatePayload: { isValid: isBoolean, message: '"mutatePayload" must be a boolean' },
      allowInsecureKeySizes: { isValid: isBoolean, message: '"allowInsecureKeySizes" must be a boolean' },
      allowInvalidAsymmetricKeyTypes: { isValid: isBoolean, message: '"allowInvalidAsymmetricKeyTypes" must be a boolean' }
    };
    var registered_claims_schema = {
      iat: { isValid: isNumber, message: '"iat" should be a number of seconds' },
      exp: { isValid: isNumber, message: '"exp" should be a number of seconds' },
      nbf: { isValid: isNumber, message: '"nbf" should be a number of seconds' }
    };
    function validate(schema, allowUnknown, object, parameterName) {
      if (!isPlainObject(object)) {
        throw new Error('Expected "' + parameterName + '" to be a plain object.');
      }
      Object.keys(object).forEach(function(key) {
        const validator = schema[key];
        if (!validator) {
          if (!allowUnknown) {
            throw new Error('"' + key + '" is not allowed in "' + parameterName + '"');
          }
          return;
        }
        if (!validator.isValid(object[key])) {
          throw new Error(validator.message);
        }
      });
    }
    function validateOptions(options2) {
      return validate(sign_options_schema, false, options2, "options");
    }
    function validatePayload(payload) {
      return validate(registered_claims_schema, true, payload, "payload");
    }
    var options_to_payload = {
      "audience": "aud",
      "issuer": "iss",
      "subject": "sub",
      "jwtid": "jti"
    };
    var options_for_objects = [
      "expiresIn",
      "notBefore",
      "noTimestamp",
      "audience",
      "issuer",
      "subject",
      "jwtid"
    ];
    module2.exports = function(payload, secretOrPrivateKey, options2, callback) {
      if (typeof options2 === "function") {
        callback = options2;
        options2 = {};
      } else {
        options2 = options2 || {};
      }
      const isObjectPayload = typeof payload === "object" && !Buffer.isBuffer(payload);
      const header = Object.assign({
        alg: options2.algorithm || "HS256",
        typ: isObjectPayload ? "JWT" : void 0,
        kid: options2.keyid
      }, options2.header);
      function failure(err) {
        if (callback) {
          return callback(err);
        }
        throw err;
      }
      if (!secretOrPrivateKey && options2.algorithm !== "none") {
        return failure(new Error("secretOrPrivateKey must have a value"));
      }
      if (secretOrPrivateKey != null && !(secretOrPrivateKey instanceof KeyObject)) {
        try {
          secretOrPrivateKey = createPrivateKey(secretOrPrivateKey);
        } catch (_) {
          try {
            secretOrPrivateKey = createSecretKey(typeof secretOrPrivateKey === "string" ? Buffer.from(secretOrPrivateKey) : secretOrPrivateKey);
          } catch (_2) {
            return failure(new Error("secretOrPrivateKey is not valid key material"));
          }
        }
      }
      if (header.alg.startsWith("HS") && secretOrPrivateKey.type !== "secret") {
        return failure(new Error(`secretOrPrivateKey must be a symmetric key when using ${header.alg}`));
      } else if (/^(?:RS|PS|ES)/.test(header.alg)) {
        if (secretOrPrivateKey.type !== "private") {
          return failure(new Error(`secretOrPrivateKey must be an asymmetric key when using ${header.alg}`));
        }
        if (!options2.allowInsecureKeySizes && !header.alg.startsWith("ES") && secretOrPrivateKey.asymmetricKeyDetails !== void 0 && //KeyObject.asymmetricKeyDetails is supported in Node 15+
        secretOrPrivateKey.asymmetricKeyDetails.modulusLength < 2048) {
          return failure(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`));
        }
      }
      if (typeof payload === "undefined") {
        return failure(new Error("payload is required"));
      } else if (isObjectPayload) {
        try {
          validatePayload(payload);
        } catch (error) {
          return failure(error);
        }
        if (!options2.mutatePayload) {
          payload = Object.assign({}, payload);
        }
      } else {
        const invalid_options = options_for_objects.filter(function(opt) {
          return typeof options2[opt] !== "undefined";
        });
        if (invalid_options.length > 0) {
          return failure(new Error("invalid " + invalid_options.join(",") + " option for " + typeof payload + " payload"));
        }
      }
      if (typeof payload.exp !== "undefined" && typeof options2.expiresIn !== "undefined") {
        return failure(new Error('Bad "options.expiresIn" option the payload already has an "exp" property.'));
      }
      if (typeof payload.nbf !== "undefined" && typeof options2.notBefore !== "undefined") {
        return failure(new Error('Bad "options.notBefore" option the payload already has an "nbf" property.'));
      }
      try {
        validateOptions(options2);
      } catch (error) {
        return failure(error);
      }
      if (!options2.allowInvalidAsymmetricKeyTypes) {
        try {
          validateAsymmetricKey(header.alg, secretOrPrivateKey);
        } catch (error) {
          return failure(error);
        }
      }
      const timestamp = payload.iat || Math.floor(Date.now() / 1e3);
      if (options2.noTimestamp) {
        delete payload.iat;
      } else if (isObjectPayload) {
        payload.iat = timestamp;
      }
      if (typeof options2.notBefore !== "undefined") {
        try {
          payload.nbf = timespan(options2.notBefore, timestamp);
        } catch (err) {
          return failure(err);
        }
        if (typeof payload.nbf === "undefined") {
          return failure(new Error('"notBefore" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
        }
      }
      if (typeof options2.expiresIn !== "undefined" && typeof payload === "object") {
        try {
          payload.exp = timespan(options2.expiresIn, timestamp);
        } catch (err) {
          return failure(err);
        }
        if (typeof payload.exp === "undefined") {
          return failure(new Error('"expiresIn" should be a number of seconds or string representing a timespan eg: "1d", "20h", 60'));
        }
      }
      Object.keys(options_to_payload).forEach(function(key) {
        const claim = options_to_payload[key];
        if (typeof options2[key] !== "undefined") {
          if (typeof payload[claim] !== "undefined") {
            return failure(new Error('Bad "options.' + key + '" option. The payload already has an "' + claim + '" property.'));
          }
          payload[claim] = options2[key];
        }
      });
      const encoding = options2.encoding || "utf8";
      if (typeof callback === "function") {
        callback = callback && once(callback);
        jws.createSign({
          header,
          privateKey: secretOrPrivateKey,
          payload,
          encoding
        }).once("error", callback).once("done", function(signature) {
          if (!options2.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {
            return callback(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`));
          }
          callback(null, signature);
        });
      } else {
        let signature = jws.sign({ header, payload, secret: secretOrPrivateKey, encoding });
        if (!options2.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {
          throw new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`);
        }
        return signature;
      }
    };
  }
});

// node_modules/jsonwebtoken/index.js
var require_jsonwebtoken = __commonJS({
  "node_modules/jsonwebtoken/index.js"(exports2, module2) {
    module2.exports = {
      decode: require_decode(),
      verify: require_verify(),
      sign: require_sign(),
      JsonWebTokenError: require_JsonWebTokenError(),
      NotBeforeError: require_NotBeforeError(),
      TokenExpiredError: require_TokenExpiredError()
    };
  }
});

// node_modules/bcryptjs/dist/bcrypt.js
var require_bcrypt = __commonJS({
  "node_modules/bcryptjs/dist/bcrypt.js"(exports2, module2) {
    (function(global, factory) {
      if (typeof define === "function" && define["amd"])
        define([], factory);
      else if (typeof require === "function" && typeof module2 === "object" && module2 && module2["exports"])
        module2["exports"] = factory();
      else
        (global["dcodeIO"] = global["dcodeIO"] || {})["bcrypt"] = factory();
    })(exports2, function() {
      "use strict";
      var bcrypt2 = {};
      var randomFallback = null;
      function random(len) {
        if (typeof module2 !== "undefined" && module2 && module2["exports"])
          try {
            return require("crypto")["randomBytes"](len);
          } catch (e) {
          }
        try {
          var a;
          (self["crypto"] || self["msCrypto"])["getRandomValues"](a = new Uint32Array(len));
          return Array.prototype.slice.call(a);
        } catch (e) {
        }
        if (!randomFallback)
          throw Error("Neither WebCryptoAPI nor a crypto module is available. Use bcrypt.setRandomFallback to set an alternative");
        return randomFallback(len);
      }
      var randomAvailable = false;
      try {
        random(1);
        randomAvailable = true;
      } catch (e) {
      }
      randomFallback = null;
      bcrypt2.setRandomFallback = function(random2) {
        randomFallback = random2;
      };
      bcrypt2.genSaltSync = function(rounds, seed_length) {
        rounds = rounds || GENSALT_DEFAULT_LOG2_ROUNDS;
        if (typeof rounds !== "number")
          throw Error("Illegal arguments: " + typeof rounds + ", " + typeof seed_length);
        if (rounds < 4)
          rounds = 4;
        else if (rounds > 31)
          rounds = 31;
        var salt = [];
        salt.push("$2a$");
        if (rounds < 10)
          salt.push("0");
        salt.push(rounds.toString());
        salt.push("$");
        salt.push(base64_encode(random(BCRYPT_SALT_LEN), BCRYPT_SALT_LEN));
        return salt.join("");
      };
      bcrypt2.genSalt = function(rounds, seed_length, callback) {
        if (typeof seed_length === "function")
          callback = seed_length, seed_length = void 0;
        if (typeof rounds === "function")
          callback = rounds, rounds = void 0;
        if (typeof rounds === "undefined")
          rounds = GENSALT_DEFAULT_LOG2_ROUNDS;
        else if (typeof rounds !== "number")
          throw Error("illegal arguments: " + typeof rounds);
        function _async(callback2) {
          nextTick(function() {
            try {
              callback2(null, bcrypt2.genSaltSync(rounds));
            } catch (err) {
              callback2(err);
            }
          });
        }
        if (callback) {
          if (typeof callback !== "function")
            throw Error("Illegal callback: " + typeof callback);
          _async(callback);
        } else
          return new Promise(function(resolve, reject) {
            _async(function(err, res) {
              if (err) {
                reject(err);
                return;
              }
              resolve(res);
            });
          });
      };
      bcrypt2.hashSync = function(s, salt) {
        if (typeof salt === "undefined")
          salt = GENSALT_DEFAULT_LOG2_ROUNDS;
        if (typeof salt === "number")
          salt = bcrypt2.genSaltSync(salt);
        if (typeof s !== "string" || typeof salt !== "string")
          throw Error("Illegal arguments: " + typeof s + ", " + typeof salt);
        return _hash(s, salt);
      };
      bcrypt2.hash = function(s, salt, callback, progressCallback) {
        function _async(callback2) {
          if (typeof s === "string" && typeof salt === "number")
            bcrypt2.genSalt(salt, function(err, salt2) {
              _hash(s, salt2, callback2, progressCallback);
            });
          else if (typeof s === "string" && typeof salt === "string")
            _hash(s, salt, callback2, progressCallback);
          else
            nextTick(callback2.bind(this, Error("Illegal arguments: " + typeof s + ", " + typeof salt)));
        }
        if (callback) {
          if (typeof callback !== "function")
            throw Error("Illegal callback: " + typeof callback);
          _async(callback);
        } else
          return new Promise(function(resolve, reject) {
            _async(function(err, res) {
              if (err) {
                reject(err);
                return;
              }
              resolve(res);
            });
          });
      };
      function safeStringCompare(known, unknown) {
        var right = 0, wrong = 0;
        for (var i = 0, k = known.length; i < k; ++i) {
          if (known.charCodeAt(i) === unknown.charCodeAt(i))
            ++right;
          else
            ++wrong;
        }
        if (right < 0)
          return false;
        return wrong === 0;
      }
      bcrypt2.compareSync = function(s, hash) {
        if (typeof s !== "string" || typeof hash !== "string")
          throw Error("Illegal arguments: " + typeof s + ", " + typeof hash);
        if (hash.length !== 60)
          return false;
        return safeStringCompare(bcrypt2.hashSync(s, hash.substr(0, hash.length - 31)), hash);
      };
      bcrypt2.compare = function(s, hash, callback, progressCallback) {
        function _async(callback2) {
          if (typeof s !== "string" || typeof hash !== "string") {
            nextTick(callback2.bind(this, Error("Illegal arguments: " + typeof s + ", " + typeof hash)));
            return;
          }
          if (hash.length !== 60) {
            nextTick(callback2.bind(this, null, false));
            return;
          }
          bcrypt2.hash(s, hash.substr(0, 29), function(err, comp) {
            if (err)
              callback2(err);
            else
              callback2(null, safeStringCompare(comp, hash));
          }, progressCallback);
        }
        if (callback) {
          if (typeof callback !== "function")
            throw Error("Illegal callback: " + typeof callback);
          _async(callback);
        } else
          return new Promise(function(resolve, reject) {
            _async(function(err, res) {
              if (err) {
                reject(err);
                return;
              }
              resolve(res);
            });
          });
      };
      bcrypt2.getRounds = function(hash) {
        if (typeof hash !== "string")
          throw Error("Illegal arguments: " + typeof hash);
        return parseInt(hash.split("$")[2], 10);
      };
      bcrypt2.getSalt = function(hash) {
        if (typeof hash !== "string")
          throw Error("Illegal arguments: " + typeof hash);
        if (hash.length !== 60)
          throw Error("Illegal hash length: " + hash.length + " != 60");
        return hash.substring(0, 29);
      };
      var nextTick = typeof process !== "undefined" && process && typeof process.nextTick === "function" ? typeof setImmediate === "function" ? setImmediate : process.nextTick : setTimeout;
      function stringToBytes(str) {
        var out = [], i = 0;
        utfx.encodeUTF16toUTF8(function() {
          if (i >= str.length) return null;
          return str.charCodeAt(i++);
        }, function(b) {
          out.push(b);
        });
        return out;
      }
      var BASE64_CODE = "./ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split("");
      var BASE64_INDEX = [
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        0,
        1,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        -1,
        -1,
        -1,
        -1,
        -1,
        -1,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        -1,
        -1,
        -1,
        -1,
        -1
      ];
      var stringFromCharCode = String.fromCharCode;
      function base64_encode(b, len) {
        var off = 0, rs = [], c1, c2;
        if (len <= 0 || len > b.length)
          throw Error("Illegal len: " + len);
        while (off < len) {
          c1 = b[off++] & 255;
          rs.push(BASE64_CODE[c1 >> 2 & 63]);
          c1 = (c1 & 3) << 4;
          if (off >= len) {
            rs.push(BASE64_CODE[c1 & 63]);
            break;
          }
          c2 = b[off++] & 255;
          c1 |= c2 >> 4 & 15;
          rs.push(BASE64_CODE[c1 & 63]);
          c1 = (c2 & 15) << 2;
          if (off >= len) {
            rs.push(BASE64_CODE[c1 & 63]);
            break;
          }
          c2 = b[off++] & 255;
          c1 |= c2 >> 6 & 3;
          rs.push(BASE64_CODE[c1 & 63]);
          rs.push(BASE64_CODE[c2 & 63]);
        }
        return rs.join("");
      }
      function base64_decode(s, len) {
        var off = 0, slen = s.length, olen = 0, rs = [], c1, c2, c3, c4, o, code;
        if (len <= 0)
          throw Error("Illegal len: " + len);
        while (off < slen - 1 && olen < len) {
          code = s.charCodeAt(off++);
          c1 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
          code = s.charCodeAt(off++);
          c2 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
          if (c1 == -1 || c2 == -1)
            break;
          o = c1 << 2 >>> 0;
          o |= (c2 & 48) >> 4;
          rs.push(stringFromCharCode(o));
          if (++olen >= len || off >= slen)
            break;
          code = s.charCodeAt(off++);
          c3 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
          if (c3 == -1)
            break;
          o = (c2 & 15) << 4 >>> 0;
          o |= (c3 & 60) >> 2;
          rs.push(stringFromCharCode(o));
          if (++olen >= len || off >= slen)
            break;
          code = s.charCodeAt(off++);
          c4 = code < BASE64_INDEX.length ? BASE64_INDEX[code] : -1;
          o = (c3 & 3) << 6 >>> 0;
          o |= c4;
          rs.push(stringFromCharCode(o));
          ++olen;
        }
        var res = [];
        for (off = 0; off < olen; off++)
          res.push(rs[off].charCodeAt(0));
        return res;
      }
      var utfx = function() {
        "use strict";
        var utfx2 = {};
        utfx2.MAX_CODEPOINT = 1114111;
        utfx2.encodeUTF8 = function(src, dst) {
          var cp = null;
          if (typeof src === "number")
            cp = src, src = function() {
              return null;
            };
          while (cp !== null || (cp = src()) !== null) {
            if (cp < 128)
              dst(cp & 127);
            else if (cp < 2048)
              dst(cp >> 6 & 31 | 192), dst(cp & 63 | 128);
            else if (cp < 65536)
              dst(cp >> 12 & 15 | 224), dst(cp >> 6 & 63 | 128), dst(cp & 63 | 128);
            else
              dst(cp >> 18 & 7 | 240), dst(cp >> 12 & 63 | 128), dst(cp >> 6 & 63 | 128), dst(cp & 63 | 128);
            cp = null;
          }
        };
        utfx2.decodeUTF8 = function(src, dst) {
          var a, b, c, d, fail = function(b2) {
            b2 = b2.slice(0, b2.indexOf(null));
            var err = Error(b2.toString());
            err.name = "TruncatedError";
            err["bytes"] = b2;
            throw err;
          };
          while ((a = src()) !== null) {
            if ((a & 128) === 0)
              dst(a);
            else if ((a & 224) === 192)
              (b = src()) === null && fail([a, b]), dst((a & 31) << 6 | b & 63);
            else if ((a & 240) === 224)
              ((b = src()) === null || (c = src()) === null) && fail([a, b, c]), dst((a & 15) << 12 | (b & 63) << 6 | c & 63);
            else if ((a & 248) === 240)
              ((b = src()) === null || (c = src()) === null || (d = src()) === null) && fail([a, b, c, d]), dst((a & 7) << 18 | (b & 63) << 12 | (c & 63) << 6 | d & 63);
            else throw RangeError("Illegal starting byte: " + a);
          }
        };
        utfx2.UTF16toUTF8 = function(src, dst) {
          var c1, c2 = null;
          while (true) {
            if ((c1 = c2 !== null ? c2 : src()) === null)
              break;
            if (c1 >= 55296 && c1 <= 57343) {
              if ((c2 = src()) !== null) {
                if (c2 >= 56320 && c2 <= 57343) {
                  dst((c1 - 55296) * 1024 + c2 - 56320 + 65536);
                  c2 = null;
                  continue;
                }
              }
            }
            dst(c1);
          }
          if (c2 !== null) dst(c2);
        };
        utfx2.UTF8toUTF16 = function(src, dst) {
          var cp = null;
          if (typeof src === "number")
            cp = src, src = function() {
              return null;
            };
          while (cp !== null || (cp = src()) !== null) {
            if (cp <= 65535)
              dst(cp);
            else
              cp -= 65536, dst((cp >> 10) + 55296), dst(cp % 1024 + 56320);
            cp = null;
          }
        };
        utfx2.encodeUTF16toUTF8 = function(src, dst) {
          utfx2.UTF16toUTF8(src, function(cp) {
            utfx2.encodeUTF8(cp, dst);
          });
        };
        utfx2.decodeUTF8toUTF16 = function(src, dst) {
          utfx2.decodeUTF8(src, function(cp) {
            utfx2.UTF8toUTF16(cp, dst);
          });
        };
        utfx2.calculateCodePoint = function(cp) {
          return cp < 128 ? 1 : cp < 2048 ? 2 : cp < 65536 ? 3 : 4;
        };
        utfx2.calculateUTF8 = function(src) {
          var cp, l = 0;
          while ((cp = src()) !== null)
            l += utfx2.calculateCodePoint(cp);
          return l;
        };
        utfx2.calculateUTF16asUTF8 = function(src) {
          var n = 0, l = 0;
          utfx2.UTF16toUTF8(src, function(cp) {
            ++n;
            l += utfx2.calculateCodePoint(cp);
          });
          return [n, l];
        };
        return utfx2;
      }();
      Date.now = Date.now || function() {
        return +/* @__PURE__ */ new Date();
      };
      var BCRYPT_SALT_LEN = 16;
      var GENSALT_DEFAULT_LOG2_ROUNDS = 10;
      var BLOWFISH_NUM_ROUNDS = 16;
      var MAX_EXECUTION_TIME = 100;
      var P_ORIG = [
        608135816,
        2242054355,
        320440878,
        57701188,
        2752067618,
        698298832,
        137296536,
        3964562569,
        1160258022,
        953160567,
        3193202383,
        887688300,
        3232508343,
        3380367581,
        1065670069,
        3041331479,
        2450970073,
        2306472731
      ];
      var S_ORIG = [
        3509652390,
        2564797868,
        805139163,
        3491422135,
        3101798381,
        1780907670,
        3128725573,
        4046225305,
        614570311,
        3012652279,
        134345442,
        2240740374,
        1667834072,
        1901547113,
        2757295779,
        4103290238,
        227898511,
        1921955416,
        1904987480,
        2182433518,
        2069144605,
        3260701109,
        2620446009,
        720527379,
        3318853667,
        677414384,
        3393288472,
        3101374703,
        2390351024,
        1614419982,
        1822297739,
        2954791486,
        3608508353,
        3174124327,
        2024746970,
        1432378464,
        3864339955,
        2857741204,
        1464375394,
        1676153920,
        1439316330,
        715854006,
        3033291828,
        289532110,
        2706671279,
        2087905683,
        3018724369,
        1668267050,
        732546397,
        1947742710,
        3462151702,
        2609353502,
        2950085171,
        1814351708,
        2050118529,
        680887927,
        999245976,
        1800124847,
        3300911131,
        1713906067,
        1641548236,
        4213287313,
        1216130144,
        1575780402,
        4018429277,
        3917837745,
        3693486850,
        3949271944,
        596196993,
        3549867205,
        258830323,
        2213823033,
        772490370,
        2760122372,
        1774776394,
        2652871518,
        566650946,
        4142492826,
        1728879713,
        2882767088,
        1783734482,
        3629395816,
        2517608232,
        2874225571,
        1861159788,
        326777828,
        3124490320,
        2130389656,
        2716951837,
        967770486,
        1724537150,
        2185432712,
        2364442137,
        1164943284,
        2105845187,
        998989502,
        3765401048,
        2244026483,
        1075463327,
        1455516326,
        1322494562,
        910128902,
        469688178,
        1117454909,
        936433444,
        3490320968,
        3675253459,
        1240580251,
        122909385,
        2157517691,
        634681816,
        4142456567,
        3825094682,
        3061402683,
        2540495037,
        79693498,
        3249098678,
        1084186820,
        1583128258,
        426386531,
        1761308591,
        1047286709,
        322548459,
        995290223,
        1845252383,
        2603652396,
        3431023940,
        2942221577,
        3202600964,
        3727903485,
        1712269319,
        422464435,
        3234572375,
        1170764815,
        3523960633,
        3117677531,
        1434042557,
        442511882,
        3600875718,
        1076654713,
        1738483198,
        4213154764,
        2393238008,
        3677496056,
        1014306527,
        4251020053,
        793779912,
        2902807211,
        842905082,
        4246964064,
        1395751752,
        1040244610,
        2656851899,
        3396308128,
        445077038,
        3742853595,
        3577915638,
        679411651,
        2892444358,
        2354009459,
        1767581616,
        3150600392,
        3791627101,
        3102740896,
        284835224,
        4246832056,
        1258075500,
        768725851,
        2589189241,
        3069724005,
        3532540348,
        1274779536,
        3789419226,
        2764799539,
        1660621633,
        3471099624,
        4011903706,
        913787905,
        3497959166,
        737222580,
        2514213453,
        2928710040,
        3937242737,
        1804850592,
        3499020752,
        2949064160,
        2386320175,
        2390070455,
        2415321851,
        4061277028,
        2290661394,
        2416832540,
        1336762016,
        1754252060,
        3520065937,
        3014181293,
        791618072,
        3188594551,
        3933548030,
        2332172193,
        3852520463,
        3043980520,
        413987798,
        3465142937,
        3030929376,
        4245938359,
        2093235073,
        3534596313,
        375366246,
        2157278981,
        2479649556,
        555357303,
        3870105701,
        2008414854,
        3344188149,
        4221384143,
        3956125452,
        2067696032,
        3594591187,
        2921233993,
        2428461,
        544322398,
        577241275,
        1471733935,
        610547355,
        4027169054,
        1432588573,
        1507829418,
        2025931657,
        3646575487,
        545086370,
        48609733,
        2200306550,
        1653985193,
        298326376,
        1316178497,
        3007786442,
        2064951626,
        458293330,
        2589141269,
        3591329599,
        3164325604,
        727753846,
        2179363840,
        146436021,
        1461446943,
        4069977195,
        705550613,
        3059967265,
        3887724982,
        4281599278,
        3313849956,
        1404054877,
        2845806497,
        146425753,
        1854211946,
        1266315497,
        3048417604,
        3681880366,
        3289982499,
        290971e4,
        1235738493,
        2632868024,
        2414719590,
        3970600049,
        1771706367,
        1449415276,
        3266420449,
        422970021,
        1963543593,
        2690192192,
        3826793022,
        1062508698,
        1531092325,
        1804592342,
        2583117782,
        2714934279,
        4024971509,
        1294809318,
        4028980673,
        1289560198,
        2221992742,
        1669523910,
        35572830,
        157838143,
        1052438473,
        1016535060,
        1802137761,
        1753167236,
        1386275462,
        3080475397,
        2857371447,
        1040679964,
        2145300060,
        2390574316,
        1461121720,
        2956646967,
        4031777805,
        4028374788,
        33600511,
        2920084762,
        1018524850,
        629373528,
        3691585981,
        3515945977,
        2091462646,
        2486323059,
        586499841,
        988145025,
        935516892,
        3367335476,
        2599673255,
        2839830854,
        265290510,
        3972581182,
        2759138881,
        3795373465,
        1005194799,
        847297441,
        406762289,
        1314163512,
        1332590856,
        1866599683,
        4127851711,
        750260880,
        613907577,
        1450815602,
        3165620655,
        3734664991,
        3650291728,
        3012275730,
        3704569646,
        1427272223,
        778793252,
        1343938022,
        2676280711,
        2052605720,
        1946737175,
        3164576444,
        3914038668,
        3967478842,
        3682934266,
        1661551462,
        3294938066,
        4011595847,
        840292616,
        3712170807,
        616741398,
        312560963,
        711312465,
        1351876610,
        322626781,
        1910503582,
        271666773,
        2175563734,
        1594956187,
        70604529,
        3617834859,
        1007753275,
        1495573769,
        4069517037,
        2549218298,
        2663038764,
        504708206,
        2263041392,
        3941167025,
        2249088522,
        1514023603,
        1998579484,
        1312622330,
        694541497,
        2582060303,
        2151582166,
        1382467621,
        776784248,
        2618340202,
        3323268794,
        2497899128,
        2784771155,
        503983604,
        4076293799,
        907881277,
        423175695,
        432175456,
        1378068232,
        4145222326,
        3954048622,
        3938656102,
        3820766613,
        2793130115,
        2977904593,
        26017576,
        3274890735,
        3194772133,
        1700274565,
        1756076034,
        4006520079,
        3677328699,
        720338349,
        1533947780,
        354530856,
        688349552,
        3973924725,
        1637815568,
        332179504,
        3949051286,
        53804574,
        2852348879,
        3044236432,
        1282449977,
        3583942155,
        3416972820,
        4006381244,
        1617046695,
        2628476075,
        3002303598,
        1686838959,
        431878346,
        2686675385,
        1700445008,
        1080580658,
        1009431731,
        832498133,
        3223435511,
        2605976345,
        2271191193,
        2516031870,
        1648197032,
        4164389018,
        2548247927,
        300782431,
        375919233,
        238389289,
        3353747414,
        2531188641,
        2019080857,
        1475708069,
        455242339,
        2609103871,
        448939670,
        3451063019,
        1395535956,
        2413381860,
        1841049896,
        1491858159,
        885456874,
        4264095073,
        4001119347,
        1565136089,
        3898914787,
        1108368660,
        540939232,
        1173283510,
        2745871338,
        3681308437,
        4207628240,
        3343053890,
        4016749493,
        1699691293,
        1103962373,
        3625875870,
        2256883143,
        3830138730,
        1031889488,
        3479347698,
        1535977030,
        4236805024,
        3251091107,
        2132092099,
        1774941330,
        1199868427,
        1452454533,
        157007616,
        2904115357,
        342012276,
        595725824,
        1480756522,
        206960106,
        497939518,
        591360097,
        863170706,
        2375253569,
        3596610801,
        1814182875,
        2094937945,
        3421402208,
        1082520231,
        3463918190,
        2785509508,
        435703966,
        3908032597,
        1641649973,
        2842273706,
        3305899714,
        1510255612,
        2148256476,
        2655287854,
        3276092548,
        4258621189,
        236887753,
        3681803219,
        274041037,
        1734335097,
        3815195456,
        3317970021,
        1899903192,
        1026095262,
        4050517792,
        356393447,
        2410691914,
        3873677099,
        3682840055,
        3913112168,
        2491498743,
        4132185628,
        2489919796,
        1091903735,
        1979897079,
        3170134830,
        3567386728,
        3557303409,
        857797738,
        1136121015,
        1342202287,
        507115054,
        2535736646,
        337727348,
        3213592640,
        1301675037,
        2528481711,
        1895095763,
        1721773893,
        3216771564,
        62756741,
        2142006736,
        835421444,
        2531993523,
        1442658625,
        3659876326,
        2882144922,
        676362277,
        1392781812,
        170690266,
        3921047035,
        1759253602,
        3611846912,
        1745797284,
        664899054,
        1329594018,
        3901205900,
        3045908486,
        2062866102,
        2865634940,
        3543621612,
        3464012697,
        1080764994,
        553557557,
        3656615353,
        3996768171,
        991055499,
        499776247,
        1265440854,
        648242737,
        3940784050,
        980351604,
        3713745714,
        1749149687,
        3396870395,
        4211799374,
        3640570775,
        1161844396,
        3125318951,
        1431517754,
        545492359,
        4268468663,
        3499529547,
        1437099964,
        2702547544,
        3433638243,
        2581715763,
        2787789398,
        1060185593,
        1593081372,
        2418618748,
        4260947970,
        69676912,
        2159744348,
        86519011,
        2512459080,
        3838209314,
        1220612927,
        3339683548,
        133810670,
        1090789135,
        1078426020,
        1569222167,
        845107691,
        3583754449,
        4072456591,
        1091646820,
        628848692,
        1613405280,
        3757631651,
        526609435,
        236106946,
        48312990,
        2942717905,
        3402727701,
        1797494240,
        859738849,
        992217954,
        4005476642,
        2243076622,
        3870952857,
        3732016268,
        765654824,
        3490871365,
        2511836413,
        1685915746,
        3888969200,
        1414112111,
        2273134842,
        3281911079,
        4080962846,
        172450625,
        2569994100,
        980381355,
        4109958455,
        2819808352,
        2716589560,
        2568741196,
        3681446669,
        3329971472,
        1835478071,
        660984891,
        3704678404,
        4045999559,
        3422617507,
        3040415634,
        1762651403,
        1719377915,
        3470491036,
        2693910283,
        3642056355,
        3138596744,
        1364962596,
        2073328063,
        1983633131,
        926494387,
        3423689081,
        2150032023,
        4096667949,
        1749200295,
        3328846651,
        309677260,
        2016342300,
        1779581495,
        3079819751,
        111262694,
        1274766160,
        443224088,
        298511866,
        1025883608,
        3806446537,
        1145181785,
        168956806,
        3641502830,
        3584813610,
        1689216846,
        3666258015,
        3200248200,
        1692713982,
        2646376535,
        4042768518,
        1618508792,
        1610833997,
        3523052358,
        4130873264,
        2001055236,
        3610705100,
        2202168115,
        4028541809,
        2961195399,
        1006657119,
        2006996926,
        3186142756,
        1430667929,
        3210227297,
        1314452623,
        4074634658,
        4101304120,
        2273951170,
        1399257539,
        3367210612,
        3027628629,
        1190975929,
        2062231137,
        2333990788,
        2221543033,
        2438960610,
        1181637006,
        548689776,
        2362791313,
        3372408396,
        3104550113,
        3145860560,
        296247880,
        1970579870,
        3078560182,
        3769228297,
        1714227617,
        3291629107,
        3898220290,
        166772364,
        1251581989,
        493813264,
        448347421,
        195405023,
        2709975567,
        677966185,
        3703036547,
        1463355134,
        2715995803,
        1338867538,
        1343315457,
        2802222074,
        2684532164,
        233230375,
        2599980071,
        2000651841,
        3277868038,
        1638401717,
        4028070440,
        3237316320,
        6314154,
        819756386,
        300326615,
        590932579,
        1405279636,
        3267499572,
        3150704214,
        2428286686,
        3959192993,
        3461946742,
        1862657033,
        1266418056,
        963775037,
        2089974820,
        2263052895,
        1917689273,
        448879540,
        3550394620,
        3981727096,
        150775221,
        3627908307,
        1303187396,
        508620638,
        2975983352,
        2726630617,
        1817252668,
        1876281319,
        1457606340,
        908771278,
        3720792119,
        3617206836,
        2455994898,
        1729034894,
        1080033504,
        976866871,
        3556439503,
        2881648439,
        1522871579,
        1555064734,
        1336096578,
        3548522304,
        2579274686,
        3574697629,
        3205460757,
        3593280638,
        3338716283,
        3079412587,
        564236357,
        2993598910,
        1781952180,
        1464380207,
        3163844217,
        3332601554,
        1699332808,
        1393555694,
        1183702653,
        3581086237,
        1288719814,
        691649499,
        2847557200,
        2895455976,
        3193889540,
        2717570544,
        1781354906,
        1676643554,
        2592534050,
        3230253752,
        1126444790,
        2770207658,
        2633158820,
        2210423226,
        2615765581,
        2414155088,
        3127139286,
        673620729,
        2805611233,
        1269405062,
        4015350505,
        3341807571,
        4149409754,
        1057255273,
        2012875353,
        2162469141,
        2276492801,
        2601117357,
        993977747,
        3918593370,
        2654263191,
        753973209,
        36408145,
        2530585658,
        25011837,
        3520020182,
        2088578344,
        530523599,
        2918365339,
        1524020338,
        1518925132,
        3760827505,
        3759777254,
        1202760957,
        3985898139,
        3906192525,
        674977740,
        4174734889,
        2031300136,
        2019492241,
        3983892565,
        4153806404,
        3822280332,
        352677332,
        2297720250,
        60907813,
        90501309,
        3286998549,
        1016092578,
        2535922412,
        2839152426,
        457141659,
        509813237,
        4120667899,
        652014361,
        1966332200,
        2975202805,
        55981186,
        2327461051,
        676427537,
        3255491064,
        2882294119,
        3433927263,
        1307055953,
        942726286,
        933058658,
        2468411793,
        3933900994,
        4215176142,
        1361170020,
        2001714738,
        2830558078,
        3274259782,
        1222529897,
        1679025792,
        2729314320,
        3714953764,
        1770335741,
        151462246,
        3013232138,
        1682292957,
        1483529935,
        471910574,
        1539241949,
        458788160,
        3436315007,
        1807016891,
        3718408830,
        978976581,
        1043663428,
        3165965781,
        1927990952,
        4200891579,
        2372276910,
        3208408903,
        3533431907,
        1412390302,
        2931980059,
        4132332400,
        1947078029,
        3881505623,
        4168226417,
        2941484381,
        1077988104,
        1320477388,
        886195818,
        18198404,
        3786409e3,
        2509781533,
        112762804,
        3463356488,
        1866414978,
        891333506,
        18488651,
        661792760,
        1628790961,
        3885187036,
        3141171499,
        876946877,
        2693282273,
        1372485963,
        791857591,
        2686433993,
        3759982718,
        3167212022,
        3472953795,
        2716379847,
        445679433,
        3561995674,
        3504004811,
        3574258232,
        54117162,
        3331405415,
        2381918588,
        3769707343,
        4154350007,
        1140177722,
        4074052095,
        668550556,
        3214352940,
        367459370,
        261225585,
        2610173221,
        4209349473,
        3468074219,
        3265815641,
        314222801,
        3066103646,
        3808782860,
        282218597,
        3406013506,
        3773591054,
        379116347,
        1285071038,
        846784868,
        2669647154,
        3771962079,
        3550491691,
        2305946142,
        453669953,
        1268987020,
        3317592352,
        3279303384,
        3744833421,
        2610507566,
        3859509063,
        266596637,
        3847019092,
        517658769,
        3462560207,
        3443424879,
        370717030,
        4247526661,
        2224018117,
        4143653529,
        4112773975,
        2788324899,
        2477274417,
        1456262402,
        2901442914,
        1517677493,
        1846949527,
        2295493580,
        3734397586,
        2176403920,
        1280348187,
        1908823572,
        3871786941,
        846861322,
        1172426758,
        3287448474,
        3383383037,
        1655181056,
        3139813346,
        901632758,
        1897031941,
        2986607138,
        3066810236,
        3447102507,
        1393639104,
        373351379,
        950779232,
        625454576,
        3124240540,
        4148612726,
        2007998917,
        544563296,
        2244738638,
        2330496472,
        2058025392,
        1291430526,
        424198748,
        50039436,
        29584100,
        3605783033,
        2429876329,
        2791104160,
        1057563949,
        3255363231,
        3075367218,
        3463963227,
        1469046755,
        985887462
      ];
      var C_ORIG = [
        1332899944,
        1700884034,
        1701343084,
        1684370003,
        1668446532,
        1869963892
      ];
      function _encipher(lr, off, P, S) {
        var n, l = lr[off], r = lr[off + 1];
        l ^= P[0];
        n = S[l >>> 24];
        n += S[256 | l >> 16 & 255];
        n ^= S[512 | l >> 8 & 255];
        n += S[768 | l & 255];
        r ^= n ^ P[1];
        n = S[r >>> 24];
        n += S[256 | r >> 16 & 255];
        n ^= S[512 | r >> 8 & 255];
        n += S[768 | r & 255];
        l ^= n ^ P[2];
        n = S[l >>> 24];
        n += S[256 | l >> 16 & 255];
        n ^= S[512 | l >> 8 & 255];
        n += S[768 | l & 255];
        r ^= n ^ P[3];
        n = S[r >>> 24];
        n += S[256 | r >> 16 & 255];
        n ^= S[512 | r >> 8 & 255];
        n += S[768 | r & 255];
        l ^= n ^ P[4];
        n = S[l >>> 24];
        n += S[256 | l >> 16 & 255];
        n ^= S[512 | l >> 8 & 255];
        n += S[768 | l & 255];
        r ^= n ^ P[5];
        n = S[r >>> 24];
        n += S[256 | r >> 16 & 255];
        n ^= S[512 | r >> 8 & 255];
        n += S[768 | r & 255];
        l ^= n ^ P[6];
        n = S[l >>> 24];
        n += S[256 | l >> 16 & 255];
        n ^= S[512 | l >> 8 & 255];
        n += S[768 | l & 255];
        r ^= n ^ P[7];
        n = S[r >>> 24];
        n += S[256 | r >> 16 & 255];
        n ^= S[512 | r >> 8 & 255];
        n += S[768 | r & 255];
        l ^= n ^ P[8];
        n = S[l >>> 24];
        n += S[256 | l >> 16 & 255];
        n ^= S[512 | l >> 8 & 255];
        n += S[768 | l & 255];
        r ^= n ^ P[9];
        n = S[r >>> 24];
        n += S[256 | r >> 16 & 255];
        n ^= S[512 | r >> 8 & 255];
        n += S[768 | r & 255];
        l ^= n ^ P[10];
        n = S[l >>> 24];
        n += S[256 | l >> 16 & 255];
        n ^= S[512 | l >> 8 & 255];
        n += S[768 | l & 255];
        r ^= n ^ P[11];
        n = S[r >>> 24];
        n += S[256 | r >> 16 & 255];
        n ^= S[512 | r >> 8 & 255];
        n += S[768 | r & 255];
        l ^= n ^ P[12];
        n = S[l >>> 24];
        n += S[256 | l >> 16 & 255];
        n ^= S[512 | l >> 8 & 255];
        n += S[768 | l & 255];
        r ^= n ^ P[13];
        n = S[r >>> 24];
        n += S[256 | r >> 16 & 255];
        n ^= S[512 | r >> 8 & 255];
        n += S[768 | r & 255];
        l ^= n ^ P[14];
        n = S[l >>> 24];
        n += S[256 | l >> 16 & 255];
        n ^= S[512 | l >> 8 & 255];
        n += S[768 | l & 255];
        r ^= n ^ P[15];
        n = S[r >>> 24];
        n += S[256 | r >> 16 & 255];
        n ^= S[512 | r >> 8 & 255];
        n += S[768 | r & 255];
        l ^= n ^ P[16];
        lr[off] = r ^ P[BLOWFISH_NUM_ROUNDS + 1];
        lr[off + 1] = l;
        return lr;
      }
      function _streamtoword(data, offp) {
        for (var i = 0, word = 0; i < 4; ++i)
          word = word << 8 | data[offp] & 255, offp = (offp + 1) % data.length;
        return { key: word, offp };
      }
      function _key(key, P, S) {
        var offset = 0, lr = [0, 0], plen = P.length, slen = S.length, sw;
        for (var i = 0; i < plen; i++)
          sw = _streamtoword(key, offset), offset = sw.offp, P[i] = P[i] ^ sw.key;
        for (i = 0; i < plen; i += 2)
          lr = _encipher(lr, 0, P, S), P[i] = lr[0], P[i + 1] = lr[1];
        for (i = 0; i < slen; i += 2)
          lr = _encipher(lr, 0, P, S), S[i] = lr[0], S[i + 1] = lr[1];
      }
      function _ekskey(data, key, P, S) {
        var offp = 0, lr = [0, 0], plen = P.length, slen = S.length, sw;
        for (var i = 0; i < plen; i++)
          sw = _streamtoword(key, offp), offp = sw.offp, P[i] = P[i] ^ sw.key;
        offp = 0;
        for (i = 0; i < plen; i += 2)
          sw = _streamtoword(data, offp), offp = sw.offp, lr[0] ^= sw.key, sw = _streamtoword(data, offp), offp = sw.offp, lr[1] ^= sw.key, lr = _encipher(lr, 0, P, S), P[i] = lr[0], P[i + 1] = lr[1];
        for (i = 0; i < slen; i += 2)
          sw = _streamtoword(data, offp), offp = sw.offp, lr[0] ^= sw.key, sw = _streamtoword(data, offp), offp = sw.offp, lr[1] ^= sw.key, lr = _encipher(lr, 0, P, S), S[i] = lr[0], S[i + 1] = lr[1];
      }
      function _crypt(b, salt, rounds, callback, progressCallback) {
        var cdata = C_ORIG.slice(), clen = cdata.length, err;
        if (rounds < 4 || rounds > 31) {
          err = Error("Illegal number of rounds (4-31): " + rounds);
          if (callback) {
            nextTick(callback.bind(this, err));
            return;
          } else
            throw err;
        }
        if (salt.length !== BCRYPT_SALT_LEN) {
          err = Error("Illegal salt length: " + salt.length + " != " + BCRYPT_SALT_LEN);
          if (callback) {
            nextTick(callback.bind(this, err));
            return;
          } else
            throw err;
        }
        rounds = 1 << rounds >>> 0;
        var P, S, i = 0, j;
        if (Int32Array) {
          P = new Int32Array(P_ORIG);
          S = new Int32Array(S_ORIG);
        } else {
          P = P_ORIG.slice();
          S = S_ORIG.slice();
        }
        _ekskey(salt, b, P, S);
        function next() {
          if (progressCallback)
            progressCallback(i / rounds);
          if (i < rounds) {
            var start = Date.now();
            for (; i < rounds; ) {
              i = i + 1;
              _key(b, P, S);
              _key(salt, P, S);
              if (Date.now() - start > MAX_EXECUTION_TIME)
                break;
            }
          } else {
            for (i = 0; i < 64; i++)
              for (j = 0; j < clen >> 1; j++)
                _encipher(cdata, j << 1, P, S);
            var ret = [];
            for (i = 0; i < clen; i++)
              ret.push((cdata[i] >> 24 & 255) >>> 0), ret.push((cdata[i] >> 16 & 255) >>> 0), ret.push((cdata[i] >> 8 & 255) >>> 0), ret.push((cdata[i] & 255) >>> 0);
            if (callback) {
              callback(null, ret);
              return;
            } else
              return ret;
          }
          if (callback)
            nextTick(next);
        }
        if (typeof callback !== "undefined") {
          next();
        } else {
          var res;
          while (true)
            if (typeof (res = next()) !== "undefined")
              return res || [];
        }
      }
      function _hash(s, salt, callback, progressCallback) {
        var err;
        if (typeof s !== "string" || typeof salt !== "string") {
          err = Error("Invalid string / salt: Not a string");
          if (callback) {
            nextTick(callback.bind(this, err));
            return;
          } else
            throw err;
        }
        var minor, offset;
        if (salt.charAt(0) !== "$" || salt.charAt(1) !== "2") {
          err = Error("Invalid salt version: " + salt.substring(0, 2));
          if (callback) {
            nextTick(callback.bind(this, err));
            return;
          } else
            throw err;
        }
        if (salt.charAt(2) === "$")
          minor = String.fromCharCode(0), offset = 3;
        else {
          minor = salt.charAt(2);
          if (minor !== "a" && minor !== "b" && minor !== "y" || salt.charAt(3) !== "$") {
            err = Error("Invalid salt revision: " + salt.substring(2, 4));
            if (callback) {
              nextTick(callback.bind(this, err));
              return;
            } else
              throw err;
          }
          offset = 4;
        }
        if (salt.charAt(offset + 2) > "$") {
          err = Error("Missing salt rounds");
          if (callback) {
            nextTick(callback.bind(this, err));
            return;
          } else
            throw err;
        }
        var r1 = parseInt(salt.substring(offset, offset + 1), 10) * 10, r2 = parseInt(salt.substring(offset + 1, offset + 2), 10), rounds = r1 + r2, real_salt = salt.substring(offset + 3, offset + 25);
        s += minor >= "a" ? "\0" : "";
        var passwordb = stringToBytes(s), saltb = base64_decode(real_salt, BCRYPT_SALT_LEN);
        function finish(bytes) {
          var res = [];
          res.push("$2");
          if (minor >= "a")
            res.push(minor);
          res.push("$");
          if (rounds < 10)
            res.push("0");
          res.push(rounds.toString());
          res.push("$");
          res.push(base64_encode(saltb, saltb.length));
          res.push(base64_encode(bytes, C_ORIG.length * 4 - 1));
          return res.join("");
        }
        if (typeof callback == "undefined")
          return finish(_crypt(passwordb, saltb, rounds));
        else {
          _crypt(passwordb, saltb, rounds, function(err2, bytes) {
            if (err2)
              callback(err2, null);
            else
              callback(null, finish(bytes));
          }, progressCallback);
        }
      }
      bcrypt2.encodeBase64 = base64_encode;
      bcrypt2.decodeBase64 = base64_decode;
      return bcrypt2;
    });
  }
});

// node_modules/bcryptjs/index.js
var require_bcryptjs = __commonJS({
  "node_modules/bcryptjs/index.js"(exports2, module2) {
    module2.exports = require_bcrypt();
  }
});

// node_modules/electrodb/src/types.js
var require_types = __commonJS({
  "node_modules/electrodb/src/types.js"(exports2, module2) {
    var KeyTypes = {
      pk: "pk",
      sk: "sk"
    };
    var DataOptions = {
      raw: "raw",
      includeKeys: "includeKeys",
      attributes: "attributes"
    };
    var BatchWriteTypes = {
      batch: "batch",
      concurrent: "concurrent"
    };
    var ComparisonTypes = {
      keys: "keys",
      attributes: "attributes",
      v2: "v2"
    };
    var QueryTypes = {
      and: "and",
      gte: "gte",
      gt: "gt",
      lte: "lte",
      lt: "lt",
      eq: "eq",
      begins: "begins",
      between: "between",
      collection: "collection",
      clustered_collection: "clustered_collection",
      is: "is"
    };
    var MethodTypes = {
      check: "check",
      put: "put",
      get: "get",
      query: "query",
      scan: "scan",
      update: "update",
      delete: "delete",
      remove: "remove",
      patch: "patch",
      create: "create",
      batchGet: "batchGet",
      batchWrite: "batchWrite",
      upsert: "upsert",
      transactWrite: "transactWrite",
      transactGet: "transactGet"
    };
    var TransactionMethods = {
      transactWrite: MethodTypes.transactWrite,
      transactGet: MethodTypes.transactGet
    };
    var TransactionOperations = {
      [MethodTypes.get]: "Get",
      [MethodTypes.check]: "ConditionCheck",
      [MethodTypes.put]: "Put",
      [MethodTypes.create]: "Put",
      [MethodTypes.upsert]: "Update",
      [MethodTypes.update]: "Update",
      [MethodTypes.patch]: "Update",
      [MethodTypes.remove]: "Delete",
      [MethodTypes.delete]: "Delete"
    };
    var MethodTypeTranslation = {
      put: "put",
      get: "get",
      query: "query",
      scan: "scan",
      update: "update",
      delete: "delete",
      remove: "delete",
      patch: "update",
      create: "put",
      batchGet: "batchGet",
      batchWrite: "batchWrite",
      upsert: "update",
      transactWrite: "transactWrite",
      transactGet: "transactGet"
    };
    var IndexTypes = {
      isolated: "isolated",
      clustered: "clustered"
    };
    var Comparisons = {
      lte: "<=",
      lt: "<",
      gte: ">=",
      gt: ">"
    };
    var KeyAttributesComparisons = {
      lt: "<",
      gte: ">=",
      /**
       * gt becomes gte and last character of incoming value is shifted up one character code
       * example:
       * sk > '2020-09-05'
       *   expected
       *     - 2020-09-06@05:05_hero
       *     - 2020-10-05@05:05_hero
       *     - 2022-02-05@05:05_villian
       *     - 2022-06-05@05:05_clown
       *     - 2022-09-06@05:05_clown
       *   actual (bad - includes all 2020-09-05 records)
       *     - 2020-09-05@05:05_hero
       *     - 2020-09-06@05:05_hero
       *     - 2020-10-05@05:05_hero
       *     - 2022-02-05@05:05_villian
       *     - 2022-06-05@05:05_clown
       */
      gt: ">=",
      /**
       * lte becomes lt and last character of incoming value is shifted up one character code
       * example:
       * sk >= '2020-09-05'
       *   expected
       *     - 2012-02-05@05:05_clown
       *     - 2015-10-05@05:05_hero
       *     - 2017-02-05@05:05_clown
       *     - 2017-02-05@05:05_villian
       *     - 2020-02-05@05:05_clown
       *     - 2020-02-25@05:05_clown
       *     - 2020-09-05@05:05_hero
       *   actual (bad - missing all 2020-09-05 records)
       *     - 2012-02-05@05:05_clown
       *     - 2015-10-05@05:05_hero
       *     - 2017-02-05@05:05_clown
       *     - 2017-02-05@05:05_villian
       *     - 2020-02-05@05:05_clown
       *     - 2020-02-25@05:05_clown
       */
      lte: "<"
    };
    var CastTypes = ["string", "number"];
    var AttributeTypes = {
      string: "string",
      number: "number",
      boolean: "boolean",
      enum: "enum",
      map: "map",
      set: "set",
      // enumSet: "enumSet",
      list: "list",
      any: "any",
      custom: "custom",
      static: "static"
    };
    var PathTypes = {
      ...AttributeTypes,
      item: "item"
    };
    var ExpressionTypes = {
      ConditionExpression: "ConditionExpression",
      FilterExpression: "FilterExpression"
    };
    var ElectroInstance = {
      entity: Symbol("entity"),
      service: Symbol("service"),
      electro: Symbol("electro")
    };
    var ElectroInstanceTypes = {
      electro: "electro",
      service: "service",
      entity: "entity",
      model: "model"
    };
    var ModelVersions = {
      beta: "beta",
      v1: "v1",
      v2: "v2"
    };
    var EntityVersions = {
      v1: "v1"
    };
    var ServiceVersions = {
      v1: "v1"
    };
    var MaxBatchItems = {
      [MethodTypes.batchGet]: 100,
      [MethodTypes.batchWrite]: 25
    };
    var AttributeMutationMethods = {
      get: "get",
      set: "set"
    };
    var Pager = {
      raw: "raw",
      named: "named",
      item: "item",
      cursor: "cursor"
    };
    var UnprocessedTypes = {
      raw: "raw",
      item: "item"
    };
    var AttributeWildCard = "*";
    var ItemOperations = {
      set: "set",
      delete: "delete",
      remove: "remove",
      add: "add",
      subtract: "subtract",
      append: "append",
      ifNotExists: "ifNotExists"
    };
    var UpsertOperations = {
      set: "set",
      add: "add",
      subtract: "subtract",
      append: "append",
      ifNotExists: "ifNotExists"
    };
    var AttributeProxySymbol = Symbol("attribute_proxy");
    var TransactionCommitSymbol = Symbol("transaction_commit");
    var BuilderTypes = {
      update: "update",
      filter: "filter"
    };
    var ValueTypes = {
      string: "string",
      boolean: "boolean",
      number: "number",
      array: "array",
      set: "set",
      aws_set: "aws_set",
      object: "object",
      map: "map",
      null: "null",
      undefined: "undefined",
      unknown: "unknown"
    };
    var TraverserIndexes = {
      readonly: "readonly",
      required: "required",
      getters: "getters",
      setters: "setters"
    };
    var ReturnValues = {
      default: "default",
      none: "none",
      all_old: "all_old",
      updated_old: "updated_old",
      all_new: "all_new",
      updated_new: "updated_new"
    };
    var FormatToReturnValues = {
      none: "NONE",
      default: "NONE",
      all_old: "ALL_OLD",
      updated_old: "UPDATED_OLD",
      all_new: "ALL_NEW",
      updated_new: "UPDATED_NEW"
    };
    var TableIndex = "";
    var KeyCasing = {
      none: "none",
      upper: "upper",
      lower: "lower",
      default: "default"
    };
    var EventSubscriptionTypes = ["query", "results"];
    var TerminalOperation = {
      go: "go",
      page: "page"
    };
    var AllPages = "all";
    var ResultOrderOption = {
      asc: true,
      desc: false
    };
    var ResultOrderParam = "ScanIndexForward";
    var DynamoDBAttributeTypes = Object.entries({
      string: "S",
      stringSet: "SS",
      number: "N",
      numberSet: "NS",
      binary: "B",
      binarySet: "BS",
      boolean: "BOOL",
      null: "NULL",
      list: "L",
      map: "M"
    }).reduce((obj, [name, type]) => {
      obj[name] = type;
      obj[type] = type;
      return obj;
    }, {});
    var CastKeyOptions = {
      string: "string",
      number: "number"
    };
    module2.exports = {
      Pager,
      KeyTypes,
      CastTypes,
      KeyCasing,
      PathTypes,
      IndexTypes,
      QueryTypes,
      ValueTypes,
      TableIndex,
      MethodTypes,
      DataOptions,
      Comparisons,
      BuilderTypes,
      ReturnValues,
      MaxBatchItems,
      ModelVersions,
      ItemOperations,
      AttributeTypes,
      EntityVersions,
      CastKeyOptions,
      ComparisonTypes,
      ServiceVersions,
      ExpressionTypes,
      ElectroInstance,
      TraverserIndexes,
      UnprocessedTypes,
      AttributeWildCard,
      TerminalOperation,
      FormatToReturnValues,
      AttributeProxySymbol,
      ElectroInstanceTypes,
      MethodTypeTranslation,
      EventSubscriptionTypes,
      DynamoDBAttributeTypes,
      KeyAttributesComparisons,
      AttributeMutationMethods,
      AllPages,
      ResultOrderOption,
      ResultOrderParam,
      TransactionCommitSymbol,
      TransactionOperations,
      TransactionMethods,
      UpsertOperations,
      BatchWriteTypes
    };
  }
});

// node_modules/electrodb/src/errors.js
var require_errors = __commonJS({
  "node_modules/electrodb/src/errors.js"(exports2, module2) {
    function getHelpLink(section) {
      section = section || "unknown-error-5001";
      return `https://electrodb.dev/en/reference/errors/#${section}`;
    }
    var ErrorCode = Symbol("error-code");
    var ErrorCodes = {
      NoClientDefined: {
        code: 1001,
        section: "no-client-defined-on-model",
        name: "NoClientDefined",
        sym: ErrorCode
      },
      InvalidIdentifier: {
        code: 1002,
        section: "invalid-identifier",
        name: "InvalidIdentifier",
        sym: ErrorCode
      },
      InvalidKeyCompositeAttributeTemplate: {
        code: 1003,
        section: "invalid-key-composite-attribute-template",
        name: "InvalidKeyCompositeAttributeTemplate",
        sym: ErrorCode
      },
      DuplicateIndexes: {
        code: 1004,
        section: "duplicate-indexes",
        name: "DuplicateIndexes",
        sym: ErrorCode
      },
      CollectionNoSK: {
        code: 1005,
        section: "collection-without-an-sk",
        name: "CollectionNoSK",
        sym: ErrorCode
      },
      DuplicateCollections: {
        code: 1006,
        section: "duplicate-collections",
        name: "DuplicateCollections",
        sym: ErrorCode
      },
      MissingPrimaryIndex: {
        code: 1007,
        section: "missing-primary-index",
        name: "MissingPrimaryIndex",
        sym: ErrorCode
      },
      InvalidAttributeDefinition: {
        code: 1008,
        section: "invalid-attribute-definition",
        name: "InvalidAttributeDefinition",
        sym: ErrorCode
      },
      InvalidModel: {
        code: 1009,
        section: "invalid-model",
        name: "InvalidModel",
        sym: ErrorCode
      },
      InvalidOptions: {
        code: 1010,
        section: "invalid-options",
        name: "InvalidOptions",
        sym: ErrorCode
      },
      InvalidFilter: {
        code: 1011,
        section: "filters",
        name: "InvalidFilter",
        sym: ErrorCode
      },
      InvalidWhere: {
        code: 1012,
        section: "where",
        name: "InvalidWhere",
        sym: ErrorCode
      },
      InvalidJoin: {
        code: 1013,
        section: "join",
        name: "InvalidJoin",
        sym: ErrorCode
      },
      DuplicateIndexFields: {
        code: 1014,
        section: "duplicate-index-fields",
        name: "DuplicateIndexField",
        sym: ErrorCode
      },
      DuplicateIndexCompositeAttributes: {
        code: 1015,
        section: "duplicate-index-composite-attributes",
        name: "DuplicateIndexCompositeAttributes",
        sym: ErrorCode
      },
      InvalidAttributeWatchDefinition: {
        code: 1016,
        section: "invalid-attribute-watch-definition",
        name: "InvalidAttributeWatchDefinition",
        sym: ErrorCode
      },
      IncompatibleKeyCompositeAttributeTemplate: {
        code: 1017,
        section: "incompatible-key-composite-attribute-template",
        name: "IncompatibleKeyCompositeAttributeTemplate",
        sym: ErrorCode
      },
      InvalidIndexWithAttributeName: {
        code: 1018,
        section: "invalid-index-with-attribute-name",
        name: "InvalidIndexWithAttributeName",
        sym: ErrorCode
      },
      InvalidCollectionOnIndexWithAttributeFieldNames: {
        code: 1019,
        section: "invalid-collection-on-index-with-attribute-field-names",
        name: "InvalidIndexCompositeWithAttributeName",
        sym: ErrorCode
      },
      InvalidListenerProvided: {
        code: 1020,
        section: "invalid-listener-provided",
        name: "InvalidListenerProvided",
        sym: ErrorCode
      },
      InvalidLoggerProvided: {
        code: 1020,
        section: "invalid-listener-provided",
        name: "InvalidListenerProvided",
        sym: ErrorCode
      },
      InvalidClientProvided: {
        code: 1021,
        section: "invalid-client-provided",
        name: "InvalidClientProvided",
        sym: ErrorCode
      },
      InconsistentIndexDefinition: {
        code: 1022,
        section: "inconsistent-index-definition",
        name: "Inconsistent Index Definition",
        sym: ErrorCode
      },
      MissingAttribute: {
        code: 2001,
        section: "missing-attribute",
        name: "MissingAttribute",
        sym: ErrorCode
      },
      IncompleteCompositeAttributes: {
        code: 2002,
        section: "incomplete-composite-attributes",
        name: "IncompleteCompositeAttributes",
        sym: ErrorCode
      },
      MissingTable: {
        code: 2003,
        section: "missing-table",
        name: "MissingTable",
        sym: ErrorCode
      },
      InvalidConcurrencyOption: {
        code: 2004,
        section: "invalid-concurrency-option",
        name: "InvalidConcurrencyOption",
        sym: ErrorCode
      },
      InvalidPagesOption: {
        code: 2005,
        section: "invalid-pages-option",
        name: "InvalidPagesOption",
        sym: ErrorCode
      },
      InvalidLimitOption: {
        code: 2006,
        section: "invalid-limit-option",
        name: "InvalidLimitOption",
        sym: ErrorCode
      },
      InvalidConversionKeysProvided: {
        code: 2007,
        section: "invalid-conversion-values-provided",
        name: "InvalidConversionKeysProvided",
        sym: ErrorCode
      },
      InvalidConversionCursorProvided: {
        code: 2008,
        section: "invalid-conversion-values-provided",
        name: "InvalidConversionCursorProvided",
        sym: ErrorCode
      },
      InvalidConversionCompositeProvided: {
        code: 2009,
        section: "invalid-conversion-values-provided",
        name: "InvalidConversionCompositeProvided",
        sym: ErrorCode
      },
      DuplicateUpdateCompositesProvided: {
        code: 2010,
        section: "duplicate-update-composites-provided",
        name: "DuplicateUpdateCompositesProvided",
        sym: ErrorCode
      },
      InvalidIndexCondition: {
        code: 2011,
        section: "invalid-index-option",
        name: "InvalidIndexOption",
        sym: ErrorCode
      },
      IncompleteIndexCompositesAttributesProvided: {
        code: 2012,
        section: "invalid-index-composite-attributes-provided",
        name: "IncompleteIndexCompositesAttributesProvided",
        sym: ErrorCode
      },
      InvalidAttribute: {
        code: 3001,
        section: "invalid-attribute",
        name: "InvalidAttribute",
        sym: ErrorCode
      },
      AWSError: {
        code: 4001,
        section: "aws-error",
        name: "AWSError",
        sym: ErrorCode
      },
      UnknownError: {
        code: 5001,
        section: "unknown-error",
        name: "UnknownError",
        sym: ErrorCode
      },
      GeneralError: {
        code: 5002,
        section: "",
        name: "GeneralError",
        sym: ErrorCode
      },
      LastEvaluatedKey: {
        code: 5003,
        section: "invalid-last-evaluated-key",
        name: "LastEvaluatedKey",
        sym: ErrorCode
      },
      NoOwnerForPager: {
        code: 5004,
        section: "no-owner-for-pager",
        name: "NoOwnerForPager",
        sym: ErrorCode
      },
      NoOwnerForCursor: {
        code: 5004,
        section: "no-owner-for-pager",
        name: "NoOwnerForCursor",
        sym: ErrorCode
      },
      PagerNotUnique: {
        code: 5005,
        section: "pager-not-unique",
        name: "NoOwnerForPager",
        sym: ErrorCode
      }
    };
    function makeMessage(message, section) {
      return `${message} - For more detail on this error reference: ${getHelpLink(
        section
      )}`;
    }
    var ElectroError = class _ElectroError extends Error {
      constructor(code, message, cause) {
        super(message, { cause });
        let detail = ErrorCodes.UnknownError;
        if (code && code.sym === ErrorCode) {
          detail = code;
        }
        this._message = message;
        this.message = makeMessage(message, detail.section);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, _ElectroError);
        }
        this.name = "ElectroError";
        this.ref = code;
        this.code = detail.code;
        this.date = Date.now();
        this.isElectroError = true;
      }
    };
    var ElectroValidationError = class extends ElectroError {
      constructor(errors = []) {
        const fields = [];
        const messages = [];
        for (let i = 0; i < errors.length; i++) {
          const error = errors[i];
          const message2 = error ? error._message || error.message : void 0;
          messages.push(message2);
          if (error instanceof ElectroUserValidationError) {
            fields.push({
              field: error.field,
              index: error.index,
              reason: message2,
              cause: error.cause,
              type: "validation"
            });
          } else if (error instanceof ElectroAttributeValidationError) {
            fields.push({
              field: error.field,
              index: error.index,
              reason: message2,
              cause: error.cause || error,
              // error | undefined
              type: "validation"
            });
          } else if (message2) {
            fields.push({
              field: "",
              index: error.index,
              reason: message2,
              cause: error !== void 0 ? error.cause || error : void 0,
              type: "fatal"
            });
          }
        }
        const message = messages.filter((message2) => typeof message2 === "string" && message2.length).join(", ") || `Invalid value(s) provided`;
        super(ErrorCodes.InvalidAttribute, message);
        this.fields = fields;
        this.name = "ElectroValidationError";
      }
    };
    var ElectroUserValidationError = class extends ElectroError {
      constructor(field, cause) {
        let message;
        let hasCause = false;
        if (typeof cause === "string") {
          message = cause;
        } else if (cause !== void 0 && typeof cause._message === "string" && cause._message.length) {
          message = cause._message;
          hasCause = true;
        } else if (cause !== void 0 && typeof cause.message === "string" && cause.message.length) {
          message = cause.message;
          hasCause = true;
        } else {
          message = "Invalid value provided";
        }
        super(ErrorCodes.InvalidAttribute, message);
        this.field = field;
        this.name = "ElectroUserValidationError";
        if (hasCause) {
          this.cause = cause;
        }
      }
    };
    var ElectroAttributeValidationError = class extends ElectroError {
      constructor(field, reason) {
        super(ErrorCodes.InvalidAttribute, reason);
        this.field = field;
      }
    };
    module2.exports = {
      ErrorCodes,
      ElectroError,
      ElectroValidationError,
      ElectroUserValidationError,
      ElectroAttributeValidationError
    };
  }
});

// node_modules/jsonschema/lib/helpers.js
var require_helpers = __commonJS({
  "node_modules/jsonschema/lib/helpers.js"(exports2, module2) {
    "use strict";
    var uri = require("url");
    var ValidationError = exports2.ValidationError = function ValidationError2(message, instance, schema, propertyPath, name, argument) {
      if (propertyPath) {
        this.property = propertyPath;
      }
      if (message) {
        this.message = message;
      }
      if (schema) {
        if (schema.id) {
          this.schema = schema.id;
        } else {
          this.schema = schema;
        }
      }
      if (instance !== void 0) {
        this.instance = instance;
      }
      this.name = name;
      this.argument = argument;
      this.stack = this.toString();
    };
    ValidationError.prototype.toString = function toString() {
      return this.property + " " + this.message;
    };
    var ValidatorResult = exports2.ValidatorResult = function ValidatorResult2(instance, schema, options2, ctx) {
      this.instance = instance;
      this.schema = schema;
      this.propertyPath = ctx.propertyPath;
      this.errors = [];
      this.throwError = options2 && options2.throwError;
      this.disableFormat = options2 && options2.disableFormat === true;
    };
    ValidatorResult.prototype.addError = function addError(detail) {
      var err;
      if (typeof detail == "string") {
        err = new ValidationError(detail, this.instance, this.schema, this.propertyPath);
      } else {
        if (!detail) throw new Error("Missing error detail");
        if (!detail.message) throw new Error("Missing error message");
        if (!detail.name) throw new Error("Missing validator type");
        err = new ValidationError(detail.message, this.instance, this.schema, this.propertyPath, detail.name, detail.argument);
      }
      if (this.throwError) {
        throw err;
      }
      this.errors.push(err);
      return err;
    };
    ValidatorResult.prototype.importErrors = function importErrors(res) {
      if (typeof res == "string" || res && res.validatorType) {
        this.addError(res);
      } else if (res && res.errors) {
        Array.prototype.push.apply(this.errors, res.errors);
      }
    };
    function stringizer(v, i) {
      return i + ": " + v.toString() + "\n";
    }
    ValidatorResult.prototype.toString = function toString(res) {
      return this.errors.map(stringizer).join("");
    };
    Object.defineProperty(ValidatorResult.prototype, "valid", { get: function() {
      return !this.errors.length;
    } });
    var SchemaError = exports2.SchemaError = function SchemaError2(msg, schema) {
      this.message = msg;
      this.schema = schema;
      Error.call(this, msg);
      Error.captureStackTrace(this, SchemaError2);
    };
    SchemaError.prototype = Object.create(
      Error.prototype,
      {
        constructor: { value: SchemaError, enumerable: false },
        name: { value: "SchemaError", enumerable: false }
      }
    );
    var SchemaContext = exports2.SchemaContext = function SchemaContext2(schema, options2, propertyPath, base, schemas) {
      this.schema = schema;
      this.options = options2;
      this.propertyPath = propertyPath;
      this.base = base;
      this.schemas = schemas;
    };
    SchemaContext.prototype.resolve = function resolve(target) {
      return uri.resolve(this.base, target);
    };
    SchemaContext.prototype.makeChild = function makeChild(schema, propertyName) {
      var propertyPath = propertyName === void 0 ? this.propertyPath : this.propertyPath + makeSuffix(propertyName);
      var base = uri.resolve(this.base, schema.id || "");
      var ctx = new SchemaContext(schema, this.options, propertyPath, base, Object.create(this.schemas));
      if (schema.id && !ctx.schemas[base]) {
        ctx.schemas[base] = schema;
      }
      return ctx;
    };
    var FORMAT_REGEXPS = exports2.FORMAT_REGEXPS = {
      "date-time": /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,
      "date": /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,
      "time": /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,
      "email": /^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,
      "ip-address": /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
      "ipv6": /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
      "uri": /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\s]*$/,
      "color": /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,
      // hostname regex from: http://stackoverflow.com/a/1420225/5628
      "hostname": /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
      "host-name": /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
      "alpha": /^[a-zA-Z]+$/,
      "alphanumeric": /^[a-zA-Z0-9]+$/,
      "utc-millisec": function(input) {
        return typeof input === "string" && parseFloat(input) === parseInt(input, 10) && !isNaN(input);
      },
      "regex": function(input) {
        var result = true;
        try {
          new RegExp(input);
        } catch (e) {
          result = false;
        }
        return result;
      },
      "style": /\s*(.+?):\s*([^;]+);?/,
      "phone": /^\+(?:[0-9] ?){6,14}[0-9]$/
    };
    FORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;
    FORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;
    FORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS["ip-address"];
    exports2.isFormat = function isFormat(input, format, validator) {
      if (typeof input === "string" && FORMAT_REGEXPS[format] !== void 0) {
        if (FORMAT_REGEXPS[format] instanceof RegExp) {
          return FORMAT_REGEXPS[format].test(input);
        }
        if (typeof FORMAT_REGEXPS[format] === "function") {
          return FORMAT_REGEXPS[format](input);
        }
      } else if (validator && validator.customFormats && typeof validator.customFormats[format] === "function") {
        return validator.customFormats[format](input);
      }
      return true;
    };
    var makeSuffix = exports2.makeSuffix = function makeSuffix2(key) {
      key = key.toString();
      if (!key.match(/[.\s\[\]]/) && !key.match(/^[\d]/)) {
        return "." + key;
      }
      if (key.match(/^\d+$/)) {
        return "[" + key + "]";
      }
      return "[" + JSON.stringify(key) + "]";
    };
    exports2.deepCompareStrict = function deepCompareStrict(a, b) {
      if (typeof a !== typeof b) {
        return false;
      }
      if (Array.isArray(a)) {
        if (!Array.isArray(b)) {
          return false;
        }
        if (a.length !== b.length) {
          return false;
        }
        return a.every(function(v, i) {
          return deepCompareStrict(a[i], b[i]);
        });
      }
      if (typeof a === "object") {
        if (!a || !b) {
          return a === b;
        }
        var aKeys = Object.keys(a);
        var bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length) {
          return false;
        }
        return aKeys.every(function(v) {
          return deepCompareStrict(a[v], b[v]);
        });
      }
      return a === b;
    };
    function deepMerger(target, dst, e, i) {
      if (typeof e === "object") {
        dst[i] = deepMerge(target[i], e);
      } else {
        if (target.indexOf(e) === -1) {
          dst.push(e);
        }
      }
    }
    function copyist(src, dst, key) {
      dst[key] = src[key];
    }
    function copyistWithDeepMerge(target, src, dst, key) {
      if (typeof src[key] !== "object" || !src[key]) {
        dst[key] = src[key];
      } else {
        if (!target[key]) {
          dst[key] = src[key];
        } else {
          dst[key] = deepMerge(target[key], src[key]);
        }
      }
    }
    function deepMerge(target, src) {
      var array = Array.isArray(src);
      var dst = array && [] || {};
      if (array) {
        target = target || [];
        dst = dst.concat(target);
        src.forEach(deepMerger.bind(null, target, dst));
      } else {
        if (target && typeof target === "object") {
          Object.keys(target).forEach(copyist.bind(null, target, dst));
        }
        Object.keys(src).forEach(copyistWithDeepMerge.bind(null, target, src, dst));
      }
      return dst;
    }
    module2.exports.deepMerge = deepMerge;
    exports2.objectGetPath = function objectGetPath(o, s) {
      var parts = s.split("/").slice(1);
      var k;
      while (typeof (k = parts.shift()) == "string") {
        var n = decodeURIComponent(k.replace(/~0/, "~").replace(/~1/g, "/"));
        if (!(n in o)) return;
        o = o[n];
      }
      return o;
    };
    function pathEncoder(v) {
      return "/" + encodeURIComponent(v).replace(/~/g, "%7E");
    }
    exports2.encodePath = function encodePointer(a) {
      return a.map(pathEncoder).join("");
    };
    exports2.getDecimalPlaces = function getDecimalPlaces(number) {
      var decimalPlaces = 0;
      if (isNaN(number)) return decimalPlaces;
      if (typeof number !== "number") {
        number = Number(number);
      }
      var parts = number.toString().split("e");
      if (parts.length === 2) {
        if (parts[1][0] !== "-") {
          return decimalPlaces;
        } else {
          decimalPlaces = Number(parts[1].slice(1));
        }
      }
      var decimalParts = parts[0].split(".");
      if (decimalParts.length === 2) {
        decimalPlaces += decimalParts[1].length;
      }
      return decimalPlaces;
    };
  }
});

// node_modules/jsonschema/lib/attribute.js
var require_attribute = __commonJS({
  "node_modules/jsonschema/lib/attribute.js"(exports2, module2) {
    "use strict";
    var helpers = require_helpers();
    var ValidatorResult = helpers.ValidatorResult;
    var SchemaError = helpers.SchemaError;
    var attribute = {};
    attribute.ignoreProperties = {
      // informative properties
      "id": true,
      "default": true,
      "description": true,
      "title": true,
      // arguments to other properties
      "exclusiveMinimum": true,
      "exclusiveMaximum": true,
      "additionalItems": true,
      // special-handled properties
      "$schema": true,
      "$ref": true,
      "extends": true
    };
    var validators = attribute.validators = {};
    validators.type = function validateType(instance, schema, options2, ctx) {
      if (instance === void 0) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var types = Array.isArray(schema.type) ? schema.type : [schema.type];
      if (!types.some(this.testType.bind(this, instance, schema, options2, ctx))) {
        var list = types.map(function(v) {
          return v.id && "<" + v.id + ">" || v + "";
        });
        result.addError({
          name: "type",
          argument: list,
          message: "is not of a type(s) " + list
        });
      }
      return result;
    };
    function testSchemaNoThrow(instance, options2, ctx, callback, schema) {
      var throwError = options2.throwError;
      options2.throwError = false;
      var res = this.validateSchema(instance, schema, options2, ctx);
      options2.throwError = throwError;
      if (!res.valid && callback instanceof Function) {
        callback(res);
      }
      return res.valid;
    }
    validators.anyOf = function validateAnyOf(instance, schema, options2, ctx) {
      if (instance === void 0) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var inner = new ValidatorResult(instance, schema, options2, ctx);
      if (!Array.isArray(schema.anyOf)) {
        throw new SchemaError("anyOf must be an array");
      }
      if (!schema.anyOf.some(
        testSchemaNoThrow.bind(
          this,
          instance,
          options2,
          ctx,
          function(res) {
            inner.importErrors(res);
          }
        )
      )) {
        var list = schema.anyOf.map(function(v, i) {
          return v.id && "<" + v.id + ">" || v.title && JSON.stringify(v.title) || v["$ref"] && "<" + v["$ref"] + ">" || "[subschema " + i + "]";
        });
        if (options2.nestedErrors) {
          result.importErrors(inner);
        }
        result.addError({
          name: "anyOf",
          argument: list,
          message: "is not any of " + list.join(",")
        });
      }
      return result;
    };
    validators.allOf = function validateAllOf(instance, schema, options2, ctx) {
      if (instance === void 0) {
        return null;
      }
      if (!Array.isArray(schema.allOf)) {
        throw new SchemaError("allOf must be an array");
      }
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var self2 = this;
      schema.allOf.forEach(function(v, i) {
        var valid = self2.validateSchema(instance, v, options2, ctx);
        if (!valid.valid) {
          var msg = v.id && "<" + v.id + ">" || v.title && JSON.stringify(v.title) || v["$ref"] && "<" + v["$ref"] + ">" || "[subschema " + i + "]";
          result.addError({
            name: "allOf",
            argument: { id: msg, length: valid.errors.length, valid },
            message: "does not match allOf schema " + msg + " with " + valid.errors.length + " error[s]:"
          });
          result.importErrors(valid);
        }
      });
      return result;
    };
    validators.oneOf = function validateOneOf(instance, schema, options2, ctx) {
      if (instance === void 0) {
        return null;
      }
      if (!Array.isArray(schema.oneOf)) {
        throw new SchemaError("oneOf must be an array");
      }
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var inner = new ValidatorResult(instance, schema, options2, ctx);
      var count = schema.oneOf.filter(
        testSchemaNoThrow.bind(
          this,
          instance,
          options2,
          ctx,
          function(res) {
            inner.importErrors(res);
          }
        )
      ).length;
      var list = schema.oneOf.map(function(v, i) {
        return v.id && "<" + v.id + ">" || v.title && JSON.stringify(v.title) || v["$ref"] && "<" + v["$ref"] + ">" || "[subschema " + i + "]";
      });
      if (count !== 1) {
        if (options2.nestedErrors) {
          result.importErrors(inner);
        }
        result.addError({
          name: "oneOf",
          argument: list,
          message: "is not exactly one from " + list.join(",")
        });
      }
      return result;
    };
    validators.properties = function validateProperties(instance, schema, options2, ctx) {
      if (!this.types.object(instance)) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var properties = schema.properties || {};
      for (var property in properties) {
        if (typeof options2.preValidateProperty == "function") {
          options2.preValidateProperty(instance, property, properties[property], options2, ctx);
        }
        var prop = Object.hasOwnProperty.call(instance, property) ? instance[property] : void 0;
        var res = this.validateSchema(prop, properties[property], options2, ctx.makeChild(properties[property], property));
        if (res.instance !== result.instance[property]) result.instance[property] = res.instance;
        result.importErrors(res);
      }
      return result;
    };
    function testAdditionalProperty(instance, schema, options2, ctx, property, result) {
      if (!this.types.object(instance)) return;
      if (schema.properties && schema.properties[property] !== void 0) {
        return;
      }
      if (schema.additionalProperties === false) {
        result.addError({
          name: "additionalProperties",
          argument: property,
          message: "additionalProperty " + JSON.stringify(property) + " exists in instance when not allowed"
        });
      } else {
        var additionalProperties = schema.additionalProperties || {};
        if (typeof options2.preValidateProperty == "function") {
          options2.preValidateProperty(instance, property, additionalProperties, options2, ctx);
        }
        var res = this.validateSchema(instance[property], additionalProperties, options2, ctx.makeChild(additionalProperties, property));
        if (res.instance !== result.instance[property]) result.instance[property] = res.instance;
        result.importErrors(res);
      }
    }
    validators.patternProperties = function validatePatternProperties(instance, schema, options2, ctx) {
      if (!this.types.object(instance)) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var patternProperties = schema.patternProperties || {};
      for (var property in instance) {
        var test = true;
        for (var pattern in patternProperties) {
          var expr = new RegExp(pattern, "u");
          if (!expr.test(property)) {
            continue;
          }
          test = false;
          if (typeof options2.preValidateProperty == "function") {
            options2.preValidateProperty(instance, property, patternProperties[pattern], options2, ctx);
          }
          var res = this.validateSchema(instance[property], patternProperties[pattern], options2, ctx.makeChild(patternProperties[pattern], property));
          if (res.instance !== result.instance[property]) result.instance[property] = res.instance;
          result.importErrors(res);
        }
        if (test) {
          testAdditionalProperty.call(this, instance, schema, options2, ctx, property, result);
        }
      }
      return result;
    };
    validators.additionalProperties = function validateAdditionalProperties(instance, schema, options2, ctx) {
      if (!this.types.object(instance)) return;
      if (schema.patternProperties) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options2, ctx);
      for (var property in instance) {
        testAdditionalProperty.call(this, instance, schema, options2, ctx, property, result);
      }
      return result;
    };
    validators.minProperties = function validateMinProperties(instance, schema, options2, ctx) {
      if (!this.types.object(instance)) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var keys = Object.keys(instance);
      if (!(keys.length >= schema.minProperties)) {
        result.addError({
          name: "minProperties",
          argument: schema.minProperties,
          message: "does not meet minimum property length of " + schema.minProperties
        });
      }
      return result;
    };
    validators.maxProperties = function validateMaxProperties(instance, schema, options2, ctx) {
      if (!this.types.object(instance)) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var keys = Object.keys(instance);
      if (!(keys.length <= schema.maxProperties)) {
        result.addError({
          name: "maxProperties",
          argument: schema.maxProperties,
          message: "does not meet maximum property length of " + schema.maxProperties
        });
      }
      return result;
    };
    validators.items = function validateItems(instance, schema, options2, ctx) {
      var self2 = this;
      if (!this.types.array(instance)) return;
      if (!schema.items) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      instance.every(function(value, i) {
        var items = Array.isArray(schema.items) ? schema.items[i] || schema.additionalItems : schema.items;
        if (items === void 0) {
          return true;
        }
        if (items === false) {
          result.addError({
            name: "items",
            message: "additionalItems not permitted"
          });
          return false;
        }
        var res = self2.validateSchema(value, items, options2, ctx.makeChild(items, i));
        if (res.instance !== result.instance[i]) result.instance[i] = res.instance;
        result.importErrors(res);
        return true;
      });
      return result;
    };
    validators.minimum = function validateMinimum(instance, schema, options2, ctx) {
      if (!this.types.number(instance)) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var valid = true;
      if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {
        valid = instance > schema.minimum;
      } else {
        valid = instance >= schema.minimum;
      }
      if (!valid) {
        result.addError({
          name: "minimum",
          argument: schema.minimum,
          message: "must have a minimum value of " + schema.minimum
        });
      }
      return result;
    };
    validators.maximum = function validateMaximum(instance, schema, options2, ctx) {
      if (!this.types.number(instance)) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var valid;
      if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {
        valid = instance < schema.maximum;
      } else {
        valid = instance <= schema.maximum;
      }
      if (!valid) {
        result.addError({
          name: "maximum",
          argument: schema.maximum,
          message: "must have a maximum value of " + schema.maximum
        });
      }
      return result;
    };
    var validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy2(instance, schema, options2, ctx, validationType, errorMessage) {
      if (!this.types.number(instance)) return;
      var validationArgument = schema[validationType];
      if (validationArgument == 0) {
        throw new SchemaError(validationType + " cannot be zero");
      }
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var instanceDecimals = helpers.getDecimalPlaces(instance);
      var divisorDecimals = helpers.getDecimalPlaces(validationArgument);
      var maxDecimals = Math.max(instanceDecimals, divisorDecimals);
      var multiplier = Math.pow(10, maxDecimals);
      if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) {
        result.addError({
          name: validationType,
          argument: validationArgument,
          message: errorMessage + JSON.stringify(validationArgument)
        });
      }
      return result;
    };
    validators.multipleOf = function validateMultipleOf(instance, schema, options2, ctx) {
      return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options2, ctx, "multipleOf", "is not a multiple of (divisible by) ");
    };
    validators.divisibleBy = function validateDivisibleBy(instance, schema, options2, ctx) {
      return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options2, ctx, "divisibleBy", "is not divisible by (multiple of) ");
    };
    validators.required = function validateRequired(instance, schema, options2, ctx) {
      var result = new ValidatorResult(instance, schema, options2, ctx);
      if (instance === void 0 && schema.required === true) {
        result.addError({
          name: "required",
          message: "is required"
        });
      } else if (this.types.object(instance) && Array.isArray(schema.required)) {
        schema.required.forEach(function(n) {
          if (instance[n] === void 0) {
            result.addError({
              name: "required",
              argument: n,
              message: "requires property " + JSON.stringify(n)
            });
          }
        });
      }
      return result;
    };
    validators.pattern = function validatePattern(instance, schema, options2, ctx) {
      if (!this.types.string(instance)) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var regexp = new RegExp(schema.pattern, "u");
      if (!instance.match(regexp)) {
        result.addError({
          name: "pattern",
          argument: schema.pattern,
          message: "does not match pattern " + JSON.stringify(schema.pattern.toString())
        });
      }
      return result;
    };
    validators.format = function validateFormat(instance, schema, options2, ctx) {
      if (instance === void 0) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) {
        result.addError({
          name: "format",
          argument: schema.format,
          message: "does not conform to the " + JSON.stringify(schema.format) + " format"
        });
      }
      return result;
    };
    validators.minLength = function validateMinLength(instance, schema, options2, ctx) {
      if (!this.types.string(instance)) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var hsp = instance.match(/[\uDC00-\uDFFF]/g);
      var length = instance.length - (hsp ? hsp.length : 0);
      if (!(length >= schema.minLength)) {
        result.addError({
          name: "minLength",
          argument: schema.minLength,
          message: "does not meet minimum length of " + schema.minLength
        });
      }
      return result;
    };
    validators.maxLength = function validateMaxLength(instance, schema, options2, ctx) {
      if (!this.types.string(instance)) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var hsp = instance.match(/[\uDC00-\uDFFF]/g);
      var length = instance.length - (hsp ? hsp.length : 0);
      if (!(length <= schema.maxLength)) {
        result.addError({
          name: "maxLength",
          argument: schema.maxLength,
          message: "does not meet maximum length of " + schema.maxLength
        });
      }
      return result;
    };
    validators.minItems = function validateMinItems(instance, schema, options2, ctx) {
      if (!this.types.array(instance)) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      if (!(instance.length >= schema.minItems)) {
        result.addError({
          name: "minItems",
          argument: schema.minItems,
          message: "does not meet minimum length of " + schema.minItems
        });
      }
      return result;
    };
    validators.maxItems = function validateMaxItems(instance, schema, options2, ctx) {
      if (!this.types.array(instance)) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      if (!(instance.length <= schema.maxItems)) {
        result.addError({
          name: "maxItems",
          argument: schema.maxItems,
          message: "does not meet maximum length of " + schema.maxItems
        });
      }
      return result;
    };
    function testArrays(v, i, a) {
      var j, len = a.length;
      for (j = i + 1, len; j < len; j++) {
        if (helpers.deepCompareStrict(v, a[j])) {
          return false;
        }
      }
      return true;
    }
    validators.uniqueItems = function validateUniqueItems(instance, schema, options2, ctx) {
      if (schema.uniqueItems !== true) return;
      if (!this.types.array(instance)) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      if (!instance.every(testArrays)) {
        result.addError({
          name: "uniqueItems",
          message: "contains duplicate item"
        });
      }
      return result;
    };
    validators.dependencies = function validateDependencies(instance, schema, options2, ctx) {
      if (!this.types.object(instance)) return;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      for (var property in schema.dependencies) {
        if (instance[property] === void 0) {
          continue;
        }
        var dep = schema.dependencies[property];
        var childContext = ctx.makeChild(dep, property);
        if (typeof dep == "string") {
          dep = [dep];
        }
        if (Array.isArray(dep)) {
          dep.forEach(function(prop) {
            if (instance[prop] === void 0) {
              result.addError({
                // FIXME there's two different "dependencies" errors here with slightly different outputs
                // Can we make these the same? Or should we create different error types?
                name: "dependencies",
                argument: childContext.propertyPath,
                message: "property " + prop + " not found, required by " + childContext.propertyPath
              });
            }
          });
        } else {
          var res = this.validateSchema(instance, dep, options2, childContext);
          if (result.instance !== res.instance) result.instance = res.instance;
          if (res && res.errors.length) {
            result.addError({
              name: "dependencies",
              argument: childContext.propertyPath,
              message: "does not meet dependency required by " + childContext.propertyPath
            });
            result.importErrors(res);
          }
        }
      }
      return result;
    };
    validators["enum"] = function validateEnum(instance, schema, options2, ctx) {
      if (instance === void 0) {
        return null;
      }
      if (!Array.isArray(schema["enum"])) {
        throw new SchemaError("enum expects an array", schema);
      }
      var result = new ValidatorResult(instance, schema, options2, ctx);
      if (!schema["enum"].some(helpers.deepCompareStrict.bind(null, instance))) {
        result.addError({
          name: "enum",
          argument: schema["enum"],
          message: "is not one of enum values: " + schema["enum"].map(String).join(",")
        });
      }
      return result;
    };
    validators["const"] = function validateEnum(instance, schema, options2, ctx) {
      if (instance === void 0) {
        return null;
      }
      var result = new ValidatorResult(instance, schema, options2, ctx);
      if (!helpers.deepCompareStrict(schema["const"], instance)) {
        result.addError({
          name: "const",
          argument: schema["const"],
          message: "does not exactly match expected constant: " + schema["const"]
        });
      }
      return result;
    };
    validators.not = validators.disallow = function validateNot(instance, schema, options2, ctx) {
      var self2 = this;
      if (instance === void 0) return null;
      var result = new ValidatorResult(instance, schema, options2, ctx);
      var notTypes = schema.not || schema.disallow;
      if (!notTypes) return null;
      if (!Array.isArray(notTypes)) notTypes = [notTypes];
      notTypes.forEach(function(type) {
        if (self2.testType(instance, schema, options2, ctx, type)) {
          var schemaId = type && type.id && "<" + type.id + ">" || type;
          result.addError({
            name: "not",
            argument: schemaId,
            message: "is of prohibited type " + schemaId
          });
        }
      });
      return result;
    };
    module2.exports = attribute;
  }
});

// node_modules/jsonschema/lib/scan.js
var require_scan = __commonJS({
  "node_modules/jsonschema/lib/scan.js"(exports2, module2) {
    "use strict";
    var urilib = require("url");
    var helpers = require_helpers();
    module2.exports.SchemaScanResult = SchemaScanResult;
    function SchemaScanResult(found, ref) {
      this.id = found;
      this.ref = ref;
    }
    module2.exports.scan = function scan(base, schema) {
      function scanSchema(baseuri, schema2) {
        if (!schema2 || typeof schema2 != "object") return;
        if (schema2.$ref) {
          var resolvedUri = urilib.resolve(baseuri, schema2.$ref);
          ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri] + 1 : 0;
          return;
        }
        var ourBase = schema2.id ? urilib.resolve(baseuri, schema2.id) : baseuri;
        if (ourBase) {
          if (ourBase.indexOf("#") < 0) ourBase += "#";
          if (found[ourBase]) {
            if (!helpers.deepCompareStrict(found[ourBase], schema2)) {
              throw new Error("Schema <" + schema2 + "> already exists with different definition");
            }
            return found[ourBase];
          }
          found[ourBase] = schema2;
          if (ourBase[ourBase.length - 1] == "#") {
            found[ourBase.substring(0, ourBase.length - 1)] = schema2;
          }
        }
        scanArray(ourBase + "/items", Array.isArray(schema2.items) ? schema2.items : [schema2.items]);
        scanArray(ourBase + "/extends", Array.isArray(schema2.extends) ? schema2.extends : [schema2.extends]);
        scanSchema(ourBase + "/additionalItems", schema2.additionalItems);
        scanObject(ourBase + "/properties", schema2.properties);
        scanSchema(ourBase + "/additionalProperties", schema2.additionalProperties);
        scanObject(ourBase + "/definitions", schema2.definitions);
        scanObject(ourBase + "/patternProperties", schema2.patternProperties);
        scanObject(ourBase + "/dependencies", schema2.dependencies);
        scanArray(ourBase + "/disallow", schema2.disallow);
        scanArray(ourBase + "/allOf", schema2.allOf);
        scanArray(ourBase + "/anyOf", schema2.anyOf);
        scanArray(ourBase + "/oneOf", schema2.oneOf);
        scanSchema(ourBase + "/not", schema2.not);
      }
      function scanArray(baseuri, schemas) {
        if (!Array.isArray(schemas)) return;
        for (var i = 0; i < schemas.length; i++) {
          scanSchema(baseuri + "/" + i, schemas[i]);
        }
      }
      function scanObject(baseuri, schemas) {
        if (!schemas || typeof schemas != "object") return;
        for (var p in schemas) {
          scanSchema(baseuri + "/" + p, schemas[p]);
        }
      }
      var found = {};
      var ref = {};
      scanSchema(base, schema);
      return new SchemaScanResult(found, ref);
    };
  }
});

// node_modules/jsonschema/lib/validator.js
var require_validator = __commonJS({
  "node_modules/jsonschema/lib/validator.js"(exports2, module2) {
    "use strict";
    var urilib = require("url");
    var attribute = require_attribute();
    var helpers = require_helpers();
    var scanSchema = require_scan().scan;
    var ValidatorResult = helpers.ValidatorResult;
    var SchemaError = helpers.SchemaError;
    var SchemaContext = helpers.SchemaContext;
    var anonymousBase = "/";
    var Validator = function Validator2() {
      this.customFormats = Object.create(Validator2.prototype.customFormats);
      this.schemas = {};
      this.unresolvedRefs = [];
      this.types = Object.create(types);
      this.attributes = Object.create(attribute.validators);
    };
    Validator.prototype.customFormats = {};
    Validator.prototype.schemas = null;
    Validator.prototype.types = null;
    Validator.prototype.attributes = null;
    Validator.prototype.unresolvedRefs = null;
    Validator.prototype.addSchema = function addSchema(schema, base) {
      var self2 = this;
      if (!schema) {
        return null;
      }
      var scan = scanSchema(base || anonymousBase, schema);
      var ourUri = base || schema.id;
      for (var uri in scan.id) {
        this.schemas[uri] = scan.id[uri];
      }
      for (var uri in scan.ref) {
        this.unresolvedRefs.push(uri);
      }
      this.unresolvedRefs = this.unresolvedRefs.filter(function(uri2) {
        return typeof self2.schemas[uri2] === "undefined";
      });
      return this.schemas[ourUri];
    };
    Validator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {
      if (!Array.isArray(schemas)) return;
      for (var i = 0; i < schemas.length; i++) {
        this.addSubSchema(baseuri, schemas[i]);
      }
    };
    Validator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {
      if (!schemas || typeof schemas != "object") return;
      for (var p in schemas) {
        this.addSubSchema(baseuri, schemas[p]);
      }
    };
    Validator.prototype.setSchemas = function setSchemas(schemas) {
      this.schemas = schemas;
    };
    Validator.prototype.getSchema = function getSchema(urn) {
      return this.schemas[urn];
    };
    Validator.prototype.validate = function validate(instance, schema, options2, ctx) {
      if (!options2) {
        options2 = {};
      }
      var propertyName = options2.propertyName || "instance";
      var base = urilib.resolve(options2.base || anonymousBase, schema.id || "");
      if (!ctx) {
        ctx = new SchemaContext(schema, options2, propertyName, base, Object.create(this.schemas));
        if (!ctx.schemas[base]) {
          ctx.schemas[base] = schema;
        }
        var found = scanSchema(base, schema);
        for (var n in found.id) {
          var sch = found.id[n];
          ctx.schemas[n] = sch;
        }
      }
      if (schema) {
        var result = this.validateSchema(instance, schema, options2, ctx);
        if (!result) {
          throw new Error("Result undefined");
        }
        return result;
      }
      throw new SchemaError("no schema specified", schema);
    };
    function shouldResolve(schema) {
      var ref = typeof schema === "string" ? schema : schema.$ref;
      if (typeof ref == "string") return ref;
      return false;
    }
    Validator.prototype.validateSchema = function validateSchema(instance, schema, options2, ctx) {
      var result = new ValidatorResult(instance, schema, options2, ctx);
      if (typeof schema === "boolean") {
        if (schema === true) {
          schema = {};
        } else if (schema === false) {
          schema = { type: [] };
        }
      } else if (!schema) {
        throw new Error("schema is undefined");
      }
      if (schema["extends"]) {
        if (Array.isArray(schema["extends"])) {
          var schemaobj = { schema, ctx };
          schema["extends"].forEach(this.schemaTraverser.bind(this, schemaobj));
          schema = schemaobj.schema;
          schemaobj.schema = null;
          schemaobj.ctx = null;
          schemaobj = null;
        } else {
          schema = helpers.deepMerge(schema, this.superResolve(schema["extends"], ctx));
        }
      }
      var switchSchema = shouldResolve(schema);
      if (switchSchema) {
        var resolved = this.resolve(schema, switchSchema, ctx);
        var subctx = new SchemaContext(resolved.subschema, options2, ctx.propertyPath, resolved.switchSchema, ctx.schemas);
        return this.validateSchema(instance, resolved.subschema, options2, subctx);
      }
      var skipAttributes = options2 && options2.skipAttributes || [];
      for (var key in schema) {
        if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {
          var validatorErr = null;
          var validator = this.attributes[key];
          if (validator) {
            validatorErr = validator.call(this, instance, schema, options2, ctx);
          } else if (options2.allowUnknownAttributes === false) {
            throw new SchemaError("Unsupported attribute: " + key, schema);
          }
          if (validatorErr) {
            result.importErrors(validatorErr);
          }
        }
      }
      if (typeof options2.rewrite == "function") {
        var value = options2.rewrite.call(this, instance, schema, options2, ctx);
        result.instance = value;
      }
      return result;
    };
    Validator.prototype.schemaTraverser = function schemaTraverser(schemaobj, s) {
      schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));
    };
    Validator.prototype.superResolve = function superResolve(schema, ctx) {
      var ref = shouldResolve(schema);
      if (ref) {
        return this.resolve(schema, ref, ctx).subschema;
      }
      return schema;
    };
    Validator.prototype.resolve = function resolve(schema, switchSchema, ctx) {
      switchSchema = ctx.resolve(switchSchema);
      if (ctx.schemas[switchSchema]) {
        return { subschema: ctx.schemas[switchSchema], switchSchema };
      }
      var parsed = urilib.parse(switchSchema);
      var fragment = parsed && parsed.hash;
      var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);
      if (!document || !ctx.schemas[document]) {
        throw new SchemaError("no such schema <" + switchSchema + ">", schema);
      }
      var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));
      if (subschema === void 0) {
        throw new SchemaError("no such schema " + fragment + " located in <" + document + ">", schema);
      }
      return { subschema, switchSchema };
    };
    Validator.prototype.testType = function validateType(instance, schema, options2, ctx, type) {
      if (typeof this.types[type] == "function") {
        return this.types[type].call(this, instance);
      }
      if (type && typeof type == "object") {
        var res = this.validateSchema(instance, type, options2, ctx);
        return res === void 0 || !(res && res.errors.length);
      }
      return true;
    };
    var types = Validator.prototype.types = {};
    types.string = function testString(instance) {
      return typeof instance == "string";
    };
    types.number = function testNumber(instance) {
      return typeof instance == "number" && isFinite(instance);
    };
    types.integer = function testInteger(instance) {
      return typeof instance == "number" && instance % 1 === 0;
    };
    types.boolean = function testBoolean(instance) {
      return typeof instance == "boolean";
    };
    types.array = function testArray(instance) {
      return Array.isArray(instance);
    };
    types["null"] = function testNull(instance) {
      return instance === null;
    };
    types.date = function testDate(instance) {
      return instance instanceof Date;
    };
    types.any = function testAny(instance) {
      return true;
    };
    types.object = function testObject(instance) {
      return instance && typeof instance === "object" && !Array.isArray(instance) && !(instance instanceof Date);
    };
    module2.exports = Validator;
  }
});

// node_modules/jsonschema/lib/index.js
var require_lib = __commonJS({
  "node_modules/jsonschema/lib/index.js"(exports2, module2) {
    "use strict";
    var Validator = module2.exports.Validator = require_validator();
    module2.exports.ValidatorResult = require_helpers().ValidatorResult;
    module2.exports.ValidationError = require_helpers().ValidationError;
    module2.exports.SchemaError = require_helpers().SchemaError;
    module2.exports.SchemaScanResult = require_scan().SchemaScanResult;
    module2.exports.scan = require_scan().scan;
    module2.exports.validate = function(instance, schema, options2) {
      var v = new Validator();
      return v.validate(instance, schema, options2);
    };
  }
});

// node_modules/electrodb/src/validations.js
var require_validations = __commonJS({
  "node_modules/electrodb/src/validations.js"(exports2, module2) {
    var e = require_errors();
    var { KeyCasing } = require_types();
    var Validator = require_lib().Validator;
    Validator.prototype.customFormats.isFunction = function(input) {
      return typeof input === "function";
    };
    Validator.prototype.customFormats.isFunctionOrString = function(input) {
      return typeof input === "function" || typeof input === "string";
    };
    Validator.prototype.customFormats.isFunctionOrRegexp = function(input) {
      return typeof input === "function" || input instanceof RegExp;
    };
    var v = new Validator();
    var Attribute = {
      id: "/Attribute",
      type: ["object", "string", "array"],
      required: ["type"],
      properties: {
        type: {
          // todo: only specific values
          type: ["string", "array"]
          // enum: ["string", "number", "boolean", "enum"],
        },
        field: {
          type: "string"
        },
        hidden: {
          type: "boolean"
        },
        watch: {
          type: ["array", "string"],
          items: {
            type: "string"
          }
        },
        label: {
          type: "string"
        },
        readOnly: {
          type: "boolean"
        },
        required: {
          type: "boolean"
        },
        cast: {
          type: "string",
          enum: ["string", "number"]
        },
        default: {
          type: "any"
        },
        validate: {
          type: "any",
          format: "isFunctionOrRegexp"
        },
        get: {
          type: "any",
          format: "isFunction"
        },
        set: {
          type: "any",
          format: "isFunction"
        },
        padding: {
          type: "object",
          required: ["length", "char"],
          properties: {
            length: {
              type: "number"
            },
            char: {
              type: "string"
            }
          }
        }
      }
    };
    var Index = {
      id: "/Index",
      type: "object",
      properties: {
        pk: {
          type: "object",
          required: true,
          properties: {
            field: {
              type: "string",
              required: true
            },
            facets: {
              type: ["array", "string"],
              items: {
                type: "string"
              },
              required: false
            },
            composite: {
              type: ["array"],
              items: {
                type: "string"
              },
              required: false
            },
            template: {
              type: "string",
              required: false
            },
            casing: {
              type: "string",
              enum: ["upper", "lower", "none", "default"],
              required: false
            },
            cast: {
              type: "string",
              enum: ["string", "number"],
              required: false
            },
            scope: {
              type: "string",
              required: false
            }
          }
        },
        sk: {
          type: "object",
          required: ["field"],
          properties: {
            field: {
              type: "string",
              required: true
            },
            facets: {
              type: ["array", "string"],
              required: false,
              items: {
                type: "string"
              }
            },
            composite: {
              type: ["array"],
              required: false,
              items: {
                type: "string"
              }
            },
            template: {
              type: "string",
              required: false
            },
            casing: {
              type: "string",
              enum: ["upper", "lower", "none", "default"],
              required: false
            },
            cast: {
              type: "string",
              enum: ["string", "number"],
              required: false
            }
          }
        },
        index: {
          type: "string"
        },
        collection: {
          type: ["array", "string"]
        },
        type: {
          type: "string",
          enum: ["clustered", "isolated"],
          required: false
        },
        condition: {
          type: "any",
          required: false,
          format: "isFunction"
        }
      }
    };
    var Modelv1 = {
      type: "object",
      required: true,
      properties: {
        model: {
          type: "object",
          required: true,
          properties: {
            entity: {
              type: "string",
              required: true
            },
            version: {
              type: "string",
              required: true
            },
            service: {
              type: "string",
              required: true
            }
          }
        },
        table: {
          type: "string"
        },
        attributes: {
          type: "object",
          patternProperties: {
            ["."]: { $ref: "/Attribute" }
          }
        },
        indexes: {
          type: "object",
          minProperties: 1,
          patternProperties: {
            ["."]: { $ref: "/Index" }
          }
        },
        filters: { $ref: "/Filters" }
      },
      required: ["model", "attributes", "indexes"]
    };
    var ModelBeta = {
      type: "object",
      required: true,
      properties: {
        service: {
          type: "string",
          required: true
        },
        entity: {
          type: "string",
          required: true
        },
        table: {
          type: "string"
        },
        version: {
          type: "string"
        },
        attributes: {
          type: "object",
          patternProperties: {
            ["."]: { $ref: "/Attribute" }
          }
        },
        indexes: {
          type: "object",
          minProperties: 1,
          patternProperties: {
            ["."]: { $ref: "/Index" }
          }
        },
        filters: { $ref: "/Filters" }
      },
      required: ["attributes", "indexes"]
    };
    var Filters = {
      id: "/Filters",
      type: "object",
      patternProperties: {
        ["."]: {
          type: "any",
          format: "isFunction",
          message: "Requires function"
        }
      }
    };
    v.addSchema(Attribute, "/Attribute");
    v.addSchema(Index, "/Index");
    v.addSchema(Filters, "/Filters");
    v.addSchema(ModelBeta, "/ModelBeta");
    v.addSchema(Modelv1, "/Modelv1");
    function validateModel(model = {}) {
      let betaErrors = v.validate(model, "/ModelBeta").errors;
      if (betaErrors.length) {
        let errors = v.validate(model, "/Modelv1").errors;
        if (errors.length) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidModel,
            errors.map((err) => {
              let message = `${err.property}`;
              switch (err.argument) {
                case "isFunction":
                  return `${message} must be a function`;
                case "isFunctionOrString":
                  return `${message} must be either a function or string`;
                case "isFunctionOrRegexp":
                  return `${message} must be either a function or Regexp`;
                default:
                  return `${message} ${err.message}`;
              }
            }).join(", ")
          );
        }
      }
    }
    function testModel(model) {
      let isModel = false;
      let error = "";
      try {
        validateModel(model);
        isModel = true;
      } catch (err) {
        error = err.message;
      }
      return [isModel, error];
    }
    function isStringHasLength(str) {
      return typeof str === "string" && str.length > 0;
    }
    function isObjectHasLength(obj) {
      return typeof obj === "object" && Object.keys(obj).length > 0;
    }
    function isArrayHasLength(arr) {
      return Array.isArray(arr) && arr.length > 0;
    }
    function isNameEntityRecordType(entityRecord) {
      return isObjectHasLength(entityRecord) && Object.values(entityRecord).find((value) => {
        return value._instance !== void 0;
      });
    }
    function isNameModelRecordType(modelRecord) {
      return isObjectHasLength(modelRecord) && Object.values(modelRecord).find((value) => {
        return value.model && isStringHasLength(value.model.entity) && isStringHasLength(value.model.version) && isStringHasLength(value.model.service);
      });
    }
    function isBetaServiceConfig(serviceConfig) {
      return isObjectHasLength(serviceConfig) && (isStringHasLength(serviceConfig.service) || isStringHasLength(serviceConfig.name)) && isStringHasLength(serviceConfig.version);
    }
    function isFunction(value) {
      return typeof value === "function";
    }
    function stringArrayMatch(arr1, arr2) {
      let areArrays = Array.isArray(arr1) && Array.isArray(arr2);
      let match = areArrays && arr1.length === arr2.length;
      for (let i = 0; i < arr1.length; i++) {
        if (!match) {
          break;
        }
        match = isStringHasLength(arr1[i]) && arr1[i] === arr2[i];
      }
      return match;
    }
    function isMatchingCasing(casing1, casing2) {
      const equivalentCasings = [KeyCasing.default, KeyCasing.lower];
      if (isStringHasLength(casing1) && isStringHasLength(casing2)) {
        let isRealCase = KeyCasing[casing1.toLowerCase()] !== void 0;
        let casingsMatch = casing1 === casing2;
        let casingsAreEquivalent = [casing1, casing2].every((casing) => {
          return casing === KeyCasing.lower || casing === KeyCasing.default;
        });
        return isRealCase && (casingsMatch || casingsAreEquivalent);
      } else if (isStringHasLength(casing1)) {
        return equivalentCasings.includes(casing1.toLowerCase());
      } else if (isStringHasLength(casing2)) {
        return equivalentCasings.includes(casing2.toLowerCase());
      } else {
        return casing1 === void 0 && casing2 === void 0;
      }
    }
    module2.exports = {
      testModel,
      isFunction,
      stringArrayMatch,
      isMatchingCasing,
      isArrayHasLength,
      isStringHasLength,
      isObjectHasLength,
      isBetaServiceConfig,
      isNameModelRecordType,
      isNameEntityRecordType,
      model: validateModel
    };
  }
});

// node_modules/electrodb/src/util.js
var require_util = __commonJS({
  "node_modules/electrodb/src/util.js"(exports2, module2) {
    var t = require_types();
    var e = require_errors();
    var v = require_validations();
    function parseJSONPath(path = "") {
      if (typeof path !== "string") {
        throw new Error("Path must be a string");
      }
      path = path.replace(/\[/g, ".");
      path = path.replace(/\]/g, "");
      return path.split(".").filter((part) => part !== "");
    }
    function genericizeJSONPath(path = "") {
      return path.replace(/\[\d+\]/g, "[*]");
    }
    function getInstanceType(instance = {}) {
      let [isModel, errors] = v.testModel(instance);
      if (!instance || Object.keys(instance).length === 0) {
        return "";
      } else if (isModel) {
        return t.ElectroInstanceTypes.model;
      } else if (instance._instance === t.ElectroInstance.entity) {
        return t.ElectroInstanceTypes.entity;
      } else if (instance._instance === t.ElectroInstance.service) {
        return t.ElectroInstanceTypes.service;
      } else if (instance._instance === t.ElectroInstance.electro) {
        return t.ElectroInstanceTypes.electro;
      } else {
        return "";
      }
    }
    function getModelVersion(model = {}) {
      let nameOnRoot = model && v.isStringHasLength(model.entity);
      let nameInModelNamespace = model && model.model && v.isStringHasLength(model.model.entity);
      if (nameInModelNamespace) {
        return t.ModelVersions.v1;
      } else if (nameOnRoot) {
        return t.ModelVersions.beta;
      } else {
        return "";
      }
    }
    function applyBetaModelOverrides(model = {}, { service = "", version = "", table: table2 = "" } = {}) {
      let type = getModelVersion(model);
      if (type !== t.ModelVersions.beta) {
        throw new Error("Invalid model");
      }
      let copy = Object.assign({}, model);
      if (v.isStringHasLength(service)) {
        copy.service = service;
      }
      if (v.isStringHasLength(version)) {
        copy.version = version;
      }
      if (v.isStringHasLength(table2)) {
        copy.table = table2;
      }
      return copy;
    }
    function batchItems(arr = [], size) {
      if (isNaN(size)) {
        throw new Error("Batch size must be of type number");
      }
      let batched = [];
      for (let i = 0; i < arr.length; i++) {
        let partition = Math.floor(i / size);
        batched[partition] = batched[partition] || [];
        batched[partition].push(arr[i]);
      }
      return batched;
    }
    function commaSeparatedString(array = [], prefix = '"', postfix = '"') {
      return array.map((value) => `${prefix}${value}${postfix}`).join(", ");
    }
    function formatStringCasing(str, casing, defaultCase) {
      if (typeof str !== "string") {
        return str;
      }
      let strCase = defaultCase;
      if (v.isStringHasLength(casing) && typeof t.KeyCasing[casing] === "string") {
        strCase = t.KeyCasing.default === casing ? defaultCase : t.KeyCasing[casing];
      }
      switch (strCase) {
        case t.KeyCasing.upper:
          return str.toUpperCase();
        case t.KeyCasing.none:
          return str;
        case t.KeyCasing.lower:
          return str.toLowerCase();
        case t.KeyCasing.default:
        default:
          return str;
      }
    }
    function formatKeyCasing(str, casing) {
      return formatStringCasing(str, casing, t.KeyCasing.lower);
    }
    function formatAttributeCasing(str, casing) {
      return formatStringCasing(str, casing, t.KeyCasing.none);
    }
    function formatIndexNameForDisplay(index) {
      if (index) {
        return index;
      } else {
        return "(Primary Index)";
      }
    }
    var BatchGetOrderMaintainer = class {
      constructor({ table: table2, enabled, keyFormatter }) {
        this.table = table2;
        this.enabled = enabled;
        this.keyFormatter = keyFormatter;
        this.batchIndexMap = /* @__PURE__ */ new Map();
        this.currentSlot = 0;
      }
      getSize() {
        return this.batchIndexMap.size;
      }
      getOrder(item) {
        const key = this.keyFormatter(item);
        const value = this.batchIndexMap.get(key);
        if (value === void 0) {
          return -1;
        }
        return value;
      }
      defineOrder(parameters = []) {
        if (this.enabled) {
          for (let i = 0; i < parameters.length; i++) {
            const batchParams = parameters[i];
            const recordKeys = batchParams && batchParams.RequestItems && batchParams.RequestItems[this.table] && batchParams.RequestItems[this.table].Keys || [];
            for (const recordKey of recordKeys) {
              const indexMapKey = this.keyFormatter(recordKey);
              this.batchIndexMap.set(indexMapKey, this.currentSlot++);
            }
          }
        }
      }
    };
    function getUnique(arr1, arr2) {
      return Array.from(/* @__PURE__ */ new Set([...arr1, ...arr2]));
    }
    var cursorFormatter = {
      serialize: (key) => {
        if (!key) {
          return null;
        } else if (typeof val !== "string") {
          key = JSON.stringify(key);
        }
        return Buffer.from(key).toString("base64url");
      },
      deserialize: (cursor) => {
        if (!cursor) {
          return void 0;
        } else if (typeof cursor !== "string") {
          throw new Error(
            `Invalid cursor provided, expected type 'string' recieved: ${JSON.stringify(
              cursor
            )}`
          );
        }
        try {
          return JSON.parse(Buffer.from(cursor, "base64url").toString("utf8"));
        } catch (err) {
          throw new Error("Unable to parse cursor");
        }
      }
    };
    function removeFixings({ prefix = "", postfix = "", value = "" } = {}) {
      const start = value.toLowerCase().startsWith(prefix.toLowerCase()) ? prefix.length : 0;
      const end = value.length - (value.toLowerCase().endsWith(postfix.toLowerCase()) ? postfix.length : 0);
      let formatted = "";
      for (let i = start; i < end; i++) {
        formatted += value[i];
      }
      return formatted;
    }
    function addPadding({ padding = {}, value = "" } = {}) {
      return value.padStart(padding.length, padding.char);
    }
    function removePadding({ padding = {}, value = "" } = {}) {
      if (!padding.length || value.length >= padding.length) {
        return value;
      }
      let formatted = "";
      let useRemaining = false;
      for (let i = 0; i < value.length; i++) {
        const char = value[i];
        if (useRemaining || i >= padding.length) {
          formatted += char;
        } else if (char !== padding.char) {
          formatted += char;
          useRemaining = true;
        }
      }
      return formatted;
    }
    function shiftSortOrder(str = "", codePoint) {
      let newString = "";
      for (let i = 0; i < str.length; i++) {
        const isLast = i === str.length - 1;
        let char = str[i];
        if (isLast) {
          char = String.fromCodePoint(char.codePointAt(0) + codePoint);
        }
        newString += char;
      }
      return newString;
    }
    function getFirstDefined(...params) {
      return params.find((val2) => val2 !== void 0);
    }
    function regexpEscape(str) {
      return str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    module2.exports = {
      getUnique,
      batchItems,
      addPadding,
      regexpEscape,
      removePadding,
      removeFixings,
      parseJSONPath,
      shiftSortOrder,
      getFirstDefined,
      getInstanceType,
      getModelVersion,
      formatKeyCasing,
      cursorFormatter,
      genericizeJSONPath,
      commaSeparatedString,
      formatAttributeCasing,
      applyBetaModelOverrides,
      formatIndexNameForDisplay,
      BatchGetOrderMaintainer
    };
  }
});

// node_modules/electrodb/src/set.js
var require_set = __commonJS({
  "node_modules/electrodb/src/set.js"(exports2, module2) {
    var memberTypeToSetType = {
      String: "String",
      Number: "Number",
      NumberValue: "Number",
      Binary: "Binary",
      string: "String",
      number: "Number"
    };
    var DynamoDBSet = class {
      constructor(list, type) {
        this.wrapperName = "Set";
        this.type = memberTypeToSetType[type];
        if (this.type === void 0) {
          new Error(`Invalid Set type: ${type}`);
        }
        this.values = Array.from(new Set([].concat(list)));
      }
      initialize(list, validate) {
      }
      detectType() {
        return memberTypeToSetType[typeof this.values[0]];
      }
      validate() {
      }
      toJSON() {
        return this.values;
      }
    };
    module2.exports = { DynamoDBSet };
  }
});

// node_modules/electrodb/src/schema.js
var require_schema = __commonJS({
  "node_modules/electrodb/src/schema.js"(exports2, module2) {
    var {
      CastTypes,
      ValueTypes,
      KeyCasing,
      AttributeTypes,
      AttributeMutationMethods,
      AttributeWildCard,
      PathTypes,
      TableIndex,
      ItemOperations,
      DataOptions
    } = require_types();
    var AttributeTypeNames = Object.keys(AttributeTypes);
    var ValidFacetTypes = [
      AttributeTypes.string,
      AttributeTypes.number,
      AttributeTypes.boolean,
      AttributeTypes.enum
    ];
    var e = require_errors();
    var u = require_util();
    var v = require_validations();
    var { DynamoDBSet } = require_set();
    function getValueType(value) {
      if (value === void 0) {
        return ValueTypes.undefined;
      } else if (value === null) {
        return ValueTypes.null;
      } else if (typeof value === "string") {
        return ValueTypes.string;
      } else if (typeof value === "number") {
        return ValueTypes.number;
      } else if (typeof value === "boolean") {
        return ValueTypes.boolean;
      } else if (Array.isArray(value)) {
        return ValueTypes.array;
      } else if (value.wrapperName === "Set") {
        return ValueTypes.aws_set;
      } else if (value.constructor.name === "Set") {
        return ValueTypes.set;
      } else if (value.constructor.name === "Map") {
        return ValueTypes.map;
      } else if (value.constructor.name === "Object") {
        return ValueTypes.object;
      } else {
        return ValueTypes.unknown;
      }
    }
    var AttributeTraverser = class _AttributeTraverser {
      constructor(parentTraverser) {
        if (parentTraverser instanceof _AttributeTraverser) {
          this.parent = parentTraverser;
          this.paths = this.parent.paths;
        } else {
          this.parent = null;
          this.paths = /* @__PURE__ */ new Map();
        }
        this.children = /* @__PURE__ */ new Map();
      }
      setChild(name, attribute) {
        this.children.set(name, attribute);
      }
      asChild(name, attribute) {
        if (this.parent) {
          this.parent.setChild(name, attribute);
        }
      }
      setPath(path, attribute) {
        if (this.parent) {
          this.parent.setPath(path, attribute);
        }
        this.paths.set(path, attribute);
      }
      getPath(path) {
        path = u.genericizeJSONPath(path);
        if (this.parent) {
          return this.parent.getPath(path);
        }
        return this.paths.get(path);
      }
      getChild(name) {
        return this.children.get(name);
      }
      getAllChildren() {
        return this.children.entries();
      }
      getAll() {
        if (this.parent) {
          return this.parent.getAll();
        }
        return this.paths.entries();
      }
    };
    var Attribute = class _Attribute {
      constructor(definition = {}) {
        this.name = definition.name;
        this.field = definition.field || definition.name;
        this.label = definition.label;
        this.readOnly = !!definition.readOnly;
        this.hidden = !!definition.hidden;
        this.required = !!definition.required;
        this.cast = this._makeCast(definition.name, definition.cast);
        this.default = this._makeDefault(definition.default);
        this.validate = this._makeValidate(definition.validate);
        this.isKeyField = !!definition.isKeyField;
        this.unformat = this._makeDestructureKey(definition);
        this.format = this._makeStructureKey(definition);
        this.padding = definition.padding;
        this.applyFixings = this._makeApplyFixings(definition);
        this.applyPadding = this._makePadding(definition);
        this.indexes = [...definition.indexes || []];
        let { isWatched, isWatcher, watchedBy, watching, watchAll } = _Attribute._destructureWatcher(definition);
        this._isWatched = isWatched;
        this._isWatcher = isWatcher;
        this.watchedBy = watchedBy;
        this.watching = watching;
        this.watchAll = watchAll;
        let { type, enumArray } = this._makeType(this.name, definition);
        this.type = type;
        this.enumArray = enumArray;
        this.parentType = definition.parentType;
        this.parentPath = definition.parentPath;
        const pathType = this.getPathType(this.type, this.parentType);
        const path = _Attribute.buildPath(this.name, pathType, this.parentPath);
        const fieldPath = _Attribute.buildPath(
          this.field,
          pathType,
          this.parentType
        );
        this.path = path;
        this.fieldPath = fieldPath;
        this.traverser = new AttributeTraverser(definition.traverser);
        this.traverser.setPath(this.path, this);
        this.traverser.setPath(this.fieldPath, this);
        this.traverser.asChild(this.name, this);
        this.parent = { parentType: this.type, parentPath: this.path };
        this.get = this._makeGet(definition.get);
        this.set = this._makeSet(definition.set);
        this.getClient = definition.getClient;
      }
      static buildChildAttributes(type, definition, parent) {
        let items;
        let properties;
        if (type === AttributeTypes.list) {
          items = _Attribute.buildChildListItems(definition, parent);
        } else if (type === AttributeTypes.set) {
          items = _Attribute.buildChildSetItems(definition, parent);
        } else if (type === AttributeTypes.map) {
          properties = _Attribute.buildChildMapProperties(definition, parent);
        }
        return { items, properties };
      }
      static buildChildListItems(definition, parent) {
        const { items, getClient } = definition;
        const prop = { ...items, ...parent };
        return Schema.normalizeAttributes(
          { "*": prop },
          {},
          { getClient, traverser: parent.traverser, parent }
        ).attributes["*"];
      }
      static buildChildSetItems(definition, parent) {
        const { items, getClient } = definition;
        const allowedTypes = [
          AttributeTypes.string,
          AttributeTypes.boolean,
          AttributeTypes.number,
          AttributeTypes.enum
        ];
        if (!Array.isArray(items) && !allowedTypes.includes(items)) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidAttributeDefinition,
            `Invalid "items" definition for Set attribute: "${definition.path}". Acceptable item types include ${u.commaSeparatedString(
              allowedTypes
            )}`
          );
        }
        const prop = { type: items, ...parent };
        return Schema.normalizeAttributes(
          { prop },
          {},
          { getClient, traverser: parent.traverser, parent }
        ).attributes.prop;
      }
      static buildChildMapProperties(definition, parent) {
        const { properties, getClient } = definition;
        if (!properties || typeof properties !== "object") {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidAttributeDefinition,
            `Invalid "properties" definition for Map attribute: "${definition.path}". The "properties" definition must describe the attributes that the Map will accept`
          );
        }
        const attributes2 = {};
        for (let name of Object.keys(properties)) {
          attributes2[name] = { ...properties[name], ...parent };
        }
        return Schema.normalizeAttributes(
          attributes2,
          {},
          { getClient, traverser: parent.traverser, parent }
        );
      }
      static buildPath(name, type, parentPath) {
        if (!parentPath) return name;
        switch (type) {
          case AttributeTypes.string:
          case AttributeTypes.number:
          case AttributeTypes.boolean:
          case AttributeTypes.map:
          case AttributeTypes.set:
          case AttributeTypes.list:
          case AttributeTypes.enum:
            return `${parentPath}.${name}`;
          case PathTypes.item:
            return `${parentPath}[*]`;
          case AttributeTypes.any:
          default:
            return `${parentPath}.*`;
        }
      }
      static _destructureWatcher(definition) {
        let watchAll = !!definition.watchAll;
        let watchingArr = watchAll ? [] : [...definition.watching || []];
        let watchedByArr = [...definition.watchedBy || []];
        let isWatched = watchedByArr.length > 0;
        let isWatcher = watchingArr.length > 0;
        let watchedBy = {};
        let watching = {};
        for (let watched of watchedByArr) {
          watchedBy[watched] = watched;
        }
        for (let attribute of watchingArr) {
          watching[attribute] = attribute;
        }
        return {
          watchAll,
          watching,
          watchedBy,
          isWatched,
          isWatcher
        };
      }
      _makeGet(get) {
        this._checkGetSet(get, "get");
        const getter = get || ((attr) => attr);
        return (value, siblings) => {
          if (this.hidden) {
            return;
          }
          value = this.unformat(value);
          return getter(value, siblings);
        };
      }
      _makeSet(set) {
        this._checkGetSet(set, "set");
        return set || ((attr) => attr);
      }
      _makeApplyFixings({
        prefix = "",
        postfix = "",
        casing = KeyCasing.none
      } = {}) {
        return (value) => {
          if (value === void 0) {
            return;
          }
          if ([AttributeTypes.string, AttributeTypes.enum].includes(this.type)) {
            value = `${prefix}${value}${postfix}`;
          }
          return u.formatAttributeCasing(value, casing);
        };
      }
      _makeStructureKey() {
        return (key) => {
          return this.applyPadding(key);
        };
      }
      _isPaddingEligible(padding = {}) {
        return !!padding && padding.length && v.isStringHasLength(padding.char);
      }
      _makePadding({ padding = {} }) {
        return (value) => {
          if (typeof value !== "string") {
            return value;
          } else if (this._isPaddingEligible(padding)) {
            return u.addPadding({ padding, value });
          } else {
            return value;
          }
        };
      }
      _makeRemoveFixings({
        prefix = "",
        postfix = "",
        casing = KeyCasing.none
      } = {}) {
        return (key) => {
          let value = "";
          if (![AttributeTypes.string, AttributeTypes.enum].includes(this.type) || typeof key !== "string") {
            value = key;
          } else if (prefix.length > 0 && key.length > prefix.length) {
            for (let i = prefix.length; i < key.length - postfix.length; i++) {
              value += key[i];
            }
          } else {
            value = key;
          }
          return value;
        };
      }
      _makeDestructureKey({
        prefix = "",
        postfix = "",
        casing = KeyCasing.none,
        padding = {}
      } = {}) {
        return (key) => {
          let value = "";
          if (![AttributeTypes.string, AttributeTypes.enum].includes(this.type) || typeof key !== "string") {
            return key;
          } else if (key.length > prefix.length) {
            value = u.removeFixings({ prefix, postfix, value: key });
          } else {
            value = key;
          }
          return value;
        };
      }
      acceptable(val2) {
        return val2 !== void 0;
      }
      getPathType(type, parentType) {
        if (parentType === AttributeTypes.list || parentType === AttributeTypes.set) {
          return PathTypes.item;
        }
        return type;
      }
      getAttribute(path) {
        return this.traverser.getPath(path);
      }
      getChild(path) {
        if (this.type === AttributeTypes.any) {
          return this;
        } else if (!isNaN(path) && (this.type === AttributeTypes.list || this.type === AttributeTypes.set)) {
          return this.traverser.getChild("*");
        } else {
          return this.traverser.getChild(path);
        }
      }
      _checkGetSet(val2, type) {
        if (typeof val2 !== "function" && val2 !== void 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidAttributeDefinition,
            `Invalid "${type}" property for attribute ${this.path}. Please ensure value is a function or undefined.`
          );
        }
      }
      _makeCast(name, cast) {
        if (cast !== void 0 && !CastTypes.includes(cast)) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidAttributeDefinition,
            `Invalid "cast" property for attribute: "${name}". Acceptable types include ${CastTypes.join(
              ", "
            )}`
          );
        } else if (cast === AttributeTypes.string) {
          return (val2) => {
            if (val2 === void 0) {
              throw new Error(
                `Attribute ${name} is undefined and cannot be cast to type ${cast}`
              );
            } else if (typeof val2 === "string") {
              return val2;
            } else {
              return JSON.stringify(val2);
            }
          };
        } else if (cast === AttributeTypes.number) {
          return (val2) => {
            if (val2 === void 0) {
              throw new Error(
                `Attribute ${name} is undefined and cannot be cast to type ${cast}`
              );
            } else if (typeof val2 === "number") {
              return val2;
            } else {
              let results = Number(val2);
              if (isNaN(results)) {
                throw new Error(
                  `Attribute ${name} cannot be cast to type ${cast}. Doing so results in NaN`
                );
              } else {
                return results;
              }
            }
          };
        } else {
          return (val2) => val2;
        }
      }
      _makeValidate(definition) {
        if (typeof definition === "function") {
          return (val2) => {
            try {
              let isValid = !!definition(val2);
              return [
                isValid,
                isValid ? [] : [
                  new e.ElectroUserValidationError(
                    this.path,
                    "Invalid value provided"
                  )
                ]
              ];
            } catch (err) {
              return [false, [new e.ElectroUserValidationError(this.path, err)]];
            }
          };
        } else if (definition instanceof RegExp) {
          return (val2) => {
            if (val2 === void 0) {
              return [true, []];
            }
            let isValid = definition.test(val2);
            let reason = [];
            if (!isValid) {
              reason.push(
                new e.ElectroUserValidationError(
                  this.path,
                  `Invalid value for attribute "${this.path}": Failed model defined regex`
                )
              );
            }
            return [isValid, reason];
          };
        } else {
          return () => [true, []];
        }
      }
      _makeDefault(definition) {
        if (typeof definition === "function") {
          return () => definition();
        } else {
          return () => definition;
        }
      }
      _makeType(name, definition) {
        let type = "";
        let enumArray = [];
        if (Array.isArray(definition.type)) {
          type = AttributeTypes.enum;
          enumArray = [...definition.type];
        } else {
          type = definition.type || "string";
        }
        if (!AttributeTypeNames.includes(type)) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidAttributeDefinition,
            `Invalid "type" property for attribute: "${name}". Acceptable types include ${AttributeTypeNames.join(
              ", "
            )}`
          );
        }
        return { type, enumArray };
      }
      isWatcher() {
        return this._isWatcher;
      }
      isWatched() {
        return this._isWatched;
      }
      isWatching(attribute) {
        return this.watching[attribute] !== void 0;
      }
      isWatchedBy(attribute) {
        return this.watchedBy[attribute] !== void 0;
      }
      _isType(value) {
        if (value === void 0) {
          let reason2 = [];
          if (this.required) {
            reason2.push(
              new e.ElectroAttributeValidationError(
                this.path,
                `Invalid value type at entity path: "${this.path}". Value is required.`
              )
            );
          }
          return [!this.required, reason2];
        }
        let isTyped = false;
        let reason = [];
        switch (this.type) {
          case AttributeTypes.enum:
            isTyped = this.enumArray.includes(value);
            if (!isTyped) {
              reason.push(
                new e.ElectroAttributeValidationError(
                  this.path,
                  `Invalid value type at entity path: "${this.path}". Value not found in set of acceptable values: ${u.commaSeparatedString(
                    this.enumArray
                  )}`
                )
              );
            }
            break;
          case AttributeTypes.any:
          case AttributeTypes.static:
          case AttributeTypes.custom:
            isTyped = true;
            break;
          case AttributeTypes.string:
          case AttributeTypes.number:
          case AttributeTypes.boolean:
          default:
            isTyped = typeof value === this.type;
            if (!isTyped) {
              reason.push(
                new e.ElectroAttributeValidationError(
                  this.path,
                  `Invalid value type at entity path: "${this.path}". Received value of type "${typeof value}", expected value of type "${this.type}"`
                )
              );
            }
            break;
        }
        return [isTyped, reason];
      }
      isValid(value) {
        try {
          let [isTyped, typeErrorReason] = this._isType(value);
          let [isValid, validationError] = isTyped ? this.validate(value) : [false, []];
          let errors = [...typeErrorReason, ...validationError].filter(
            (value2) => value2 !== void 0
          );
          return [isTyped && isValid, errors];
        } catch (err) {
          return [false, [err]];
        }
      }
      val(value) {
        value = this.cast(value);
        if (value === void 0) {
          value = this.default();
        }
        return value;
      }
      getValidate(value) {
        value = this.val(value);
        let [isValid, validationErrors] = this.isValid(value);
        if (!isValid) {
          throw new e.ElectroValidationError(validationErrors);
        }
        return value;
      }
    };
    var MapAttribute = class extends Attribute {
      constructor(definition) {
        super(definition);
        const properties = Attribute.buildChildMapProperties(definition, {
          parentType: this.type,
          parentPath: this.path,
          traverser: this.traverser
        });
        this.properties = properties;
        this.isRoot = !!definition.isRoot;
        this.get = this._makeGet(definition.get, properties);
        this.set = this._makeSet(definition.set, properties);
      }
      _makeGet(get, properties) {
        this._checkGetSet(get, "get");
        const getter = get || ((val2) => {
          const isEmpty = !val2 || Object.keys(val2).length === 0;
          const isNotRequired = !this.required;
          const doesNotHaveDefault = this.default === void 0;
          const isRoot = this.isRoot;
          if (isEmpty && isRoot && isNotRequired && doesNotHaveDefault) {
            return void 0;
          }
          return val2;
        });
        return (values, siblings) => {
          const data = {};
          if (this.hidden) {
            return;
          }
          if (values === void 0) {
            if (!get) {
              return void 0;
            }
            return getter(data, siblings);
          }
          for (const name of Object.keys(properties.attributes)) {
            const attribute = properties.attributes[name];
            if (values[attribute.field] !== void 0) {
              let results = attribute.get(values[attribute.field], { ...values });
              if (results !== void 0) {
                data[name] = results;
              }
            }
          }
          return getter(data, siblings);
        };
      }
      _makeSet(set, properties) {
        this._checkGetSet(set, "set");
        const setter = set || ((val2) => {
          const isEmpty = !val2 || Object.keys(val2).length === 0;
          const isNotRequired = !this.required;
          const doesNotHaveDefault = this.default === void 0;
          const defaultIsValue = this.default === val2;
          const isRoot = this.isRoot;
          if (defaultIsValue) {
            return val2;
          } else if (isEmpty && isRoot && isNotRequired && doesNotHaveDefault) {
            return void 0;
          } else {
            return val2;
          }
        });
        return (values, siblings) => {
          const data = {};
          if (values === void 0) {
            if (!set) {
              return void 0;
            }
            return setter(values, siblings);
          }
          for (const name of Object.keys(properties.attributes)) {
            const attribute = properties.attributes[name];
            if (values[name] !== void 0) {
              const results = attribute.set(values[name], { ...values });
              if (results !== void 0) {
                data[attribute.field] = results;
              }
            }
          }
          return setter(data, siblings);
        };
      }
      _isType(value) {
        if (value === void 0) {
          let reason2 = [];
          if (this.required) {
            reason2.push(
              new e.ElectroAttributeValidationError(
                this.path,
                `Invalid value type at entity path: "${this.path}". Value is required.`
              )
            );
          }
          return [!this.required, reason2];
        }
        const valueType = getValueType(value);
        if (valueType !== ValueTypes.object) {
          return [
            false,
            [
              new e.ElectroAttributeValidationError(
                this.path,
                `Invalid value type at entity path "${this.path}. Received value of type "${valueType}", expected value of type "object"`
              )
            ]
          ];
        }
        let reason = [];
        const [childrenAreValid, childErrors] = this._validateChildren(value);
        if (!childrenAreValid) {
          reason = childErrors;
        }
        return [childrenAreValid, reason];
      }
      _validateChildren(value) {
        const valueType = getValueType(value);
        const attributes2 = this.properties.attributes;
        let errors = [];
        if (valueType === ValueTypes.object) {
          for (const child of Object.keys(attributes2)) {
            const [isValid, errorValues] = attributes2[child].isValid(
              value === void 0 ? value : value[child]
            );
            if (!isValid) {
              errors = [...errors, ...errorValues];
            }
          }
        } else if (valueType !== ValueTypes.object) {
          errors.push(
            new e.ElectroAttributeValidationError(
              this.path,
              `Invalid value type at entity path: "${this.path}". Expected value to be an object to fulfill attribute type "${this.type}"`
            )
          );
        } else if (this.properties.hasRequiredAttributes) {
          errors.push(
            new e.ElectroAttributeValidationError(
              this.path,
              `Invalid value type at entity path: "${this.path}". Map attribute requires at least the properties ${u.commaSeparatedString(
                Object.keys(attributes2)
              )}`
            )
          );
        }
        return [errors.length === 0, errors];
      }
      val(value) {
        const incomingIsEmpty = value === void 0;
        let fromDefault = false;
        let data;
        if (value === void 0) {
          data = this.default();
          if (data !== void 0) {
            fromDefault = true;
          }
        } else {
          data = value;
        }
        const valueType = getValueType(data);
        if (data === void 0) {
          return data;
        } else if (valueType !== "object") {
          throw new e.ElectroAttributeValidationError(
            this.path,
            `Invalid value type at entity path: "${this.path}". Expected value to be an object to fulfill attribute type "${this.type}"`
          );
        }
        const response = {};
        for (const name of Object.keys(this.properties.attributes)) {
          const attribute = this.properties.attributes[name];
          const results = attribute.val(data[attribute.name]);
          if (results !== void 0) {
            response[name] = results;
          }
        }
        if (Object.keys(response).length === 0 && !fromDefault && this.isRoot && !this.required && incomingIsEmpty) {
          return void 0;
        }
        return response;
      }
    };
    var ListAttribute = class extends Attribute {
      constructor(definition) {
        super(definition);
        const items = Attribute.buildChildListItems(definition, {
          parentType: this.type,
          parentPath: this.path,
          traverser: this.traverser
        });
        this.items = items;
        this.get = this._makeGet(definition.get, items);
        this.set = this._makeSet(definition.set, items);
      }
      _makeGet(get, items) {
        this._checkGetSet(get, "get");
        const getter = get || ((attr) => attr);
        return (values, siblings) => {
          const data = [];
          if (this.hidden) {
            return;
          }
          if (values === void 0) {
            return getter(data, siblings);
          }
          for (let value of values) {
            const results = items.get(value, [...values]);
            if (results !== void 0) {
              data.push(results);
            }
          }
          return getter(data, siblings);
        };
      }
      _makeSet(set, items) {
        this._checkGetSet(set, "set");
        const setter = set || ((attr) => attr);
        return (values, siblings) => {
          const data = [];
          if (values === void 0) {
            return setter(values, siblings);
          }
          for (const value of values) {
            const results = items.set(value, [...values]);
            if (results !== void 0) {
              data.push(results);
            }
          }
          return setter(data, siblings);
        };
      }
      _validateArrayValue(value) {
        const reason = [];
        const valueType = getValueType(value);
        if (value !== void 0 && valueType !== ValueTypes.array) {
          return [
            false,
            [
              new e.ElectroAttributeValidationError(
                this.path,
                `Invalid value type at entity path "${this.path}. Received value of type "${valueType}", expected value of type "array"`
              )
            ]
          ];
        } else {
          return [true, []];
        }
      }
      _isType(value) {
        if (value === void 0) {
          let reason2 = [];
          if (this.required) {
            reason2.push(
              new e.ElectroAttributeValidationError(
                this.path,
                `Invalid value type at entity path: "${this.path}". Value is required.`
              )
            );
          }
          return [!this.required, reason2];
        }
        const [isValidArray, errors] = this._validateArrayValue(value);
        if (!isValidArray) {
          return [isValidArray, errors];
        }
        let reason = [];
        const [childrenAreValid, childErrors] = this._validateChildren(value);
        if (!childrenAreValid) {
          reason = childErrors;
        }
        return [childrenAreValid, reason];
      }
      _validateChildren(value) {
        const valueType = getValueType(value);
        const errors = [];
        if (valueType === ValueTypes.array) {
          for (const i in value) {
            const [isValid, errorValues] = this.items.isValid(value[i]);
            if (!isValid) {
              for (const err of errorValues) {
                if (err instanceof e.ElectroAttributeValidationError || err instanceof e.ElectroUserValidationError) {
                  err.index = parseInt(i);
                }
                errors.push(err);
              }
            }
          }
        } else {
          errors.push(
            new e.ElectroAttributeValidationError(
              this.path,
              `Invalid value type at entity path: "${this.path}". Expected value to be an Array to fulfill attribute type "${this.type}"`
            )
          );
        }
        return [errors.length === 0, errors];
      }
      val(value) {
        const getValue = (v2) => {
          v2 = this.cast(v2);
          if (v2 === void 0) {
            v2 = this.default();
          }
          return v2;
        };
        const data = value === void 0 ? getValue(value) : value;
        if (data === void 0) {
          return data;
        } else if (!Array.isArray(data)) {
          throw new e.ElectroAttributeValidationError(
            this.path,
            `Invalid value type at entity path "${this.path}. Received value of type "${getValueType(
              value
            )}", expected value of type "array"`
          );
        }
        const response = [];
        for (const d of data) {
          const results = this.items.val(d);
          if (results !== void 0) {
            response.push(results);
          }
        }
        return response;
      }
    };
    var SetAttribute = class extends Attribute {
      constructor(definition) {
        super(definition);
        const items = Attribute.buildChildSetItems(definition, {
          parentType: this.type,
          parentPath: this.path,
          traverser: this.traverser
        });
        this.items = items;
        this.get = this._makeGet(definition.get, items);
        this.set = this._makeSet(definition.set, items);
        this.validate = this._makeSetValidate(definition);
      }
      _makeSetValidate(definition) {
        const validate = this._makeValidate(definition.validate);
        return (value) => {
          switch (getValueType(value)) {
            case ValueTypes.array:
              return validate([...value]);
            case ValueTypes.aws_set:
              return validate([...value.values]);
            case ValueTypes.set:
              return validate(Array.from(value));
            default:
              return validate(value);
          }
        };
      }
      fromDDBSet(value) {
        switch (getValueType(value)) {
          case ValueTypes.aws_set:
            return [...value.values];
          case ValueTypes.set:
            return Array.from(value);
          default:
            return value;
        }
      }
      _createDDBSet(value) {
        const client2 = this.getClient();
        if (client2 && typeof client2.createSet === "function") {
          value = Array.isArray(value) ? Array.from(new Set(value)) : value;
          return client2.createSet(value, { validate: true });
        } else {
          return new DynamoDBSet(value, this.items.type);
        }
      }
      acceptable(val2) {
        return Array.isArray(val2) ? val2.length > 0 : this.items.acceptable(val2);
      }
      toDDBSet(value) {
        const valueType = getValueType(value);
        let array;
        switch (valueType) {
          case ValueTypes.set:
            array = Array.from(value);
            return this._createDDBSet(array);
          case ValueTypes.aws_set:
            return value;
          case ValueTypes.array:
            return this._createDDBSet(value);
          case ValueTypes.string:
          case ValueTypes.number: {
            this.items.getValidate(value);
            return this._createDDBSet(value);
          }
          default:
            throw new e.ElectroAttributeValidationError(
              this.path,
              `Invalid attribute value supplied to "set" attribute "${this.path}". Received value of type "${valueType}". Set values must be supplied as either Arrays, native JavaScript Set objects, DocumentClient Set objects, strings, or numbers.`
            );
        }
      }
      _makeGet(get, items) {
        this._checkGetSet(get, "get");
        const getter = get || ((attr) => attr);
        return (values, siblings) => {
          if (values !== void 0) {
            const data2 = this.fromDDBSet(values);
            return getter(data2, siblings);
          }
          const data = this.fromDDBSet(values);
          const results = getter(data, siblings);
          if (results !== void 0) {
            return this.fromDDBSet(results);
          }
        };
      }
      _makeSet(set, items) {
        this._checkGetSet(set, "set");
        const setter = set || ((attr) => attr);
        return (values, siblings) => {
          const results = setter(this.fromDDBSet(values), siblings);
          if (results !== void 0) {
            return this.toDDBSet(results);
          }
        };
      }
      _isType(value) {
        if (value === void 0) {
          const reason2 = [];
          if (this.required) {
            reason2.push(
              new e.ElectroAttributeValidationError(
                this.path,
                `Invalid value type at entity path: "${this.path}". Value is required.`
              )
            );
          }
          return [!this.required, reason2];
        }
        let reason = [];
        const [childrenAreValid, childErrors] = this._validateChildren(value);
        if (!childrenAreValid) {
          reason = childErrors;
        }
        return [childrenAreValid, reason];
      }
      _validateChildren(value) {
        const valueType = getValueType(value);
        let errors = [];
        let arr = [];
        if (valueType === ValueTypes.array) {
          arr = value;
        } else if (valueType === ValueTypes.set) {
          arr = Array.from(value);
        } else if (valueType === ValueTypes.aws_set) {
          arr = value.values;
        } else {
          errors.push(
            new e.ElectroAttributeValidationError(
              this.path,
              `Invalid value type at attribute path: "${this.path}". Expected value to be an Expected value to be an Array, native JavaScript Set objects, or DocumentClient Set objects to fulfill attribute type "${this.type}"`
            )
          );
        }
        for (const item of arr) {
          const [isValid, errorValues] = this.items.isValid(item);
          if (!isValid) {
            errors = [...errors, ...errorValues];
          }
        }
        return [errors.length === 0, errors];
      }
      val(value) {
        if (value === void 0) {
          value = this.default();
        }
        if (value !== void 0) {
          return this.toDDBSet(value);
        }
      }
    };
    var Schema = class _Schema {
      constructor(properties = {}, facets = {}, { traverser = new AttributeTraverser(), getClient, parent, isRoot } = {}) {
        this._validateProperties(properties, parent);
        let schema = _Schema.normalizeAttributes(properties, facets, {
          traverser,
          getClient,
          parent,
          isRoot
        });
        this.getClient = getClient;
        this.attributes = schema.attributes;
        this.enums = schema.enums;
        this.translationForTable = schema.translationForTable;
        this.translationForRetrieval = schema.translationForRetrieval;
        this.hiddenAttributes = schema.hiddenAttributes;
        this.readOnlyAttributes = schema.readOnlyAttributes;
        this.requiredAttributes = schema.requiredAttributes;
        this.translationForWatching = this._formatWatchTranslations(
          this.attributes
        );
        this.traverser = traverser;
        this.isRoot = !!isRoot;
      }
      static normalizeAttributes(attributes2 = {}, facets = {}, { traverser, getClient, parent, isRoot } = {}) {
        const attributeHasParent = !!parent;
        let invalidProperties = [];
        let normalized = {};
        let usedAttrs = {};
        let enums = {};
        let translationForTable = {};
        let translationForRetrieval = {};
        let watchedAttributes = {};
        let requiredAttributes = /* @__PURE__ */ new Set();
        let hiddenAttributes = /* @__PURE__ */ new Set();
        let readOnlyAttributes = /* @__PURE__ */ new Set();
        let definitions = {};
        for (let name in attributes2) {
          let attribute = attributes2[name];
          if (typeof attribute === AttributeTypes.string || Array.isArray(attribute)) {
            attribute = {
              type: attribute
            };
          }
          const field = attribute.field || name;
          let isKeyField = false;
          let prefix = "";
          let postfix = "";
          let casing = KeyCasing.none;
          if (facets.byField && facets.byField[field] !== void 0) {
            for (const indexName of Object.keys(facets.byField[field])) {
              let definition2 = facets.byField[field][indexName];
              if (definition2.facets.length > 1) {
                throw new e.ElectroError(
                  e.ErrorCodes.InvalidIndexWithAttributeName,
                  `Invalid definition for "${definition2.type}" field on index "${u.formatIndexNameForDisplay(
                    indexName
                  )}". The ${definition2.type} field "${definition2.field}" shares a field name with an attribute defined on the Entity, and therefore is not allowed to contain composite references to other attributes. Please either change the field name of the attribute, or redefine the index to use only the single attribute "${definition2.field}".`
                );
              }
              if (definition2.isCustom) {
                const keyFieldLabels = facets.labels[indexName][definition2.type].labels;
                if (keyFieldLabels.length > 2) {
                  throw new e.ElectroError(
                    e.ErrorCodes.InvalidIndexWithAttributeName,
                    `Unexpected definition for "${definition2.type}" field on index "${u.formatIndexNameForDisplay(
                      indexName
                    )}". The ${definition2.type} field "${definition2.field}" shares a field name with an attribute defined on the Entity, and therefore is not possible to have more than two labels as part of it's template. Please either change the field name of the attribute, or reformat the key template to reduce all pre-fixing or post-fixing text around the attribute reference to two.`
                  );
                }
                isKeyField = true;
                casing = definition2.casing;
                for (const value of keyFieldLabels) {
                  if (value.name === field) {
                    prefix = value.label || "";
                  } else {
                    postfix = value.label || "";
                  }
                }
                if (attribute.type !== AttributeTypes.string && !Array.isArray(attribute.type)) {
                  if (prefix.length > 0 || postfix.length > 0) {
                    throw new e.ElectroError(
                      e.ErrorCodes.InvalidIndexWithAttributeName,
                      `definition for "${definition2.type}" field on index "${u.formatIndexNameForDisplay(
                        indexName
                      )}". Index templates may only have prefix or postfix values on "string" or "enum" type attributes. The ${definition2.type} field "${field}" is type "${attribute.type}", and therefore cannot be used with prefixes or postfixes. Please either remove the prefixed or postfixed values from the template or change the field name of the attribute.`
                    );
                  }
                }
              } else {
                throw new e.ElectroError(
                  e.ErrorCodes.InvalidIndexCompositeWithAttributeName,
                  `Unexpected definition for "${definition2.type}" field on index "${u.formatIndexNameForDisplay(
                    indexName
                  )}". The ${definition2.type} field "${definition2.field}" shares a field name with an attribute defined on the Entity, and therefore must be defined with a template. Please either change the field name of the attribute, or add a key template to the "${definition2.type}" field on index "${u.formatIndexNameForDisplay(
                    indexName
                  )}" with the value: "\${${definition2.field}}"`
                );
              }
              if (definition2.inCollection) {
                throw new e.ElectroError(
                  e.ErrorCodes.InvalidCollectionOnIndexWithAttributeFieldNames,
                  `Invalid use of a collection on index "${u.formatIndexNameForDisplay(
                    indexName
                  )}". The ${definition2.type} field "${definition2.field}" shares a field name with an attribute defined on the Entity, and therefore the index is not allowed to participate in a Collection. Please either change the field name of the attribute, or remove all collection(s) from the index.`
                );
              }
              if (definition2.field === field) {
                if (attribute.padding !== void 0) {
                  throw new e.ElectroError(
                    e.ErrorCodes.InvalidAttributeDefinition,
                    `Invalid padding definition for the attribute "${name}". Padding is not currently supported for attributes that are also defined as table indexes.`
                  );
                }
              }
            }
          }
          let isKey = !!facets.byIndex && facets.byIndex[TableIndex].all.find((facet) => facet.name === name);
          let definition = {
            name,
            field,
            getClient,
            casing,
            prefix,
            postfix,
            traverser,
            isKeyField: isKeyField || isKey,
            isRoot: !!isRoot,
            label: attribute.label,
            required: !!attribute.required,
            default: attribute.default,
            validate: attribute.validate,
            readOnly: !!attribute.readOnly || isKey,
            hidden: !!attribute.hidden,
            indexes: facets.byAttr && facets.byAttr[name] || [],
            type: attribute.type,
            get: attribute.get,
            set: attribute.set,
            watching: Array.isArray(attribute.watch) ? attribute.watch : [],
            items: attribute.items,
            properties: attribute.properties,
            parentPath: attribute.parentPath,
            parentType: attribute.parentType,
            padding: attribute.padding
          };
          if (definition.type === AttributeTypes.custom) {
            definition.type = AttributeTypes.any;
          }
          if (attribute.watch !== void 0) {
            if (attribute.watch === AttributeWildCard) {
              definition.watchAll = true;
              definition.watching = [];
            } else if (Array.isArray(attribute.watch)) {
              definition.watching = attribute.watch;
            } else {
              throw new e.ElectroError(
                e.ErrorCodes.InvalidAttributeWatchDefinition,
                `Attribute Validation Error. The attribute '${name}' is defined to "watch" an invalid value of: '${attribute.watch}'. The watch property must either be a an array of attribute names, or the single string value of "${WatchAll}".`
              );
            }
          } else {
            definition.watching = [];
          }
          if (definition.readOnly) {
            readOnlyAttributes.add(name);
          }
          if (definition.hidden) {
            hiddenAttributes.add(name);
          }
          if (definition.required) {
            requiredAttributes.add(name);
          }
          if (facets.byAttr && facets.byAttr[definition.name] !== void 0 && !ValidFacetTypes.includes(definition.type) && !Array.isArray(definition.type)) {
            let assignedIndexes = facets.byAttr[name].map(
              (assigned) => assigned.index === "" ? "Table Index" : assigned.index
            );
            throw new e.ElectroError(
              e.ErrorCodes.InvalidAttributeDefinition,
              `Invalid composite attribute definition: Composite attributes must be one of the following: ${ValidFacetTypes.join(
                ", "
              )}. The attribute "${name}" is defined as being type "${attribute.type}" but is a composite attribute of the following indexes: ${assignedIndexes.join(
                ", "
              )}`
            );
          }
          if (usedAttrs[definition.field] || usedAttrs[name]) {
            invalidProperties.push({
              name,
              property: "field",
              value: definition.field,
              expected: `Unique field property, already used by attribute ${usedAttrs[definition.field]}`
            });
          } else {
            usedAttrs[definition.field] = definition.name;
          }
          translationForTable[definition.name] = definition.field;
          translationForRetrieval[definition.field] = definition.name;
          for (let watched of definition.watching) {
            watchedAttributes[watched] = watchedAttributes[watched] || [];
            watchedAttributes[watched].push(name);
          }
          definitions[name] = definition;
        }
        for (let name of Object.keys(definitions)) {
          const definition = definitions[name];
          definition.watchedBy = Array.isArray(watchedAttributes[name]) ? watchedAttributes[name] : [];
          switch (definition.type) {
            case AttributeTypes.map:
              normalized[name] = new MapAttribute(definition);
              break;
            case AttributeTypes.list:
              normalized[name] = new ListAttribute(definition);
              break;
            case AttributeTypes.set:
              normalized[name] = new SetAttribute(definition);
              break;
            default:
              normalized[name] = new Attribute(definition);
          }
        }
        let watchedWatchers = [];
        let watchingUnknownAttributes = [];
        for (let watched of Object.keys(watchedAttributes)) {
          if (normalized[watched] === void 0) {
            for (let attribute of watchedAttributes[watched]) {
              watchingUnknownAttributes.push({ attribute, watched });
            }
          } else if (normalized[watched].isWatcher()) {
            for (let attribute of watchedAttributes[watched]) {
              watchedWatchers.push({ attribute, watched });
            }
          }
        }
        if (watchingUnknownAttributes.length > 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidAttributeWatchDefinition,
            `Attribute Validation Error. The following attributes are defined to "watch" invalid/unknown attributes: ${watchingUnknownAttributes.map(({ watched, attribute }) => `"${attribute}"->"${watched}"`).join(", ")}.`
          );
        }
        if (watchedWatchers.length > 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidAttributeWatchDefinition,
            `Attribute Validation Error. Attributes may only "watch" other attributes also watch attributes. The following attributes are defined with ineligible attributes to watch: ${watchedWatchers.map(({ attribute, watched }) => `"${attribute}"->"${watched}"`).join(", ")}.`
          );
        }
        let missingFacetAttributes = Array.isArray(facets.attributes) ? facets.attributes.filter(({ name }) => !normalized[name]).map((facet) => `"${facet.type}: ${facet.name}"`) : [];
        if (missingFacetAttributes.length > 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidKeyCompositeAttributeTemplate,
            `Invalid key composite attribute template. The following composite attribute attributes were described in the key composite attribute template but were not included model's attributes: ${missingFacetAttributes.join(
              ", "
            )}`
          );
        }
        if (invalidProperties.length > 0) {
          let message = invalidProperties.map(
            (prop) => `Schema Validation Error. Attribute "${prop.name}" property "${prop.property}". Received: "${prop.value}", Expected: "${prop.expected}"`
          );
          throw new e.ElectroError(
            e.ErrorCodes.InvalidAttributeDefinition,
            message
          );
        } else {
          return {
            enums,
            hiddenAttributes,
            readOnlyAttributes,
            requiredAttributes,
            translationForTable,
            translationForRetrieval,
            attributes: normalized
          };
        }
      }
      _validateProperties() {
      }
      _formatWatchTranslations(attributes2) {
        let watchersToAttributes = {};
        let attributesToWatchers = {};
        let watchAllAttributes = {};
        let hasWatchers = false;
        for (let name of Object.keys(attributes2)) {
          if (attributes2[name].isWatcher()) {
            hasWatchers = true;
            watchersToAttributes[name] = attributes2[name].watching;
          } else if (attributes2[name].watchAll) {
            hasWatchers = true;
            watchAllAttributes[name] = name;
          } else {
            attributesToWatchers[name] = attributesToWatchers[name] || {};
            attributesToWatchers[name] = attributes2[name].watchedBy;
          }
        }
        return {
          hasWatchers,
          watchAllAttributes,
          watchersToAttributes,
          attributesToWatchers
        };
      }
      getAttribute(path) {
        return this.traverser.getPath(path);
      }
      getLabels() {
        let labels = {};
        for (let name of Object.keys(this.attributes)) {
          let label = this.attributes[name].label;
          if (label !== void 0) {
            labels[name] = label;
          }
        }
        return labels;
      }
      getLabels() {
        let labels = {};
        for (let name of Object.keys(this.attributes)) {
          let label = this.attributes[name].label;
          if (label !== void 0) {
            labels[name] = label;
          }
        }
        return labels;
      }
      _applyAttributeMutation(method, include, avoid, payload) {
        let data = { ...payload };
        for (let path of Object.keys(include)) {
          const attribute = this.getAttribute(path);
          if (attribute !== void 0 && avoid[path] === void 0) {
            data[path] = attribute[method](payload[path], { ...payload });
          }
        }
        return data;
      }
      _fulfillAttributeMutationMethod(method, payload) {
        let watchersToTrigger = {};
        let avoid = {
          ...this.translationForWatching.watchersToAttributes,
          ...this.translationForWatching.watchAllAttributes
        };
        let data = this._applyAttributeMutation(method, payload, avoid, payload);
        if (!this.translationForWatching.hasWatchers) {
          return data;
        }
        for (let attribute of Object.keys(data)) {
          let watchers = this.translationForWatching.attributesToWatchers[attribute];
          if (watchers !== void 0) {
            watchersToTrigger = { ...watchersToTrigger, ...watchers };
          }
        }
        let include = {
          ...data,
          ...watchersToTrigger,
          ...this.translationForWatching.watchAllAttributes
        };
        return this._applyAttributeMutation(
          method,
          include,
          this.translationForWatching.attributesToWatchers,
          data
        );
      }
      applyAttributeGetters(payload = {}) {
        return this._fulfillAttributeMutationMethod(
          AttributeMutationMethods.get,
          payload
        );
      }
      applyAttributeSetters(payload = {}) {
        return this._fulfillAttributeMutationMethod(
          AttributeMutationMethods.set,
          payload
        );
      }
      translateFromFields(item = {}, options2 = {}) {
        let data = {};
        let names = this.translationForRetrieval;
        for (let [attr, value] of Object.entries(item)) {
          let name = names[attr];
          if (name) {
            data[name] = value;
          } else if (options2.data === DataOptions.includeKeys) {
            data[attr] = value;
          }
        }
        return data;
      }
      translateToFields(payload = {}) {
        let record = {};
        for (let [name, value] of Object.entries(payload)) {
          let field = this.getFieldName(name);
          if (value !== void 0) {
            record[field] = value;
          }
        }
        return record;
      }
      getFieldName(name) {
        if (typeof name === "string") {
          return this.translationForTable[name];
        }
      }
      checkCreate(payload = {}) {
        let record = {};
        for (let attribute of Object.values(this.attributes)) {
          let value = payload[attribute.name];
          record[attribute.name] = attribute.getValidate(value);
        }
        return record;
      }
      checkRemove(paths = []) {
        for (const path of paths) {
          const attribute = this.traverser.getPath(path);
          if (!attribute) {
            throw new e.ElectroAttributeValidationError(
              path,
              `Attribute "${path}" does not exist on model.`
            );
          } else if (attribute.readOnly) {
            throw new e.ElectroAttributeValidationError(
              attribute.path,
              `Attribute "${attribute.path}" is Read-Only and cannot be removed`
            );
          } else if (attribute.required) {
            throw new e.ElectroAttributeValidationError(
              attribute.path,
              `Attribute "${attribute.path}" is Required and cannot be removed`
            );
          }
        }
        return paths;
      }
      checkOperation(attribute, operation, value) {
        if (attribute.required && operation === ItemOperations.remove) {
          throw new e.ElectroAttributeValidationError(
            attribute.path,
            `Attribute "${attribute.path}" is Required and cannot be removed`
          );
        } else if (attribute.readOnly) {
          throw new e.ElectroAttributeValidationError(
            attribute.path,
            `Attribute "${attribute.path}" is Read-Only and cannot be updated`
          );
        }
        return value === void 0 ? void 0 : attribute.getValidate(value);
      }
      checkUpdate(payload = {}, { allowReadOnly } = {}) {
        let record = {};
        for (let [path, value] of Object.entries(payload)) {
          let attribute = this.traverser.paths.get(path);
          if (attribute === void 0) {
            continue;
          }
          if (attribute.readOnly && !allowReadOnly) {
            throw new e.ElectroAttributeValidationError(
              attribute.path,
              `Attribute "${attribute.path}" is Read-Only and cannot be updated`
            );
          } else {
            record[path] = attribute.getValidate(value);
          }
        }
        return record;
      }
      getReadOnly() {
        return Array.from(this.readOnlyAttributes);
      }
      getRequired() {
        return Array.from(this.requiredAttributes);
      }
      formatItemForRetrieval(item, config) {
        let returnAttributes = new Set(config.attributes || []);
        let hasUserSpecifiedReturnAttributes = returnAttributes.size > 0;
        let remapped = this.translateFromFields(item, config);
        let data = this._fulfillAttributeMutationMethod("get", remapped);
        if (this.hiddenAttributes.size > 0 || hasUserSpecifiedReturnAttributes) {
          for (let attribute of Object.keys(data)) {
            if (this.hiddenAttributes.has(attribute)) {
              delete data[attribute];
            }
            if (hasUserSpecifiedReturnAttributes && !returnAttributes.has(attribute)) {
              delete data[attribute];
            }
          }
        }
        return data;
      }
    };
    function createCustomAttribute(definition = {}) {
      return {
        ...definition,
        type: "custom"
      };
    }
    function CustomAttributeType(base) {
      const supported = ["string", "number", "boolean", "any"];
      if (!supported.includes(base)) {
        throw new Error(
          `OpaquePrimitiveType only supports base types: ${u.commaSeparatedString(
            supported
          )}`
        );
      }
      return base;
    }
    function createSchema2(schema) {
      v.model(schema);
      return schema;
    }
    module2.exports = {
      Schema,
      Attribute,
      CastTypes,
      SetAttribute,
      createSchema: createSchema2,
      CustomAttributeType,
      createCustomAttribute
    };
  }
});

// node_modules/electrodb/src/filters.js
var require_filters = __commonJS({
  "node_modules/electrodb/src/filters.js"(exports2, module2) {
    var e = require_errors();
    var { MethodTypes, ExpressionTypes } = require_types();
    var FilterFactory = class {
      constructor(attributes2 = {}, filterTypes = {}) {
        this.attributes = { ...attributes2 };
        this.filters = {
          ...filterTypes
        };
      }
      getExpressionType(methodType) {
        switch (methodType) {
          case MethodTypes.put:
          case MethodTypes.create:
          case MethodTypes.update:
          case MethodTypes.patch:
          case MethodTypes.delete:
          case MethodTypes.get:
          case MethodTypes.upsert:
            return ExpressionTypes.ConditionExpression;
          default:
            return ExpressionTypes.FilterExpression;
        }
      }
      _buildFilterAttributes(setName, setValue) {
        let attributes2 = {};
        for (let [name, attribute] of Object.entries(this.attributes)) {
          let filterAttribute = {};
          for (let [type, { template }] of Object.entries(this.filters)) {
            Object.defineProperty(filterAttribute, type, {
              get: () => {
                return (...values) => {
                  let { prop } = setName({}, name, attribute.field);
                  let attrValues = [];
                  for (let value of values) {
                    if (template.length > 1) {
                      attrValues.push(setValue(name, value, name));
                    }
                  }
                  let expression = template({}, attribute, prop, ...attrValues);
                  return expression.trim();
                };
              }
            });
          }
          attributes2[name] = filterAttribute;
        }
        return attributes2;
      }
      buildClause(filterFn) {
        return (entity, state, ...params) => {
          const type = this.getExpressionType(state.query.method);
          const builder = state.query.filter[type];
          let setName = (paths, name, value) => builder.setName(paths, name, value);
          let setValue = (name, value, path) => builder.setValue(name, value, path);
          let attributes2 = this._buildFilterAttributes(setName, setValue);
          const expression = filterFn(attributes2, ...params);
          if (typeof expression !== "string") {
            throw new e.ElectroError(
              e.ErrorCodes.InvalidFilter,
              "Invalid filter response. Expected result to be of type string"
            );
          }
          builder.add(expression);
          return state;
        };
      }
      injectFilterClauses(clauses = {}, filters = {}) {
        let injected = { ...clauses };
        let filterParents = Object.entries(injected).filter((clause) => {
          let [name, { children }] = clause;
          return children.find((child) => ["go", "commit"].includes(child));
        }).map(([name]) => name);
        let modelFilters = Object.keys(filters);
        let filterChildren = [];
        for (let [name, filter] of Object.entries(filters)) {
          filterChildren.push(name);
          injected[name] = {
            name,
            action: this.buildClause(filter),
            children: ["params", "go", "commit", "filter", ...modelFilters]
          };
        }
        filterChildren.push("filter");
        injected["filter"] = {
          name: "filter",
          action: (entity, state, fn) => {
            return this.buildClause(fn)(entity, state);
          },
          children: ["params", "go", "commit", "filter", ...modelFilters]
        };
        for (let parent of filterParents) {
          injected[parent] = { ...injected[parent] };
          injected[parent].children = [
            ...filterChildren,
            ...injected[parent].children
          ];
        }
        return injected;
      }
    };
    module2.exports = { FilterFactory };
  }
});

// node_modules/electrodb/src/updateOperations.js
var require_updateOperations = __commonJS({
  "node_modules/electrodb/src/updateOperations.js"(exports2, module2) {
    var { AttributeTypes, ItemOperations } = require_types();
    var deleteOperations = {
      canNest: false,
      template: function del(options2, attr, path, value) {
        let operation = "";
        let expression = "";
        switch (attr.type) {
          case AttributeTypes.any:
          case AttributeTypes.set:
            operation = ItemOperations.delete;
            expression = `${path} ${value}`;
            break;
          default:
            throw new Error(
              `Invalid Update Attribute Operation: "DELETE" Operation can only be performed on attributes with type "set" or "any".`
            );
        }
        return { operation, expression };
      }
    };
    var UpdateOperations = {
      ifNotExists: {
        template: function if_not_exists(options2, attr, path, value) {
          const operation = ItemOperations.set;
          const expression = `${path} = if_not_exists(${path}, ${value})`;
          return { operation, expression };
        }
      },
      name: {
        canNest: true,
        template: function name(options2, attr, path) {
          return path;
        }
      },
      value: {
        canNest: true,
        template: function value(options2, attr, path, value) {
          return value;
        }
      },
      append: {
        canNest: false,
        template: function append(options2, attr, path, value) {
          let operation = "";
          let expression = "";
          switch (attr.type) {
            case AttributeTypes.any:
            case AttributeTypes.list:
              const defaultValue = options2.createValue("default_value", []);
              expression = `${path} = list_append(if_not_exists(${path}, ${defaultValue}), ${value})`;
              operation = ItemOperations.set;
              break;
            default:
              throw new Error(
                `Invalid Update Attribute Operation: "APPEND" Operation can only be performed on attributes with type "list" or "any".`
              );
          }
          return { operation, expression };
        }
      },
      add: {
        canNest: false,
        template: function add(options2, attr, path, value, defaultValue) {
          let operation = "";
          let expression = "";
          let type = attr.type;
          if (type === AttributeTypes.any) {
            type = typeof value === "number" ? AttributeTypes.number : AttributeTypes.any;
          }
          switch (type) {
            case AttributeTypes.any:
            case AttributeTypes.set: {
              operation = ItemOperations.add;
              expression = `${path} ${value}`;
              break;
            }
            case AttributeTypes.number: {
              if (options2.nestedValue) {
                operation = ItemOperations.set;
                expression = `${path} = ${path} + ${value}`;
              } else if (defaultValue !== void 0) {
                operation = ItemOperations.set;
                expression = `${path} = (if_not_exists(${path}, ${defaultValue}) + ${value})`;
              } else {
                operation = ItemOperations.add;
                expression = `${path} ${value}`;
              }
              break;
            }
            default:
              throw new Error(
                `Invalid Update Attribute Operation: "ADD" Operation can only be performed on attributes with type "number", "set", or "any".`
              );
          }
          return { operation, expression };
        }
      },
      subtract: {
        canNest: false,
        template: function subtract(options2, attr, path, value, defaultValue = 0) {
          let operation = "";
          let expression = "";
          switch (attr.type) {
            case AttributeTypes.any:
            case AttributeTypes.number: {
              let resolvedDefaultValue;
              if (typeof defaultValue === "string" && defaultValue.startsWith(":")) {
                resolvedDefaultValue = defaultValue;
              } else if (defaultValue !== void 0) {
                resolvedDefaultValue = options2.createValue(
                  "default_value",
                  defaultValue
                );
              } else {
                resolvedDefaultValue = options2.createValue("default_value", 0);
              }
              operation = ItemOperations.set;
              expression = `${path} = (if_not_exists(${path}, ${resolvedDefaultValue}) - ${value})`;
              break;
            }
            default:
              throw new Error(
                `Invalid Update Attribute Operation: "SUBTRACT" Operation can only be performed on attributes with type "number" or "any".`
              );
          }
          return { operation, expression };
        }
      },
      set: {
        canNest: false,
        template: function set(options2, attr, path, value) {
          let operation = "";
          let expression = "";
          switch (attr.type) {
            case AttributeTypes.set:
            case AttributeTypes.list:
            case AttributeTypes.map:
            case AttributeTypes.enum:
            case AttributeTypes.string:
            case AttributeTypes.number:
            case AttributeTypes.boolean:
            case AttributeTypes.any:
              operation = ItemOperations.set;
              expression = `${path} = ${value}`;
              break;
            default:
              throw new Error(
                `Invalid Update Attribute Operation: "SET" Operation can only be performed on attributes with type "list", "map", "string", "number", "boolean", or "any".`
              );
          }
          return { operation, expression };
        }
      },
      remove: {
        canNest: false,
        template: function remove(options2, attr, ...paths) {
          let operation = "";
          let expression = "";
          switch (attr.type) {
            case AttributeTypes.set:
            case AttributeTypes.any:
            case AttributeTypes.list:
            case AttributeTypes.map:
            case AttributeTypes.string:
            case AttributeTypes.number:
            case AttributeTypes.boolean:
            case AttributeTypes.enum:
              operation = ItemOperations.remove;
              expression = paths.join(", ");
              break;
            default: {
              throw new Error(
                `Invalid Update Attribute Operation: "REMOVE" Operation can only be performed on attributes with type "map", "list", "string", "number", "boolean", or "any".`
              );
            }
          }
          return { operation, expression };
        }
      },
      del: deleteOperations,
      delete: deleteOperations
    };
    module2.exports = {
      UpdateOperations
    };
  }
});

// node_modules/electrodb/src/filterOperations.js
var require_filterOperations = __commonJS({
  "node_modules/electrodb/src/filterOperations.js"(exports2, module2) {
    var FilterOperations = {
      escape: {
        template: function escape(options2, attr) {
          return `${attr}`;
        },
        rawValue: true
      },
      size: {
        template: function size(options2, attr, name) {
          return `size(${name})`;
        },
        strict: false
      },
      type: {
        template: function attributeType(options2, attr, name, value) {
          return `attribute_type(${name}, ${value})`;
        },
        strict: false
      },
      ne: {
        template: function ne(options2, attr, name, value) {
          return `${name} <> ${value}`;
        },
        strict: false
      },
      eq: {
        template: function eq(options2, attr, name, value) {
          return `${name} = ${value}`;
        },
        strict: false
      },
      gt: {
        template: function gt(options2, attr, name, value) {
          return `${name} > ${value}`;
        },
        strict: false
      },
      lt: {
        template: function lt(options2, attr, name, value) {
          return `${name} < ${value}`;
        },
        strict: false
      },
      gte: {
        template: function gte(options2, attr, name, value) {
          return `${name} >= ${value}`;
        },
        strict: false
      },
      lte: {
        template: function lte(options2, attr, name, value) {
          return `${name} <= ${value}`;
        },
        strict: false
      },
      between: {
        template: function between(options2, attr, name, value1, value2) {
          return `(${name} between ${value1} and ${value2})`;
        },
        strict: false
      },
      begins: {
        template: function begins(options2, attr, name, value) {
          return `begins_with(${name}, ${value})`;
        },
        strict: false
      },
      exists: {
        template: function exists(options2, attr, name) {
          return `attribute_exists(${name})`;
        },
        strict: false
      },
      notExists: {
        template: function notExists(options2, attr, name) {
          return `attribute_not_exists(${name})`;
        },
        strict: false
      },
      contains: {
        template: function contains(options2, attr, name, value) {
          return `contains(${name}, ${value})`;
        },
        strict: false
      },
      notContains: {
        template: function notContains(options2, attr, name, value) {
          return `not contains(${name}, ${value})`;
        },
        strict: false
      },
      value: {
        template: function(options2, attr, name, value) {
          return value;
        },
        strict: false,
        canNest: true
      },
      name: {
        template: function(options2, attr, name) {
          return name;
        },
        strict: false,
        canNest: true
      },
      eqOrNotExists: {
        template: function eq(options2, attr, name, value) {
          return `(${name} = ${value} OR attribute_not_exists(${name}))`;
        },
        strict: false
      },
      field: {
        template: function(options2, _, fieldName) {
          return fieldName !== void 0 ? `${fieldName}` : "";
        },
        strict: false,
        canNest: true,
        rawField: true
      }
    };
    module2.exports = {
      FilterOperations
    };
  }
});

// node_modules/electrodb/src/operations.js
var require_operations = __commonJS({
  "node_modules/electrodb/src/operations.js"(exports2, module2) {
    var {
      AttributeTypes,
      ItemOperations,
      AttributeProxySymbol,
      BuilderTypes
    } = require_types();
    var { UpdateOperations } = require_updateOperations();
    var { FilterOperations } = require_filterOperations();
    var e = require_errors();
    var u = require_util();
    var ExpressionState = class {
      constructor({ prefix } = {}) {
        this.names = {};
        this.values = {};
        this.paths = {};
        this.counts = {};
        this.impacted = {};
        this.expression = "";
        this.prefix = prefix || "";
        this.refs = {};
      }
      incrementName(name) {
        if (this.counts[name] === void 0) {
          this.counts[name] = 0;
        }
        return `${this.prefix}${this.counts[name]++}`;
      }
      formatName(name = "") {
        const nameWasNotANumber = isNaN(name);
        name = `${name}`.replaceAll(/[^\w]/g, "");
        if (name.length === 0) {
          name = "p";
        } else if (nameWasNotANumber !== isNaN(name)) {
          name = `p${name}`;
        }
        return name;
      }
      // todo: make the structure: name, value, paths
      setName(paths, name, value) {
        name = this.formatName(name);
        let json = "";
        let expression = "";
        const prop = `#${name}`;
        if (Object.keys(paths).length === 0) {
          json = `${name}`;
          expression = `${prop}`;
          this.names[prop] = value;
        } else if (isNaN(name)) {
          json = `${paths.json}.${name}`;
          expression = `${paths.expression}.${prop}`;
          this.names[prop] = value;
        } else {
          json = `${paths.json}[${name}]`;
          expression = `${paths.expression}[${name}]`;
        }
        return { json, expression, prop };
      }
      getNames() {
        return this.names;
      }
      setValue(name, value) {
        name = this.formatName(name);
        let valueCount = this.incrementName(name);
        let expression = `:${name}${valueCount}`;
        this.values[expression] = value;
        return expression;
      }
      updateValue(name, value) {
        this.values[name] = value;
      }
      getValues() {
        return this.values;
      }
      setPath(path, value) {
        this.paths[path] = value;
      }
      setExpression(expression) {
        this.expression = expression;
      }
      getExpression() {
        return this.expression;
      }
      setImpacted(operation, path, ref) {
        this.impacted[path] = operation;
        this.refs[path] = ref;
      }
    };
    var AttributeOperationProxy = class _AttributeOperationProxy {
      constructor({ builder, attributes: attributes2 = {}, operations = {} }) {
        this.ref = {
          attributes: attributes2,
          operations
        };
        this.attributes = _AttributeOperationProxy.buildAttributes(
          builder,
          attributes2
        );
        this.operations = _AttributeOperationProxy.buildOperations(
          builder,
          operations
        );
      }
      invokeCallback(op, ...params) {
        return op(this.attributes, this.operations, ...params);
      }
      performOperation({ operation, path, value, force = false }) {
        if (value === void 0) {
          return;
        }
        const parts = u.parseJSONPath(path);
        let attribute = this.attributes;
        for (let part of parts) {
          attribute = attribute[part];
        }
        if (attribute) {
          this.operations[operation](attribute, value);
          const { target } = attribute();
          if (target.readOnly && !force) {
            throw new Error(
              `Attribute "${target.path}" is Read-Only and cannot be updated`
            );
          }
        }
      }
      fromObject(operation, record) {
        for (let path of Object.keys(record)) {
          this.performOperation({
            operation,
            path,
            value: record[path]
          });
        }
      }
      fromArray(operation, paths) {
        for (let path of paths) {
          const parts = u.parseJSONPath(path);
          let attribute = this.attributes;
          for (let part of parts) {
            attribute = attribute[part];
          }
          if (attribute) {
            this.operations[operation](attribute);
            const { target } = attribute();
            if (target.readOnly) {
              throw new Error(
                `Attribute "${target.path}" is Read-Only and cannot be updated`
              );
            } else if (operation === ItemOperations.remove && target.required) {
              throw new Error(
                `Attribute "${target.path}" is Required and cannot be removed`
              );
            }
          }
        }
      }
      static buildOperations(builder, operations) {
        let ops = {};
        let seen = /* @__PURE__ */ new Map();
        for (let operation of Object.keys(operations)) {
          let { template, canNest, rawValue, rawField } = operations[operation];
          Object.defineProperty(ops, operation, {
            get: () => {
              return (property, ...values) => {
                if (property === void 0) {
                  throw new e.ElectroError(
                    e.ErrorCodes.InvalidWhere,
                    `Invalid/Unknown property passed in where clause passed to operation: '${operation}'`
                  );
                }
                if (property[AttributeProxySymbol]) {
                  const { commit, target } = property();
                  const fixedValues = values.map((value) => target.applyFixings(value)).filter((value) => value !== void 0);
                  const isFilterBuilder = builder.type === BuilderTypes.filter;
                  const takesValueArgument = template.length > 3;
                  const isAcceptableValue = fixedValues.every((value) => {
                    const seenAttributes = seen.get(value);
                    if (seenAttributes) {
                      return seenAttributes.every((v) => target.acceptable(v));
                    }
                    return target.acceptable(value);
                  });
                  const shouldCommit = (
                    // if it is a filterBuilder than we don't care what they pass because the user needs more freedom here
                    isFilterBuilder || // if the operation does not take a value argument then not committing here could cause problems.
                    // this should be revisited to make more robust, we could hypothetically store the commit in the
                    // "seen" map for when the value is used, but that's a lot of new complexity
                    !takesValueArgument || // if the operation takes a value, we should determine if that value is acceptable. For
                    // example, in the cases of a "set" we check to see if it is empty, or if the value is
                    // undefined, we should not commit. The "fixedValues" length check is because the
                    // "fixedValues" array has been filtered for undefined, so no length there indicates an
                    // undefined value was passed.
                    takesValueArgument && isAcceptableValue && fixedValues.length > 0
                  );
                  if (!shouldCommit) {
                    return "";
                  }
                  const paths = commit();
                  const attributeValues = [];
                  let hasNestedValue = false;
                  for (let fixedValue of fixedValues) {
                    if (seen.has(fixedValue)) {
                      attributeValues.push(fixedValue);
                      hasNestedValue = true;
                    } else {
                      let attributeValueName = builder.setValue(
                        target.name,
                        fixedValue
                      );
                      builder.setPath(paths.json, {
                        value: fixedValue,
                        name: attributeValueName
                      });
                      attributeValues.push(attributeValueName);
                    }
                  }
                  const options2 = {
                    nestedValue: hasNestedValue,
                    createValue: (name, value) => builder.setValue(`${target.name}_${name}`, value)
                  };
                  const formatted = template(
                    options2,
                    target,
                    paths.expression,
                    ...attributeValues
                  );
                  builder.setImpacted(operation, paths.json, target);
                  if (canNest) {
                    seen.set(paths.expression, attributeValues);
                    seen.set(formatted, attributeValues);
                  }
                  if (builder.type === BuilderTypes.update && formatted && typeof formatted.operation === "string" && typeof formatted.expression === "string") {
                    builder.add(formatted.operation, formatted.expression);
                    return formatted.expression;
                  }
                  return formatted;
                } else if (rawValue) {
                  let attributeValueName = builder.setValue(property, property);
                  builder.setPath(property, {
                    value: property,
                    name: attributeValueName
                  });
                  const formatted = template({}, attributeValueName);
                  seen.set(attributeValueName, [property]);
                  seen.set(formatted, [property]);
                  return formatted;
                } else if (rawField) {
                  const { prop, expression } = builder.setName(
                    {},
                    property,
                    property
                  );
                  const formatted = template({}, null, prop);
                  seen.set(expression, [property]);
                  seen.set(formatted, [property]);
                  return formatted;
                } else {
                  throw new e.ElectroError(
                    e.ErrorCodes.InvalidWhere,
                    `Invalid Attribute in where clause passed to operation '${operation}'. Use injected attributes only.`
                  );
                }
              };
            }
          });
        }
        return ops;
      }
      static pathProxy(build) {
        return new Proxy(() => build(), {
          get: (_, prop, o) => {
            if (prop === AttributeProxySymbol) {
              return true;
            } else {
              return _AttributeOperationProxy.pathProxy(() => {
                const { commit, root, target, builder } = build();
                const attribute = target.getChild(prop);
                const nestedAny = attribute.type === AttributeTypes.any && // if the name doesn't match that's because we are nested under 'any'
                attribute.name !== prop;
                let field;
                if (attribute === void 0) {
                  throw new Error(
                    `Invalid attribute "${prop}" at path "${target.path}.${prop}"`
                  );
                } else if (nestedAny) {
                  field = prop;
                } else {
                  field = attribute.field;
                }
                return {
                  root,
                  builder,
                  nestedAny,
                  target: attribute,
                  commit: () => {
                    const paths = commit();
                    return builder.setName(paths, prop, field);
                  }
                };
              });
            }
          }
        });
      }
      static buildAttributes(builder, attributes2) {
        let attr = {};
        for (let [name, attribute] of Object.entries(attributes2)) {
          Object.defineProperty(attr, name, {
            get: () => {
              return _AttributeOperationProxy.pathProxy(() => {
                return {
                  root: attribute,
                  target: attribute,
                  builder,
                  commit: () => builder.setName({}, attribute.name, attribute.field)
                };
              });
            }
          });
        }
        return attr;
      }
    };
    var FilterOperationNames = Object.keys(FilterOperations).reduce(
      (ops, name) => {
        ops[name] = name;
        return ops;
      },
      {}
    );
    var UpdateOperationNames = Object.keys(UpdateOperations).reduce(
      (ops, name) => {
        ops[name] = name;
        return ops;
      },
      {}
    );
    module2.exports = {
      UpdateOperations,
      UpdateOperationNames,
      FilterOperations,
      FilterOperationNames,
      ExpressionState,
      AttributeOperationProxy
    };
  }
});

// node_modules/electrodb/src/where.js
var require_where = __commonJS({
  "node_modules/electrodb/src/where.js"(exports2, module2) {
    var { MethodTypes, ExpressionTypes, BuilderTypes } = require_types();
    var {
      AttributeOperationProxy,
      ExpressionState,
      FilterOperations
    } = require_operations();
    var e = require_errors();
    var FilterExpression = class extends ExpressionState {
      constructor(props) {
        super(props);
        this.expression = "";
        this.type = BuilderTypes.filter;
      }
      _trim(expression) {
        if (typeof expression === "string" && expression.length > 0) {
          return expression.replace(/\n|\r/g, "").trim();
        }
        return "";
      }
      _isEmpty(expression) {
        if (typeof expression !== "string") {
          throw new Error("Invalid expression value type. Expected type string.");
        }
        return !expression.replace(/\n|\r|\w/g, "").trim();
      }
      add(newExpression, filterOptions = {}) {
        const asPrefix = !!filterOptions.asPrefix;
        let expression = "";
        let existingExpression = this.expression;
        if (typeof existingExpression === "string" && existingExpression.length > 0) {
          newExpression = this._trim(newExpression);
          let isEmpty = this._isEmpty(newExpression);
          if (isEmpty) {
            return existingExpression;
          }
          if (!asPrefix && !existingExpression.startsWith("(") && !existingExpression.endsWith(")")) {
            existingExpression = `(${existingExpression})`;
          }
          if (asPrefix) {
            expression = `(${newExpression}) AND ${existingExpression}`;
          } else {
            expression = `${existingExpression} AND ${newExpression}`;
          }
        } else {
          expression = this._trim(newExpression);
        }
        this.expression = expression;
      }
      // applies operations without verifying them against known attributes. Used internally for key conditions.
      unsafeSet(filterOptions, operation, name, ...values) {
        const { template } = FilterOperations[operation] || {};
        if (template === void 0) {
          throw new Error(
            `Invalid operation: "${operation}". Please report this issue via a bug ticket.`
          );
        }
        const names = this.setName({}, name, name);
        const valueExpressions = values.map((value) => this.setValue(name, value));
        const condition = template(
          {},
          names.expression,
          names.prop,
          ...valueExpressions
        );
        this.add(condition, filterOptions);
      }
      build() {
        return this.expression;
      }
    };
    var WhereFactory = class {
      constructor(attributes2 = {}, operations = {}) {
        this.attributes = { ...attributes2 };
        this.operations = { ...operations };
      }
      getExpressionType(methodType) {
        switch (methodType) {
          case MethodTypes.put:
          case MethodTypes.create:
          case MethodTypes.update:
          case MethodTypes.patch:
          case MethodTypes.delete:
          case MethodTypes.remove:
          case MethodTypes.upsert:
          case MethodTypes.get:
          case MethodTypes.check:
            return ExpressionTypes.ConditionExpression;
          default:
            return ExpressionTypes.FilterExpression;
        }
      }
      buildClause(cb) {
        if (typeof cb !== "function") {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidWhere,
            'Where callback must be of type "function"'
          );
        }
        return (entity, state, ...params) => {
          const type = this.getExpressionType(state.query.method);
          const builder = state.query.filter[type];
          const proxy = new AttributeOperationProxy({
            builder,
            attributes: this.attributes,
            operations: this.operations
          });
          const expression = proxy.invokeCallback(cb, ...params);
          if (typeof expression !== "string") {
            throw new e.ElectroError(
              e.ErrorCodes.InvalidWhere,
              "Invalid response from where clause callback. Expected return result to be of type string"
            );
          }
          builder.add(expression);
          return state;
        };
      }
      injectWhereClauses(clauses = {}, filters = {}) {
        let injected = { ...clauses };
        let filterParents = Object.entries(injected).filter((clause) => {
          let [name, { children }] = clause;
          return children.find((child) => ["go", "commit"].includes(child));
        }).map(([name]) => name);
        let modelFilters = Object.keys(filters);
        let filterChildren = [];
        for (let [name, filter] of Object.entries(filters)) {
          filterChildren.push(name);
          injected[name] = {
            name,
            action: this.buildClause(filter),
            children: ["params", "go", "commit", "where", ...modelFilters]
          };
        }
        filterChildren.push("where");
        injected["where"] = {
          name: "where",
          action: (entity, state, fn) => {
            return this.buildClause(fn)(entity, state);
          },
          children: ["params", "go", "commit", "where", ...modelFilters]
        };
        for (let parent of filterParents) {
          injected[parent] = { ...injected[parent] };
          injected[parent].children = [
            ...filterChildren,
            ...injected[parent].children
          ];
        }
        return injected;
      }
    };
    module2.exports = {
      WhereFactory,
      FilterExpression
    };
  }
});

// node_modules/electrodb/src/update.js
var require_update = __commonJS({
  "node_modules/electrodb/src/update.js"(exports2, module2) {
    var { UpdateOperations } = require_updateOperations();
    var { AttributeOperationProxy, ExpressionState } = require_operations();
    var { ItemOperations, BuilderTypes } = require_types();
    var UpdateExpression = class extends ExpressionState {
      constructor(props = {}) {
        super({ ...props });
        this.operations = {
          set: /* @__PURE__ */ new Set(),
          remove: /* @__PURE__ */ new Set(),
          add: /* @__PURE__ */ new Set(),
          subtract: /* @__PURE__ */ new Set(),
          delete: /* @__PURE__ */ new Set()
        };
        this.composites = {};
        this.seen = /* @__PURE__ */ new Map();
        this.type = BuilderTypes.update;
      }
      addComposite(attrName, value) {
        if (value !== void 0) {
          if (this.composites[attrName] === void 0 || this.composites[attrName] === value) {
            this.composites[attrName] = value;
            return true;
          }
        }
        return false;
      }
      add(type, expression) {
        this.operations[type].add(expression);
      }
      unadd(type, expression) {
        this.operations[type].delete(expression);
      }
      set(name, value, operation = ItemOperations.set, attribute) {
        let operationToApply = operation;
        if (operation === ItemOperations.ifNotExists) {
          operationToApply = ItemOperations.set;
        }
        const seen = this.seen.get(name);
        let n;
        let v;
        if (seen) {
          n = seen.name;
          v = seen.value;
          this.unadd(operationToApply, seen.expression);
        } else {
          n = this.setName({}, name, name);
          v = this.setValue(name, value);
        }
        let expression = `${n.prop} = ${v}`;
        if (operation === ItemOperations.ifNotExists) {
          expression = `${n.prop} = if_not_exists(${n.prop}, ${v})`;
        }
        this.seen.set(name, {
          name: n,
          value: v,
          expression
        });
        this.add(operationToApply, expression);
      }
      remove(name) {
        const n = this.setName({}, name, name);
        this.add(ItemOperations.remove, `${n.prop}`);
      }
      build() {
        let expressions = [];
        for (const type of Object.keys(this.operations)) {
          const operations = this.operations[type];
          if (operations.size > 0) {
            expressions.push(
              `${type.toUpperCase()} ${Array.from(operations).join(", ")}`
            );
          }
        }
        return expressions.join(" ");
      }
    };
    var UpdateEntity = class {
      constructor(attributes2 = {}, operations = {}) {
        this.attributes = { ...attributes2 };
        this.operations = { ...operations };
      }
      buildCallbackHandler(entity, state) {
        const proxy = new AttributeOperationProxy({
          builder: state.query.update,
          attributes: this.attributes,
          operations: this.operations
        });
        return (cb, ...params) => {
          if (typeof cb !== "function") {
            throw new Error('Update Callback must be of type "function"');
          }
          proxy.invokeCallback(cb, ...params);
        };
      }
    };
    module2.exports = {
      UpdateEntity,
      UpdateExpression
    };
  }
});

// node_modules/electrodb/src/clauses.js
var require_clauses = __commonJS({
  "node_modules/electrodb/src/clauses.js"(exports2, module2) {
    var {
      QueryTypes,
      MethodTypes,
      ItemOperations,
      ExpressionTypes,
      TransactionCommitSymbol,
      TransactionOperations,
      TerminalOperation,
      KeyTypes,
      IndexTypes,
      UpsertOperations,
      ComparisonTypes
    } = require_types();
    var {
      AttributeOperationProxy,
      UpdateOperations,
      FilterOperationNames,
      UpdateOperationNames
    } = require_operations();
    var { UpdateExpression } = require_update();
    var { FilterExpression } = require_where();
    var v = require_validations();
    var e = require_errors();
    var u = require_util();
    var methodChildren = {
      upsert: [
        "upsertSet",
        "upsertAppend",
        "upsertAdd",
        "go",
        "params",
        "upsertSubtract",
        "commit",
        "upsertIfNotExists",
        "where"
      ],
      update: [
        "data",
        "set",
        "append",
        "add",
        "updateRemove",
        "updateDelete",
        "go",
        "params",
        "subtract",
        "commit",
        "composite",
        "ifNotExists",
        "where"
      ],
      put: ["where", "params", "go", "commit"],
      del: ["where", "params", "go", "commit"]
    };
    function batchAction(action, type, entity, state, payload) {
      if (state.getError() !== null) {
        return state;
      }
      try {
        state.setMethod(type);
        for (let facets of payload) {
          let batchState = action(entity, state.createSubState(), facets);
          if (batchState.getError() !== null) {
            throw batchState.getError();
          }
        }
        return state;
      } catch (err) {
        state.setError(err);
        return state;
      }
    }
    var clauses = {
      index: {
        name: "index",
        children: [
          "check",
          "get",
          "delete",
          "update",
          "query",
          "upsert",
          "put",
          "scan",
          "collection",
          "clusteredCollection",
          "create",
          "remove",
          "patch",
          "batchPut",
          "batchDelete",
          "batchGet"
        ]
      },
      clusteredCollection: {
        name: "clusteredCollection",
        action(entity, state, collection = "", facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const { pk, sk } = state.getCompositeAttributes();
            return state.setType(QueryTypes.clustered_collection).setMethod(MethodTypes.query).setCollection(collection).setPK(entity._expectFacets(facets, pk)).ifSK(() => {
              const { composites, unused } = state.identifyCompositeAttributes(
                facets,
                sk,
                pk
              );
              state.setSK(composites);
              state.beforeBuildParams(({ options: options2, state: state2 }) => {
                const accessPattern = entity.model.translations.indexes.fromIndexToAccessPattern[state2.query.index];
                if (options2.compare === ComparisonTypes.attributes || options2.compare === ComparisonTypes.v2) {
                  if (!entity.model.indexes[accessPattern].sk.isFieldRef && sk.length > 1) {
                    state2.filterProperties(FilterOperationNames.eq, {
                      ...unused,
                      ...composites
                    });
                  }
                }
              });
            }).whenOptions(({ options: options2, state: state2 }) => {
              if (!options2.ignoreOwnership && !state2.getParams()) {
                state2.query.options.expressions.names = {
                  ...state2.query.options.expressions.names,
                  ...state2.query.options.identifiers.names
                };
                state2.query.options.expressions.values = {
                  ...state2.query.options.expressions.values,
                  ...state2.query.options.identifiers.values
                };
                state2.query.options.expressions.expression = state2.query.options.expressions.expression.length > 1 ? `(${state2.query.options.expressions.expression}) AND ${state2.query.options.identifiers.expression}` : `${state2.query.options.identifiers.expression}`;
              }
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["between", "gte", "gt", "lte", "lt", "begins", "params", "go"]
      },
      collection: {
        name: "collection",
        /* istanbul ignore next */
        action(entity, state, collection = "", facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const { pk, sk } = state.getCompositeAttributes();
            return state.setType(QueryTypes.collection).setMethod(MethodTypes.query).setCollection(collection).setPK(entity._expectFacets(facets, pk)).whenOptions(({ options: options2, state: state2 }) => {
              if (!options2.ignoreOwnership && !state2.getParams()) {
                state2.query.options.expressions.names = {
                  ...state2.query.options.expressions.names,
                  ...state2.query.options.identifiers.names
                };
                state2.query.options.expressions.values = {
                  ...state2.query.options.expressions.values,
                  ...state2.query.options.identifiers.values
                };
                state2.query.options.expressions.expression = state2.query.options.expressions.expression.length > 1 ? `(${state2.query.options.expressions.expression}) AND ${state2.query.options.identifiers.expression}` : `${state2.query.options.identifiers.expression}`;
              }
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["params", "go"]
      },
      scan: {
        name: "scan",
        action(entity, state, config) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setMethod(MethodTypes.scan).whenOptions(({ state: state2, options: options2 }) => {
              if (!options2.ignoreOwnership && !state2.getParams()) {
                state2.unsafeApplyFilter(
                  {},
                  FilterOperationNames.eq,
                  entity.identifiers.entity,
                  entity.getName()
                );
                state2.unsafeApplyFilter(
                  {},
                  FilterOperationNames.eq,
                  entity.identifiers.version,
                  entity.getVersion()
                );
              }
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["params", "go"]
      },
      get: {
        name: "get",
        /* istanbul ignore next */
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const { pk, sk } = state.getCompositeAttributes();
            const { composites } = state.identifyCompositeAttributes(
              facets,
              sk,
              pk
            );
            return state.setMethod(MethodTypes.get).setType(QueryTypes.eq).setPK(entity._expectFacets(facets, pk)).ifSK(() => {
              entity._expectFacets(facets, sk);
              state.setSK(composites);
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["params", "go", "commit"]
      },
      check: {
        name: "check",
        action(...params) {
          return clauses.get.action(...params).setMethod(MethodTypes.check);
        },
        children: ["commit"]
      },
      batchGet: {
        name: "batchGet",
        action: (entity, state, payload) => batchAction(
          clauses.get.action,
          MethodTypes.batchGet,
          entity,
          state,
          payload
        ),
        children: ["params", "go"]
      },
      batchDelete: {
        name: "batchDelete",
        action: (entity, state, payload) => batchAction(
          clauses.delete.action,
          MethodTypes.batchWrite,
          entity,
          state,
          payload
        ),
        children: ["params", "go"]
      },
      delete: {
        name: "delete",
        /* istanbul ignore next */
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const { pk, sk } = state.getCompositeAttributes();
            const pkComposite = entity._expectFacets(facets, pk);
            state.addOption("_includeOnResponseItem", pkComposite);
            return state.setMethod(MethodTypes.delete).setType(QueryTypes.eq).setPK(pkComposite).ifSK(() => {
              entity._expectFacets(facets, sk);
              const skComposite = state.buildQueryComposites(facets, sk);
              state.setSK(skComposite);
              state.addOption("_includeOnResponseItem", {
                ...skComposite,
                ...pkComposite
              });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["where", "params", "go", "commit"]
      },
      remove: {
        name: "remove",
        /* istanbul ignore next */
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const attributes2 = state.getCompositeAttributes();
            const filter = state.query.filter[ExpressionTypes.ConditionExpression];
            const { pk, sk } = entity._getPrimaryIndexFieldNames();
            filter.unsafeSet({}, FilterOperationNames.exists, pk);
            if (sk) {
              filter.unsafeSet({}, FilterOperationNames.exists, sk);
            }
            const pkComposite = entity._expectFacets(facets, attributes2.pk);
            state.addOption("_includeOnResponseItem", pkComposite);
            return state.setMethod(MethodTypes.delete).setType(QueryTypes.eq).setPK(pkComposite).ifSK(() => {
              entity._expectFacets(facets, attributes2.sk);
              const skComposite = state.buildQueryComposites(
                facets,
                attributes2.sk
              );
              state.setSK(skComposite);
              state.addOption("_includeOnResponseItem", {
                ...skComposite,
                ...pkComposite
              });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.del
      },
      upsert: {
        name: "upsert",
        action(entity, state, payload = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setMethod(MethodTypes.upsert).setType(QueryTypes.eq).applyUpsert(UpsertOperations.set, payload).beforeBuildParams(({ state: state2 }) => {
              const { upsert, update, updateProxy } = state2.query;
              state2.query.update.set(entity.identifiers.entity, entity.getName());
              state2.query.update.set(
                entity.identifiers.version,
                entity.getVersion()
              );
              const setData = {};
              const nonSetData = {};
              let allData = {};
              for (const name in upsert.data) {
                const { operation, value } = upsert.data[name];
                allData[name] = value;
                if (operation === UpsertOperations.set) {
                  setData[name] = value;
                } else {
                  nonSetData[name] = value;
                }
              }
              const upsertData = entity.model.schema.checkCreate({ ...allData });
              const attributes2 = state2.getCompositeAttributes();
              const pkComposite = entity._expectFacets(upsertData, attributes2.pk);
              state2.addOption("_includeOnResponseItem", pkComposite).setPK(pkComposite).ifSK(() => {
                entity._expectFacets(upsertData, attributes2.sk);
                const skComposite = entity._buildQueryFacets(
                  upsertData,
                  attributes2.sk
                );
                state2.setSK(skComposite);
                state2.addOption("_includeOnResponseItem", {
                  ...skComposite,
                  ...pkComposite
                });
              });
              const appliedData = entity.model.schema.applyAttributeSetters({
                ...upsertData
              });
              const onlySetAppliedData = {};
              const nonSetAppliedData = {};
              for (const name in appliedData) {
                const value = appliedData[name];
                const isSetOperation = setData[name] !== void 0;
                const cameFromApplyingSetters = allData[name] === void 0;
                const isNotUndefined = appliedData[name] !== void 0;
                const applyAsSet = isSetOperation || cameFromApplyingSetters;
                if (applyAsSet && isNotUndefined) {
                  onlySetAppliedData[name] = value;
                } else {
                  nonSetAppliedData[name] = value;
                }
              }
              const { pk } = state2.query.keys;
              const sk = state2.query.keys.sk[0];
              const {
                updatedKeys,
                setAttributes,
                indexKey,
                deletedKeys = []
              } = entity._getPutKeys(pk, sk && sk.facets, onlySetAppliedData);
              for (const deletedKey of deletedKeys) {
                state2.query.update.remove(deletedKey);
              }
              upsert.indexKey = indexKey;
              const setFields = Object.entries(
                entity.model.schema.translateToFields(setAttributes)
              );
              for (const key in updatedKeys) {
                const value = updatedKeys[key];
                if (indexKey[key] === void 0) {
                  setFields.push([key, value]);
                }
              }
              entity._maybeApplyUpsertUpdate({
                fields: setFields,
                operation: UpsertOperations.set,
                updateProxy,
                update
              });
              for (const name in nonSetData) {
                const value = appliedData[name];
                if (value === void 0 || upsert.data[name] === void 0) {
                  continue;
                }
                const { operation } = upsert.data[name];
                const fields = entity.model.schema.translateToFields({
                  [name]: value
                });
                entity._maybeApplyUpsertUpdate({
                  fields: Object.entries(fields),
                  updateProxy,
                  operation,
                  update
                });
              }
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.upsert
      },
      put: {
        name: "put",
        /* istanbul ignore next */
        action(entity, state, payload = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            let record = entity.model.schema.checkCreate({ ...payload });
            const attributes2 = state.getCompositeAttributes();
            return state.setMethod(MethodTypes.put).setType(QueryTypes.eq).applyPut(record).setPK(entity._expectFacets(record, attributes2.pk)).ifSK(() => {
              entity._expectFacets(record, attributes2.sk);
              state.setSK(state.buildQueryComposites(record, attributes2.sk));
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.put
      },
      batchPut: {
        name: "batchPut",
        action: (entity, state, payload) => batchAction(
          clauses.put.action,
          MethodTypes.batchWrite,
          entity,
          state,
          payload
        ),
        children: ["params", "go"]
      },
      create: {
        name: "create",
        action(entity, state, payload) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            let record = entity.model.schema.checkCreate({ ...payload });
            const attributes2 = state.getCompositeAttributes();
            const filter = state.query.filter[ExpressionTypes.ConditionExpression];
            const { pk, sk } = entity._getPrimaryIndexFieldNames();
            filter.unsafeSet({}, FilterOperationNames.notExists, pk);
            if (sk) {
              filter.unsafeSet({}, FilterOperationNames.notExists, sk);
            }
            return state.setMethod(MethodTypes.put).setType(QueryTypes.eq).applyPut(record).setPK(entity._expectFacets(record, attributes2.pk)).ifSK(() => {
              entity._expectFacets(record, attributes2.sk);
              state.setSK(state.buildQueryComposites(record, attributes2.sk));
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.put
      },
      patch: {
        name: "patch",
        action(entity, state, facets) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const attributes2 = state.getCompositeAttributes();
            const filter = state.query.filter[ExpressionTypes.ConditionExpression];
            const { pk, sk } = entity._getPrimaryIndexFieldNames();
            filter.unsafeSet({}, FilterOperationNames.exists, pk);
            if (sk) {
              filter.unsafeSet({}, FilterOperationNames.exists, sk);
            }
            const pkComposite = entity._expectFacets(facets, attributes2.pk);
            state.addOption("_includeOnResponseItem", pkComposite);
            return state.setMethod(MethodTypes.update).setType(QueryTypes.eq).setPK(pkComposite).ifSK(() => {
              entity._expectFacets(facets, attributes2.sk);
              const skComposite = state.buildQueryComposites(
                facets,
                attributes2.sk
              );
              state.setSK(skComposite);
              state.addOption("_includeOnResponseItem", {
                ...skComposite,
                ...pkComposite
              });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      update: {
        name: "update",
        action(entity, state, facets) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const attributes2 = state.getCompositeAttributes();
            const pkComposite = entity._expectFacets(facets, attributes2.pk);
            state.addOption("_includeOnResponseItem", pkComposite);
            return state.setMethod(MethodTypes.update).setType(QueryTypes.eq).setPK(pkComposite).ifSK(() => {
              entity._expectFacets(facets, attributes2.sk);
              const skComposite = state.buildQueryComposites(
                facets,
                attributes2.sk
              );
              state.setSK(skComposite);
              state.addOption("_includeOnResponseItem", {
                ...pkComposite,
                ...skComposite
              });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      data: {
        name: "data",
        action(entity, state, cb) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            state.query.updateProxy.invokeCallback(cb);
            for (const path of Object.keys(state.query.update.refs)) {
              const operation = state.query.update.impacted[path];
              const attribute = state.query.update.refs[path];
              const keyValue = state.query.update.paths[path] || {};
              if (!attribute) {
                throw new e.ElectroAttributeValidationError(
                  path,
                  `Attribute "${path}" does not exist on model.`
                );
              }
              entity.model.schema.checkOperation(
                attribute,
                operation,
                keyValue.value
              );
            }
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      set: {
        name: "set",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data);
            state.query.updateProxy.fromObject(ItemOperations.set, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      upsertSet: {
        name: "set",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data, { allowReadOnly: true });
            state.query.upsert.addData(UpsertOperations.set, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.upsert
      },
      composite: {
        name: "composite",
        action(entity, state, composites = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            for (const attrName in composites) {
              if (entity.model.facets.byAttr[attrName]) {
                const wasSet = state.query.update.addComposite(
                  attrName,
                  composites[attrName]
                );
                if (!wasSet) {
                  throw new e.ElectroError(
                    e.ErrorCodes.DuplicateUpdateCompositesProvided,
                    `The composite attribute ${attrName} has been provided more than once with different values. Remove the duplication before running again`
                  );
                }
                state.applyCondition(
                  FilterOperationNames.eq,
                  attrName,
                  composites[attrName]
                );
              }
            }
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      append: {
        name: "append",
        action(entity, state, data = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data);
            state.query.updateProxy.fromObject(ItemOperations.append, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      ifNotExists: {
        name: "ifNotExists",
        action(entity, state, data = {}) {
          entity.model.schema.checkUpdate(data);
          state.query.updateProxy.fromObject(ItemOperations.ifNotExists, data);
          return state;
        },
        children: methodChildren.update
      },
      upsertIfNotExists: {
        name: "ifNotExists",
        action(entity, state, data = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data, { allowReadOnly: true });
            state.query.upsert.addData(UpsertOperations.ifNotExists, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.upsert
      },
      upsertAppend: {
        name: "append",
        action(entity, state, data = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data, { allowReadOnly: true });
            state.query.upsert.addData(UpsertOperations.append, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.upsert
      },
      updateRemove: {
        name: "remove",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            if (!Array.isArray(data)) {
              throw new Error("Update method 'remove' expects type Array");
            }
            entity.model.schema.checkRemove(data);
            state.query.updateProxy.fromArray(ItemOperations.remove, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      updateDelete: {
        name: "delete",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data);
            state.query.updateProxy.fromObject(ItemOperations.delete, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      add: {
        name: "add",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data);
            state.query.updateProxy.fromObject(ItemOperations.add, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      upsertAdd: {
        name: "add",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data, { allowReadOnly: true });
            state.query.upsert.addData(UpsertOperations.add, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.upsert
      },
      upsertSubtract: {
        name: "subtract",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data, { allowReadOnly: true });
            state.query.upsert.addData(UpsertOperations.subtract, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.upsert
      },
      subtract: {
        name: "subtract",
        action(entity, state, data) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            entity.model.schema.checkUpdate(data);
            state.query.updateProxy.fromObject(ItemOperations.subtract, data);
            return state;
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: methodChildren.update
      },
      query: {
        name: "query",
        action(entity, state, facets, options2 = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            state.addOption("_isPagination", true);
            const { pk, sk } = state.getCompositeAttributes();
            return state.setMethod(MethodTypes.query).setType(QueryTypes.is).setPK(entity._expectFacets(facets, pk)).ifSK(() => {
              const { composites, unused } = state.identifyCompositeAttributes(
                facets,
                sk,
                pk
              );
              state.setSK(state.buildQueryComposites(facets, sk));
              state.whenOptions(({ options: options3, state: state2 }) => {
                if (options3.compare === ComparisonTypes.attributes || options3.compare === ComparisonTypes.v2) {
                  if (sk.length > 1) {
                    state2.filterProperties(FilterOperationNames.eq, {
                      ...unused,
                      ...composites
                    });
                  }
                }
                if (state2.query.options.indexType === IndexTypes.clustered && Object.keys(composites).length < sk.length && !options3.ignoreOwnership && !state2.getParams()) {
                  state2.unsafeApplyFilter(
                    {},
                    FilterOperationNames.eq,
                    entity.identifiers.entity,
                    entity.getName()
                  ).unsafeApplyFilter(
                    {},
                    FilterOperationNames.eq,
                    entity.identifiers.version,
                    entity.getVersion()
                  );
                }
              });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["between", "gte", "gt", "lte", "lt", "begins", "params", "go"]
      },
      between: {
        name: "between",
        action(entity, state, startingFacets = {}, endingFacets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            const { pk, sk } = state.getCompositeAttributes();
            const endingSk = state.identifyCompositeAttributes(
              endingFacets,
              sk,
              pk
            );
            const startingSk = state.identifyCompositeAttributes(
              startingFacets,
              sk,
              pk
            );
            const accessPattern = entity.model.translations.indexes.fromIndexToAccessPattern[state.query.index];
            return state.setType(QueryTypes.and).setSK(endingSk.composites).setType(QueryTypes.between).setSK(startingSk.composites).beforeBuildParams(({ options: options2, state: state2 }) => {
              if (options2.compare === ComparisonTypes.attributes || options2.compare === ComparisonTypes.v2) {
                if (!entity.model.indexes[accessPattern].sk.isFieldRef) {
                  state2.filterProperties(
                    FilterOperationNames.lte,
                    endingSk.composites,
                    { asPrefix: true }
                  );
                }
                if (options2.compare === ComparisonTypes.attributes) {
                  if (!entity.model.indexes[accessPattern].sk.isFieldRef) {
                    state2.filterProperties(
                      FilterOperationNames.gte,
                      startingSk.composites,
                      { asPrefix: true }
                    );
                  }
                }
              }
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["go", "params"]
      },
      begins: {
        name: "begins",
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setType(QueryTypes.begins).ifSK((state2) => {
              const attributes2 = state2.getCompositeAttributes();
              state2.setSK(state2.buildQueryComposites(facets, attributes2.sk));
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["go", "params"]
      },
      gt: {
        name: "gt",
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setType(QueryTypes.gt).ifSK((state2) => {
              const { pk, sk } = state2.getCompositeAttributes();
              const { composites } = state2.identifyCompositeAttributes(
                facets,
                sk,
                pk
              );
              state2.setSK(composites);
              state2.beforeBuildParams(({ options: options2, state: state3 }) => {
                if (options2.compare === ComparisonTypes.attributes || options2.compare === ComparisonTypes.v2) {
                  const accessPattern = entity.model.translations.indexes.fromIndexToAccessPattern[state3.query.index];
                  if (!entity.model.indexes[accessPattern].sk.isFieldRef) {
                    state3.filterProperties(FilterOperationNames.gt, composites, {
                      asPrefix: true
                    });
                  }
                }
              });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["go", "params"]
      },
      gte: {
        name: "gte",
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setType(QueryTypes.gte).ifSK((state2) => {
              const attributes2 = state2.getCompositeAttributes();
              state2.setSK(state2.buildQueryComposites(facets, attributes2.sk));
              state2.beforeBuildParams(({ options: options2, state: state3 }) => {
                const { composites } = state3.identifyCompositeAttributes(
                  facets,
                  attributes2.sk,
                  attributes2.pk
                );
                if (options2.compare === ComparisonTypes.attributes) {
                  const accessPattern = entity.model.translations.indexes.fromIndexToAccessPattern[state3.query.index];
                  if (!entity.model.indexes[accessPattern].sk.isFieldRef && attributes2.sk.length > 1) {
                    state3.filterProperties(FilterOperationNames.gte, composites, {
                      asPrefix: true
                    });
                  }
                }
              });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["go", "params"]
      },
      lt: {
        name: "lt",
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setType(QueryTypes.lt).ifSK((state2) => {
              const { pk, sk } = state2.getCompositeAttributes();
              const { composites } = state2.identifyCompositeAttributes(
                facets,
                sk,
                pk
              );
              state2.setSK(composites);
              state2.beforeBuildParams(({ options: options2, state: state3 }) => {
                if (options2.compare === ComparisonTypes.attributes) {
                  const accessPattern = entity.model.translations.indexes.fromIndexToAccessPattern[state3.query.index];
                  if (!entity.model.indexes[accessPattern].sk.isFieldRef) {
                    state3.filterProperties(FilterOperationNames.lt, composites, {
                      asPrefix: true
                    });
                  }
                }
              });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["go", "params"]
      },
      lte: {
        name: "lte",
        action(entity, state, facets = {}) {
          if (state.getError() !== null) {
            return state;
          }
          try {
            return state.setType(QueryTypes.lte).ifSK((state2) => {
              const { pk, sk } = state2.getCompositeAttributes();
              const { composites } = state2.identifyCompositeAttributes(
                facets,
                sk,
                pk
              );
              state2.setSK(composites);
              state2.beforeBuildParams(({ options: options2, state: state3 }) => {
                if (options2.compare === ComparisonTypes.attributes || options2.compare === ComparisonTypes.v2) {
                  const accessPattern = entity.model.translations.indexes.fromIndexToAccessPattern[state3.query.index];
                  if (!entity.model.indexes[accessPattern].sk.isFieldRef) {
                    state3.filterProperties(FilterOperationNames.lte, composites, {
                      asPrefix: true
                    });
                  }
                }
              });
            });
          } catch (err) {
            state.setError(err);
            return state;
          }
        },
        children: ["go", "params"]
      },
      commit: {
        name: "commit",
        action(entity, state, options2) {
          if (state.getError() !== null) {
            throw state.error;
          }
          const results = clauses.params.action(entity, state, {
            ...options2,
            _returnOptions: true,
            _isTransaction: true
          });
          const method = TransactionOperations[state.query.method];
          if (!method) {
            throw new Error("Invalid commit method");
          }
          return {
            [method]: results.params,
            [TransactionCommitSymbol]: () => {
              return {
                entity
              };
            }
          };
        },
        children: []
      },
      params: {
        name: "params",
        action(entity, state, options2 = {}) {
          if (state.getError() !== null) {
            throw state.error;
          }
          try {
            if (!v.isStringHasLength(options2.table) && !v.isStringHasLength(entity.getTableName())) {
              throw new e.ElectroError(
                e.ErrorCodes.MissingTable,
                `Table name not defined. Table names must be either defined on the model, instance configuration, or as a query option.`
              );
            }
            const method = state.getMethod();
            const normalizedOptions = entity._normalizeExecutionOptions({
              provided: [state.getOptions(), state.query.options, options2],
              context: {
                operation: options2._isTransaction ? MethodTypes.transactWrite : void 0
              }
            });
            state.applyWithOptions(normalizedOptions);
            state.applyBeforeBuildParams(normalizedOptions);
            let results;
            switch (method) {
              case MethodTypes.query: {
                results = entity._queryParams(state, normalizedOptions);
                break;
              }
              case MethodTypes.batchWrite: {
                results = entity._batchWriteParams(state, normalizedOptions);
                break;
              }
              case MethodTypes.batchGet: {
                results = entity._batchGetParams(state, normalizedOptions);
                break;
              }
              default: {
                results = entity._params(state, normalizedOptions);
                break;
              }
            }
            if (method === MethodTypes.update && results.ExpressionAttributeValues && Object.keys(results.ExpressionAttributeValues).length === 0) {
              delete results.ExpressionAttributeValues;
            }
            if (options2._returnOptions) {
              results = {
                params: results,
                options: normalizedOptions
              };
            }
            state.setParams(results);
            return results;
          } catch (err) {
            throw err;
          }
        },
        children: []
      },
      go: {
        name: "go",
        action(entity, state, options2 = {}) {
          if (state.getError() !== null) {
            return Promise.reject(state.error);
          }
          try {
            if (entity.client === void 0) {
              throw new e.ElectroError(
                e.ErrorCodes.NoClientDefined,
                "No client defined on model"
              );
            }
            options2.terminalOperation = TerminalOperation.go;
            const paramResults = clauses.params.action(entity, state, {
              ...options2,
              _returnOptions: true
            });
            return entity.go(
              state.getMethod(),
              paramResults.params,
              paramResults.options
            );
          } catch (err) {
            return Promise.reject(err);
          }
        },
        children: []
      }
    };
    var ChainState = class _ChainState {
      constructor({
        index = "",
        compositeAttributes = {},
        attributes: attributes2 = {},
        hasSortKey = false,
        options: options2 = {},
        parentState = null
      } = {}) {
        const update = new UpdateExpression({ prefix: "_u" });
        this.parentState = parentState;
        this.error = null;
        this.attributes = attributes2;
        this.query = {
          collection: "",
          index,
          type: "",
          method: "",
          facets: { ...compositeAttributes },
          update,
          updateProxy: new AttributeOperationProxy({
            builder: update,
            attributes: attributes2,
            operations: UpdateOperations
          }),
          put: {
            data: {}
          },
          upsert: {
            data: {},
            indexKey: null,
            addData(operation = UpsertOperations.set, data = {}) {
              for (const name of Object.keys(data)) {
                const value = data[name];
                this.data[name] = {
                  operation,
                  value
                };
              }
            },
            getData(operationFilter) {
              const results = {};
              for (const name in this.data) {
                const { operation, value } = this.data[name];
                if (!operationFilter || operationFilter === operation) {
                  results[name] = value;
                }
              }
              return results;
            }
          },
          keys: {
            provided: [],
            pk: {},
            sk: []
          },
          filter: {
            [ExpressionTypes.ConditionExpression]: new FilterExpression(),
            [ExpressionTypes.FilterExpression]: new FilterExpression()
          },
          options: options2
        };
        this.subStates = [];
        this.hasSortKey = hasSortKey;
        this.prev = null;
        this.self = null;
        this.params = null;
        this.applyAfterOptions = [];
        this.beforeBuildParamsOperations = [];
        this.beforeBuildParamsHasRan = false;
      }
      getParams() {
        return this.params;
      }
      setParams(params) {
        if (params) {
          this.params = params;
        }
      }
      init(entity, allClauses, currentClause) {
        let current = {};
        for (let child of currentClause.children) {
          const name = allClauses[child].name;
          current[name] = (...args) => {
            this.prev = this.self;
            this.self = child;
            let results = allClauses[child].action(entity, this, ...args);
            if (allClauses[child].children.length) {
              return this.init(entity, allClauses, allClauses[child]);
            } else {
              return results;
            }
          };
        }
        return current;
      }
      getMethod() {
        return this.query.method;
      }
      getOptions() {
        return this.query.options;
      }
      addOption(key, value) {
        this.query.options[key] = value;
        return this;
      }
      _appendProvided(type, attributes2) {
        const newAttributes = Object.keys(attributes2).map((attribute) => {
          return {
            type,
            attribute
          };
        });
        return u.getUnique(this.query.keys.provided, newAttributes);
      }
      setPK(attributes2) {
        this.query.keys.pk = attributes2;
        this.query.keys.provided = this._appendProvided(KeyTypes.pk, attributes2);
        return this;
      }
      ifSK(cb) {
        if (this.hasSortKey) {
          cb(this);
        }
        return this;
      }
      getCompositeAttributes() {
        return this.query.facets;
      }
      buildQueryComposites(provided, definition) {
        return definition.map((name) => [name, provided[name]]).reduce((result, [name, value]) => {
          if (value !== void 0) {
            result[name] = value;
          }
          return result;
        }, {});
      }
      identifyCompositeAttributes(provided, defined, skip) {
        const composites = {};
        const unused = {};
        const definedSet = new Set(defined || []);
        const skipSet = new Set(skip || []);
        for (const key of Object.keys(provided)) {
          const value = provided[key];
          if (definedSet.has(key)) {
            composites[key] = value;
          } else if (skipSet.has(key)) {
            continue;
          } else {
            unused[key] = value;
          }
        }
        return {
          composites,
          unused
        };
      }
      applyFilter(operation, name, values, filterOptions) {
        if (FilterOperationNames[operation] !== void 0 && name !== void 0 && values !== void 0) {
          const attribute = this.attributes[name];
          if (attribute !== void 0) {
            this.unsafeApplyFilter(
              filterOptions,
              operation,
              attribute.field,
              values
            );
          }
        }
        return this;
      }
      applyCondition(operation, name, ...values) {
        if (FilterOperationNames[operation] !== void 0 && name !== void 0 && values.length > 0) {
          const attribute = this.attributes[name];
          if (attribute !== void 0) {
            const filter = this.query.filter[ExpressionTypes.ConditionExpression];
            filter.unsafeSet({}, operation, attribute.field, ...values);
          }
        }
        return this;
      }
      unsafeApplyFilter(filterOptions = {}, operation, name, values) {
        if (FilterOperationNames[operation] !== void 0 & name !== void 0 && values !== void 0) {
          const filter = this.query.filter[ExpressionTypes.FilterExpression];
          filter.unsafeSet(filterOptions, operation, name, values);
        }
        return this;
      }
      filterProperties(operation, obj = {}, filterOptions = {}) {
        for (const property in obj) {
          const value = obj[property];
          if (value !== void 0) {
            this.applyFilter(operation, property, value, filterOptions);
          }
        }
        return this;
      }
      setSK(attributes2, type = this.query.type) {
        if (this.hasSortKey) {
          this.query.keys.sk.push({
            type,
            facets: attributes2
          });
          this.query.keys.provided = this._appendProvided(KeyTypes.sk, attributes2);
        }
        return this;
      }
      setType(type) {
        if (!QueryTypes[type]) {
          throw new Error(`Invalid query type: "${type}"`);
        }
        this.query.type = QueryTypes[type];
        return this;
      }
      setMethod(method) {
        if (!MethodTypes[method]) {
          throw new Error(`Invalid method type: "${method}"`);
        }
        this.query.method = MethodTypes[method];
        return this;
      }
      setCollection(collection) {
        this.query.collection = collection;
        return this;
      }
      createSubState() {
        let subState = new _ChainState({
          parentState: this,
          index: this.query.index,
          attributes: this.attributes,
          hasSortKey: this.hasSortKey,
          options: this.query.options,
          compositeAttributes: this.query.facets
        });
        this.subStates.push(subState);
        return subState;
      }
      getError() {
        return this.error;
      }
      setError(err) {
        this.error = err;
        if (this.parentState) {
          this.parentState.setError(err);
        }
      }
      applyUpsert(operation = UpsertOperations.set, data = {}) {
        this.query.upsert.addData(operation, data);
        return this;
      }
      applyPut(data = {}) {
        this.query.put.data = { ...this.query.put.data, ...data };
        return this;
      }
      whenOptions(fn) {
        if (v.isFunction(fn)) {
          this.applyAfterOptions.push((options2) => {
            fn({ options: options2, state: this });
          });
        }
        return this;
      }
      // these are ran before "beforeBuildParams"
      applyWithOptions(options2 = {}) {
        this.applyAfterOptions.forEach((fn) => fn(options2));
      }
      beforeBuildParams(fn) {
        if (v.isFunction(fn)) {
          this.beforeBuildParamsOperations.push((options2) => {
            fn({ options: options2, state: this });
          });
        }
        return this;
      }
      applyBeforeBuildParams(options2 = {}) {
        if (!this.beforeBuildParamsHasRan) {
          this.beforeBuildParamsHasRan = true;
          this.beforeBuildParamsOperations.forEach((fn) => fn(options2));
        }
      }
    };
    module2.exports = {
      clauses,
      ChainState
    };
  }
});

// node_modules/electrodb/src/events.js
var require_events = __commonJS({
  "node_modules/electrodb/src/events.js"(exports2, module2) {
    var e = require_errors();
    var v = require_validations();
    var EventManager = class _EventManager {
      static createSafeListener(listener) {
        if (listener === void 0) {
          return void 0;
        }
        if (!v.isFunction(listener)) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidListenerProvided,
            `Provided listener is not of type 'function'`
          );
        } else {
          return (...params) => {
            try {
              listener(...params);
            } catch (err) {
              console.error(`Error invoking user supplied listener`, err);
            }
          };
        }
      }
      static normalizeListeners(listeners = []) {
        if (!Array.isArray(listeners)) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidListenerProvided,
            `Listeners must be provided as an array of functions`
          );
        }
        return listeners.map((listener) => _EventManager.createSafeListener(listener)).filter((listener) => {
          switch (typeof listener) {
            case "function":
              return true;
            case "undefined":
              return false;
            default:
              throw new e.ElectroError(
                e.ErrorCodes.InvalidListenerProvided,
                `Provided listener is not of type 'function`
              );
          }
        });
      }
      constructor({ listeners = [] } = {}) {
        this.listeners = _EventManager.normalizeListeners(listeners);
      }
      add(listeners = []) {
        if (!Array.isArray(listeners)) {
          listeners = [listeners];
        }
        this.listeners = this.listeners.concat(
          _EventManager.normalizeListeners(listeners)
        );
      }
      trigger(event, adHocListeners = []) {
        const allListeners = [
          ...this.listeners,
          ..._EventManager.normalizeListeners(adHocListeners)
        ];
        for (const listener of allListeners) {
          listener(event);
        }
      }
    };
    module2.exports = {
      EventManager
    };
  }
});

// node_modules/electrodb/src/client.js
var require_client = __commonJS({
  "node_modules/electrodb/src/client.js"(exports2, module2) {
    var lib = require("@aws-sdk/lib-dynamodb");
    var util = require("@aws-sdk/util-dynamodb");
    var { isFunction } = require_validations();
    var { ElectroError, ErrorCodes } = require_errors();
    var DocumentClientVersions = {
      v2: "v2",
      v3: "v3",
      electro: "electro"
    };
    var unmarshallItem = (value) => {
      const unmarshall = util.unmarshall || ((val2) => val2);
      try {
        value.Item = unmarshall(value.Item);
      } catch (err) {
        console.error("Internal Error: Failed to unmarshal input", err);
      }
      return value;
    };
    var v3Methods = ["send"];
    var v2Methods = [
      "get",
      "put",
      "update",
      "delete",
      "batchWrite",
      "batchGet",
      "scan",
      "query",
      "createSet",
      "transactWrite",
      "transactGet"
    ];
    var supportedClientVersions = {
      [DocumentClientVersions.v2]: v2Methods,
      [DocumentClientVersions.v3]: v3Methods
    };
    var DocumentClientV2Wrapper = class _DocumentClientV2Wrapper {
      static init(client2) {
        return new _DocumentClientV2Wrapper(client2, lib);
      }
      constructor(client2, lib2) {
        this.client = client2;
        this.lib = lib2;
        this.__v = "v2";
      }
      get(params) {
        return this.client.get(params);
      }
      put(params) {
        return this.client.put(params);
      }
      update(params) {
        return this.client.update(params);
      }
      delete(params) {
        return this.client.delete(params);
      }
      batchWrite(params) {
        return this.client.batchWrite(params);
      }
      batchGet(params) {
        return this.client.batchGet(params);
      }
      scan(params) {
        return this.client.scan(params);
      }
      query(params) {
        return this.client.query(params);
      }
      _transact(transactionRequest) {
        let cancellationReasons;
        transactionRequest.on("extractError", (response) => {
          try {
            cancellationReasons = JSON.parse(
              response.httpResponse.body.toString()
            ).CancellationReasons;
          } catch (err) {
          }
        });
        return {
          async promise() {
            return transactionRequest.promise().catch((err) => {
              if (err) {
                if (Array.isArray(cancellationReasons)) {
                  return {
                    canceled: cancellationReasons.map((reason) => {
                      if (reason.Item) {
                        return unmarshallItem(reason);
                      }
                      return reason;
                    })
                  };
                }
                throw err;
              }
            });
          }
        };
      }
      transactWrite(params) {
        const transactionRequest = this.client.transactWrite(params);
        return this._transact(transactionRequest);
      }
      transactGet(params) {
        const transactionRequest = this.client.transactGet(params);
        return this._transact(transactionRequest);
      }
      createSet(value, ...rest) {
        if (Array.isArray(value)) {
          return this.client.createSet(value, ...rest);
        } else {
          return this.client.createSet([value], ...rest);
        }
      }
    };
    var DocumentClientV3Wrapper = class _DocumentClientV3Wrapper {
      static init(client2) {
        return new _DocumentClientV3Wrapper(client2, lib);
      }
      constructor(client2, lib2) {
        this.client = client2;
        this.lib = lib2;
        this.__v = "v3";
      }
      promiseWrap(fn) {
        return {
          promise: async () => {
            return fn();
          }
        };
      }
      get(params) {
        return this.promiseWrap(() => {
          const command = new this.lib.GetCommand(params);
          return this.client.send(command);
        });
      }
      put(params) {
        return this.promiseWrap(() => {
          const command = new this.lib.PutCommand(params);
          return this.client.send(command);
        });
      }
      update(params) {
        return this.promiseWrap(() => {
          const command = new this.lib.UpdateCommand(params);
          return this.client.send(command);
        });
      }
      delete(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.DeleteCommand(params);
          return this.client.send(command);
        });
      }
      batchWrite(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.BatchWriteCommand(params);
          return this.client.send(command);
        });
      }
      batchGet(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.BatchGetCommand(params);
          return this.client.send(command);
        });
      }
      scan(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.ScanCommand(params);
          return this.client.send(command);
        });
      }
      query(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.QueryCommand(params);
          return this.client.send(command);
        });
      }
      transactWrite(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.TransactWriteCommand(params);
          return this.client.send(command).then((result) => {
            return result;
          }).catch((err) => {
            if (err.CancellationReasons) {
              return {
                canceled: err.CancellationReasons.map((reason) => {
                  if (reason.Item) {
                    return unmarshallItem(reason);
                  }
                  return reason;
                })
              };
            }
            throw err;
          });
        });
      }
      transactGet(params) {
        return this.promiseWrap(async () => {
          const command = new this.lib.TransactGetCommand(params);
          return this.client.send(command).then((result) => {
            return result;
          }).catch((err) => {
            if (err.CancellationReasons) {
              return {
                canceled: err.CancellationReasons.map((reason) => {
                  if (reason.Item) {
                    return unmarshallItem(reason);
                  }
                  return reason;
                })
              };
            }
            throw err;
          });
        });
      }
      createSet(value) {
        if (Array.isArray(value)) {
          return new Set(value);
        } else {
          return /* @__PURE__ */ new Set([value]);
        }
      }
    };
    function identifyClientVersion(client2 = {}) {
      if (client2 instanceof DocumentClientV3Wrapper || client2 instanceof DocumentClientV2Wrapper) {
        return DocumentClientVersions.electro;
      }
      for (const [version, methods] of Object.entries(supportedClientVersions)) {
        const hasMethods = methods.every((method) => {
          return method in client2 && isFunction(client2[method]);
        });
        if (hasMethods) {
          return version;
        }
      }
    }
    function normalizeClient(client2) {
      if (client2 === void 0) return client2;
      const version = identifyClientVersion(client2);
      switch (version) {
        case DocumentClientVersions.v3:
          return DocumentClientV3Wrapper.init(client2);
        case DocumentClientVersions.v2:
          return DocumentClientV2Wrapper.init(client2);
        case DocumentClientVersions.electro:
          return client2;
        default:
          throw new ElectroError(
            ErrorCodes.InvalidClientProvided,
            "Invalid DynamoDB Document Client provided. ElectroDB supports the v2 and v3 DynamoDB Document Clients from the aws-sdk"
          );
      }
    }
    function normalizeConfig(config = {}) {
      return {
        ...config,
        client: normalizeClient(config.client)
      };
    }
    module2.exports = {
      util,
      v2Methods,
      v3Methods,
      normalizeClient,
      normalizeConfig,
      identifyClientVersion,
      DocumentClientVersions,
      supportedClientVersions,
      DocumentClientV3Wrapper,
      DocumentClientV2Wrapper
    };
  }
});

// node_modules/electrodb/src/entity.js
var require_entity = __commonJS({
  "node_modules/electrodb/src/entity.js"(exports2, module2) {
    "use strict";
    var { Schema } = require_schema();
    var {
      AllPages,
      KeyCasing,
      TableIndex,
      FormatToReturnValues,
      ReturnValues,
      EntityVersions,
      ItemOperations,
      UnprocessedTypes,
      Pager,
      ElectroInstance,
      KeyTypes,
      QueryTypes,
      MethodTypes,
      Comparisons,
      ExpressionTypes,
      ModelVersions,
      ElectroInstanceTypes,
      MaxBatchItems,
      TerminalOperation,
      ResultOrderOption,
      ResultOrderParam,
      IndexTypes,
      KeyAttributesComparisons,
      MethodTypeTranslation,
      TransactionCommitSymbol,
      CastKeyOptions,
      ComparisonTypes,
      DataOptions
    } = require_types();
    var { FilterFactory } = require_filters();
    var { FilterOperations } = require_operations();
    var { WhereFactory } = require_where();
    var { clauses, ChainState } = require_clauses();
    var { EventManager } = require_events();
    var validations = require_validations();
    var c = require_client();
    var u = require_util();
    var e = require_errors();
    var v = require_validations();
    var ImpactedIndexTypeSource = {
      composite: "composite",
      provided: "provided"
    };
    var Entity2 = class {
      constructor(model, config = {}) {
        config = c.normalizeConfig(config);
        this.eventManager = new EventManager({
          listeners: config.listeners
        });
        this.eventManager.add(config.logger);
        this._validateModel(model);
        this.version = EntityVersions.v1;
        this.config = config;
        this.client = config.client;
        this.model = this._parseModel(model, config);
        this.config.table = config.table || model.table;
        this._filterBuilder = new FilterFactory(
          this.model.schema.attributes,
          FilterOperations
        );
        this._whereBuilder = new WhereFactory(
          this.model.schema.attributes,
          FilterOperations
        );
        this._clausesWithFilters = this._filterBuilder.injectFilterClauses(
          clauses,
          this.model.filters
        );
        this._clausesWithFilters = this._whereBuilder.injectWhereClauses(
          this._clausesWithFilters
        );
        this.query = {};
        for (let accessPattern in this.model.indexes) {
          let index = this.model.indexes[accessPattern].index;
          this.query[accessPattern] = (...values) => {
            const options2 = {
              indexType: this.model.indexes[accessPattern].type || IndexTypes.isolated
            };
            return this._makeChain(
              index,
              this._clausesWithFilters,
              clauses.index,
              options2
            ).query(...values);
          };
        }
        this.config.identifiers = config.identifiers || {};
        this.identifiers = {
          entity: this.config.identifiers.entity || "__edb_e__",
          version: this.config.identifiers.version || "__edb_v__"
        };
        this._instance = ElectroInstance.entity;
        this._instanceType = ElectroInstanceTypes.entity;
        this.schema = model;
      }
      get scan() {
        return this._makeChain(
          TableIndex,
          this._clausesWithFilters,
          clauses.index,
          { _isPagination: true }
        ).scan();
      }
      setIdentifier(type = "", identifier = "") {
        if (!this.identifiers[type]) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidIdentifier,
            `Invalid identifier type: "${type}". Valid identifiers include: ${u.commaSeparatedString(
              Object.keys(this.identifiers)
            )}`
          );
        } else {
          this.identifiers[type] = identifier;
        }
      }
      getName() {
        return this.model.entity;
      }
      getVersion() {
        return this.model.version;
      }
      ownsItem(item) {
        return item && this.getName() === item[this.identifiers.entity] && this.getVersion() === item[this.identifiers.version] && validations.isStringHasLength(item[this.identifiers.entity]) && validations.isStringHasLength(item[this.identifiers.version]);
      }
      _attributesIncludeKeys(attributes2 = []) {
        let { pk, sk } = this.model.prefixes[TableIndex];
        let pkFound = false;
        let skFound = false;
        for (let i = 0; i < attributes2.length; i++) {
          const attribute = attributes2[i];
          if (attribute === sk.field) {
            skFound = true;
          }
          if (attribute === pk.field) {
            skFound = true;
          }
          if (pkFound && skFound) {
            return true;
          }
        }
        return false;
      }
      ownsKeys(key = {}) {
        let { pk, sk } = this.model.prefixes[TableIndex];
        let hasSK = this.model.lookup.indexHasSortKeys[TableIndex];
        const typeofPkProvided = typeof key[pk.field];
        const pkPrefixMatch = typeofPkProvided === "string" && key[pk.field].startsWith(pk.prefix);
        const isNumericPk = typeofPkProvided === "number" && pk.cast === "number";
        let pkMatch = pkPrefixMatch || isNumericPk;
        let skMatch = pkMatch && !hasSK;
        if (pkMatch && hasSK) {
          const typeofSkProvided = typeof key[sk.field];
          const skPrefixMatch = typeofSkProvided === "string" && key[sk.field].startsWith(sk.prefix);
          const isNumericSk = typeofSkProvided === "number" && sk.cast === "number";
          skMatch = skPrefixMatch || isNumericSk;
        }
        return pkMatch && skMatch && this._formatKeysToItem(TableIndex, key) !== null;
      }
      ownsCursor(cursor) {
        if (typeof cursor === "string") {
          cursor = u.cursorFormatter.deserialize(cursor);
        }
        return this.ownsKeys(cursor);
      }
      serializeCursor(key) {
        return u.cursorFormatter.serialize(key);
      }
      deserializeCursor(cursor) {
        return u.cursorFormatter.deserialize(cursor);
      }
      /** @depricated pagers no longer exist, use the new cursor api */
      ownsPager(pager, index = TableIndex) {
        if (pager === null) {
          return false;
        }
        let tableIndexFacets = this.model.facets.byIndex[index];
        let indexFacets = this.model.facets.byIndex[index];
        if (tableIndexFacets === void 0 || indexFacets === void 0) {
          return false;
        }
        let matchesTableIndex = tableIndexFacets.all.every((facet) => {
          return pager[facet.name] !== void 0;
        });
        if (!matchesTableIndex) {
          return false;
        }
        return indexFacets.all.every((facet) => {
          return pager[facet.name] !== void 0;
        });
      }
      match(facets = {}) {
        const options2 = { _isPagination: true };
        const match = this._findBestIndexKeyMatch(facets);
        if (match.shouldScan) {
          return this._makeChain(
            TableIndex,
            this._clausesWithFilters,
            clauses.index,
            options2
          ).scan().filter((attr) => {
            let eqFilters = [];
            for (let facet of Object.keys(facets)) {
              if (attr[facet] !== void 0 && facets[facet] !== void 0) {
                eqFilters.push(attr[facet].eq(facets[facet]));
              }
            }
            return eqFilters.join(" AND ");
          });
        } else {
          return this._makeChain(
            match.index,
            this._clausesWithFilters,
            clauses.index,
            options2
          ).query(facets).filter((attr) => {
            let eqFilters = [];
            for (let facet of Object.keys(facets)) {
              if (attr[facet] !== void 0 && facets[facet] !== void 0) {
                eqFilters.push(attr[facet].eq(facets[facet]));
              }
            }
            return eqFilters.join(" AND ");
          });
        }
      }
      find(facets = {}) {
        const options2 = { _isPagination: true };
        const match = this._findBestIndexKeyMatch(facets);
        if (match.shouldScan) {
          return this._makeChain(
            TableIndex,
            this._clausesWithFilters,
            clauses.index,
            options2
          ).scan();
        } else {
          return this._makeChain(
            match.index,
            this._clausesWithFilters,
            clauses.index,
            options2
          ).query(facets);
        }
      }
      collection(collection = "", clauses2 = {}, facets = {}, options2 = {}) {
        const chainOptions = {
          ...options2,
          _isPagination: true,
          _isCollectionQuery: true
        };
        let index = this.model.translations.collections.fromCollectionToIndex[collection];
        if (index === void 0) {
          throw new Error(`Invalid collection: ${collection}`);
        }
        const chain = this._makeChain(index, clauses2, clauses2.index, chainOptions);
        if (options2.indexType === IndexTypes.clustered) {
          return chain.clusteredCollection(collection, facets);
        } else {
          return chain.collection(collection, facets);
        }
      }
      _validateModel(model) {
        return validations.model(model);
      }
      check(compositeAttributes = {}) {
        return this._makeChain(
          TableIndex,
          this._clausesWithFilters,
          clauses.index
        ).check(compositeAttributes);
      }
      get(facets = {}) {
        let index = TableIndex;
        if (Array.isArray(facets)) {
          return this._makeChain(
            index,
            this._clausesWithFilters,
            clauses.index
          ).batchGet(facets);
        } else {
          return this._makeChain(
            index,
            this._clausesWithFilters,
            clauses.index
          ).get(facets);
        }
      }
      delete(facets = {}) {
        let index = TableIndex;
        if (Array.isArray(facets)) {
          return this._makeChain(
            index,
            this._clausesWithFilters,
            clauses.index
          ).batchDelete(facets);
        } else {
          return this._makeChain(
            index,
            this._clausesWithFilters,
            clauses.index
          ).delete(facets);
        }
      }
      put(attributes2 = {}) {
        let index = TableIndex;
        if (Array.isArray(attributes2)) {
          return this._makeChain(
            index,
            this._clausesWithFilters,
            clauses.index
          ).batchPut(attributes2);
        } else {
          return this._makeChain(
            index,
            this._clausesWithFilters,
            clauses.index
          ).put(attributes2);
        }
      }
      upsert(attributes2 = {}) {
        let index = TableIndex;
        return this._makeChain(
          index,
          this._clausesWithFilters,
          clauses.index
        ).upsert(attributes2);
      }
      create(attributes2 = {}) {
        let index = TableIndex;
        let options2 = {};
        return this._makeChain(
          index,
          this._clausesWithFilters,
          clauses.index,
          options2
        ).create(attributes2);
      }
      update(facets = {}) {
        let index = TableIndex;
        return this._makeChain(
          index,
          this._clausesWithFilters,
          clauses.index
        ).update(facets);
      }
      patch(facets = {}) {
        let index = TableIndex;
        let options2 = {};
        return this._makeChain(
          index,
          this._clausesWithFilters,
          clauses.index,
          options2
        ).patch(facets);
      }
      remove(facets = {}) {
        let index = TableIndex;
        let options2 = {};
        return this._makeChain(
          index,
          this._clausesWithFilters,
          clauses.index,
          options2
        ).remove(facets);
      }
      async transactWrite(parameters, config) {
        let response = await this._exec(
          MethodTypes.transactWrite,
          parameters,
          config
        );
        return response;
      }
      async transactGet(parameters, config) {
        let response = await this._exec(
          MethodTypes.transactGet,
          parameters,
          config
        );
        return response;
      }
      async go(method, parameters = {}, config = {}) {
        let stackTrace;
        if (!config.originalErr) {
          stackTrace = new e.ElectroError(e.ErrorCodes.AWSError);
        }
        try {
          switch (method) {
            case MethodTypes.batchWrite:
              return await this.executeBulkWrite(parameters, config);
            case MethodTypes.batchGet:
              return await this.executeBulkGet(parameters, config);
            case MethodTypes.query:
            case MethodTypes.scan:
              return await this.executeQuery(method, parameters, config);
            default:
              return await this.executeOperation(method, parameters, config);
          }
        } catch (err) {
          if (config.originalErr || stackTrace === void 0) {
            return Promise.reject(err);
          } else {
            if (err.__isAWSError) {
              stackTrace.message = `Error thrown by DynamoDB client: "${err.message}" - For more detail on this error reference: https://electrodb.dev/en/reference/errors/#aws-error`;
              stackTrace.cause = err;
              return Promise.reject(stackTrace);
            } else if (err.isElectroError) {
              return Promise.reject(err);
            } else {
              stackTrace.message = new e.ElectroError(
                e.ErrorCodes.UnknownError,
                err.message,
                err
              ).message;
              return Promise.reject(stackTrace);
            }
          }
        }
      }
      async _exec(method, params, config = {}) {
        const notifyQuery = () => {
          this.eventManager.trigger(
            {
              type: "query",
              method,
              params,
              config
            },
            config.listeners
          );
        };
        const notifyResults = (results, success) => {
          this.eventManager.trigger(
            {
              type: "results",
              method,
              config,
              success,
              results
            },
            config.listeners
          );
        };
        const dynamoDBMethod = MethodTypeTranslation[method];
        return this.client[dynamoDBMethod](params).promise().then((results) => {
          notifyQuery();
          notifyResults(results, true);
          return results;
        }).catch((err) => {
          notifyQuery();
          notifyResults(err, false);
          err.__isAWSError = true;
          throw err;
        });
      }
      async executeBulkWrite(parameters, config) {
        if (!Array.isArray(parameters)) {
          parameters = [parameters];
        }
        let results = [];
        let concurrent = this._normalizeConcurrencyValue(config.concurrent);
        let concurrentOperations = u.batchItems(parameters, concurrent);
        for (let operation of concurrentOperations) {
          await Promise.all(
            operation.map(async (params) => {
              let response = await this._exec(
                MethodTypes.batchWrite,
                params,
                config
              );
              if (validations.isFunction(config.parse)) {
                let parsed = config.parse(config, response);
                if (parsed) {
                  results.push(parsed);
                }
              } else {
                let { unprocessed } = this.formatBulkWriteResponse(
                  response,
                  config
                );
                for (let u2 of unprocessed) {
                  results.push(u2);
                }
              }
            })
          );
        }
        return { unprocessed: results };
      }
      _createNewBatchGetOrderMaintainer(config = {}) {
        const pkName = this.model.translations.keys[TableIndex].pk;
        const skName = this.model.translations.keys[TableIndex].sk;
        const enabled = !!config.preserveBatchOrder;
        const table2 = this.config.table;
        const keyFormatter = (record = {}) => {
          const pk = record[pkName];
          const sk = record[skName];
          return `${pk}${sk}`;
        };
        return new u.BatchGetOrderMaintainer({
          table: table2,
          enabled,
          keyFormatter
        });
      }
      _safeMinimum(...values) {
        let eligibleNumbers = [];
        for (let value of values) {
          if (typeof value === "number") {
            eligibleNumbers.push(value);
          }
        }
        if (eligibleNumbers.length) {
          return Math.min(...eligibleNumbers);
        }
        return void 0;
      }
      async executeBulkGet(parameters, config) {
        if (!Array.isArray(parameters)) {
          parameters = [parameters];
        }
        const orderMaintainer = this._createNewBatchGetOrderMaintainer(config);
        orderMaintainer.defineOrder(parameters);
        let concurrent = this._normalizeConcurrencyValue(config.concurrent);
        let concurrentOperations = u.batchItems(parameters, concurrent);
        let resultsAll = config.preserveBatchOrder ? new Array(orderMaintainer.getSize()).fill(null) : [];
        let unprocessedAll = [];
        for (let operation of concurrentOperations) {
          await Promise.all(
            operation.map(async (params) => {
              let response = await this._exec(MethodTypes.batchGet, params, config);
              if (validations.isFunction(config.parse)) {
                resultsAll.push(config.parse(config, response));
              } else {
                this.applyBulkGetResponseFormatting({
                  orderMaintainer,
                  resultsAll,
                  unprocessedAll,
                  response,
                  config
                });
              }
            })
          );
        }
        return { data: resultsAll, unprocessed: unprocessedAll };
      }
      async hydrate(index, keys = [], config) {
        const items = [];
        const validKeys = [];
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          const item = this._formatKeysToItem(index, key);
          if (item !== null) {
            items.push(item);
            validKeys.push(key);
          }
        }
        const results = await this.get(items).go({
          ...config,
          hydrate: false,
          parse: void 0,
          hydrator: void 0,
          _isCollectionQuery: false,
          preserveBatchOrder: true,
          ignoreOwnership: config._providedIgnoreOwnership
        });
        const unprocessed = [];
        const data = [];
        for (let i = 0; i < results.data.length; i++) {
          const key = validKeys[i];
          const item = results.data[i];
          if (!item) {
            if (key) {
              unprocessed.push(key);
            }
          } else {
            data.push(item);
          }
        }
        return {
          unprocessed,
          data
        };
      }
      async executeQuery(method, parameters, config = {}) {
        const indexName = parameters.IndexName;
        let results = config._isCollectionQuery ? {} : [];
        let ExclusiveStartKey = this._formatExclusiveStartKey({
          indexName,
          config
        });
        if (ExclusiveStartKey === null) {
          ExclusiveStartKey = void 0;
        }
        let pages = this._normalizePagesValue(config.pages);
        let iterations = 0;
        let count = 0;
        let hydratedUnprocessed = [];
        const shouldHydrate = config.hydrate && method === MethodTypes.query;
        do {
          let response = await this._exec(
            method,
            { ExclusiveStartKey, ...parameters },
            config
          );
          ExclusiveStartKey = response.LastEvaluatedKey;
          response = this.formatResponse(response, parameters.IndexName, {
            ...config,
            data: shouldHydrate && (!config.data || config.data === DataOptions.attributes) ? "includeKeys" : config.data,
            ignoreOwnership: shouldHydrate || config.ignoreOwnership
          });
          if (config.data === DataOptions.raw) {
            return response;
          } else if (config._isCollectionQuery) {
            for (const entity in response.data) {
              let items = response.data[entity];
              if (shouldHydrate && items.length) {
                const hydrated = await config.hydrator(
                  entity,
                  parameters.IndexName,
                  items,
                  config
                );
                items = hydrated.data;
                hydratedUnprocessed = hydratedUnprocessed.concat(
                  hydrated.unprocessed
                );
              }
              results[entity] = results[entity] || [];
              results[entity] = [...results[entity], ...items];
            }
          } else if (Array.isArray(response.data)) {
            let prevCount = count;
            if (config.count) {
              count += response.data.length;
            }
            let items = response.data;
            const moreItemsThanRequired = !!config.count && count > config.count;
            if (moreItemsThanRequired) {
              items = items.slice(0, config.count - prevCount);
            }
            if (shouldHydrate) {
              const hydrated = await this.hydrate(
                parameters.IndexName,
                items,
                config
              );
              items = hydrated.data;
              hydratedUnprocessed = hydratedUnprocessed.concat(
                hydrated.unprocessed
              );
            }
            results = [...results, ...items];
            if (moreItemsThanRequired || count === config.count) {
              const lastItem = results[results.length - 1];
              ExclusiveStartKey = this._fromCompositeToKeysByIndex({
                indexName,
                provided: lastItem
              });
              break;
            }
          } else {
            return response;
          }
          iterations++;
        } while (ExclusiveStartKey && (pages === AllPages || config.count !== void 0 || iterations < pages) && (config.count === void 0 || count < config.count));
        const cursor = this._formatReturnPager(config, ExclusiveStartKey);
        if (shouldHydrate) {
          return {
            cursor,
            data: results,
            unprocessed: hydratedUnprocessed
          };
        }
        return { data: results, cursor };
      }
      async executeOperation(method, parameters, config) {
        let response = await this._exec(method, parameters, config);
        switch (parameters.ReturnValues) {
          case FormatToReturnValues.none:
            return { data: null };
          case FormatToReturnValues.all_new:
          case FormatToReturnValues.all_old:
          case FormatToReturnValues.updated_new:
          case FormatToReturnValues.updated_old:
            return this.formatResponse(response, TableIndex, config);
          case FormatToReturnValues.default:
          default:
            return this._formatDefaultResponse(
              method,
              parameters.IndexName,
              parameters,
              config,
              response
            );
        }
      }
      _formatDefaultResponse(method, index, parameters, config = {}, response) {
        switch (method) {
          case MethodTypes.put:
          case MethodTypes.create:
            return this.formatResponse(parameters, index, config);
          case MethodTypes.update:
          case MethodTypes.patch:
          case MethodTypes.delete:
          case MethodTypes.remove:
          case MethodTypes.upsert:
            return this.formatResponse(response, index, {
              ...config,
              _objectOnEmpty: true
            });
          default:
            return this.formatResponse(response, index, config);
        }
      }
      cleanseRetrievedData(item = {}, options2 = {}) {
        let data = {};
        let names = this.model.schema.translationForRetrieval;
        for (let [attr, value] of Object.entries(item)) {
          let name = names[attr];
          if (name) {
            data[name] = value;
          } else if (options2.data === DataOptions.includeKeys) {
            data[attr] = value;
          }
        }
        return data;
      }
      formatBulkWriteResponse(response = {}, config = {}) {
        if (!response || !response.UnprocessedItems) {
          return response;
        }
        const table2 = config.table || this.getTableName();
        const index = TableIndex;
        let unprocessed = response.UnprocessedItems[table2];
        if (Array.isArray(unprocessed) && unprocessed.length) {
          unprocessed = unprocessed.map((request) => {
            if (request.PutRequest) {
              return this.formatResponse(request.PutRequest, index, config).data;
            } else if (request.DeleteRequest) {
              if (config.unprocessed === UnprocessedTypes.raw) {
                return request.DeleteRequest.Key;
              } else {
                return this._formatKeysToItem(index, request.DeleteRequest.Key);
              }
            } else {
              throw new Error("Unknown response format");
            }
          });
        } else {
          unprocessed = [];
        }
        return { unprocessed };
      }
      applyBulkGetResponseFormatting({
        resultsAll,
        unprocessedAll,
        orderMaintainer,
        response = {},
        config = {}
      }) {
        const table2 = config.table || this.getTableName();
        const index = TableIndex;
        if (!response.UnprocessedKeys || !response.Responses) {
          throw new Error("Unknown response format");
        }
        if (response.UnprocessedKeys[table2] && response.UnprocessedKeys[table2].Keys && Array.isArray(response.UnprocessedKeys[table2].Keys)) {
          for (let value of response.UnprocessedKeys[table2].Keys) {
            if (config && config.unprocessed === UnprocessedTypes.raw) {
              unprocessedAll.push(value);
            } else {
              unprocessedAll.push(this._formatKeysToItem(index, value));
            }
          }
        }
        if (response.Responses[table2] && Array.isArray(response.Responses[table2])) {
          const responses = response.Responses[table2];
          for (let i = 0; i < responses.length; i++) {
            const item = responses[i];
            const slot = orderMaintainer.getOrder(item);
            const formatted = this.formatResponse({ Item: item }, index, config);
            if (slot !== -1) {
              resultsAll[slot] = formatted.data;
            } else {
              resultsAll.push(formatted.data);
            }
          }
        }
      }
      formatResponse(response, index, config = {}) {
        let stackTrace;
        if (!config.originalErr) {
          stackTrace = new e.ElectroError(e.ErrorCodes.AWSError);
        }
        try {
          let results = {};
          if (validations.isFunction(config.parse)) {
            results = config.parse(config, response);
          } else if (config.data === DataOptions.raw && !config._isPagination) {
            if (response.TableName) {
              results = {};
            } else {
              results = response;
            }
          } else if (config.data === DataOptions.raw && (config._isPagination || config.lastEvaluatedKeyRaw)) {
            results = response;
          } else {
            if (response.Item) {
              if (config.ignoreOwnership && config.attributes && config.attributes.length > 0 && !this._attributesIncludeKeys(config.attributes) || (config.ignoreOwnership || config.hydrate) && this.ownsKeys(response.Item) || this.ownsItem(response.Item)) {
                results = this.model.schema.formatItemForRetrieval(
                  response.Item,
                  config
                );
                if (Object.keys(results).length === 0) {
                  results = null;
                }
              } else if (!config._objectOnEmpty) {
                results = null;
              }
            } else if (response.Items) {
              results = [];
              for (let item of response.Items) {
                if (config.ignoreOwnership && config.attributes && config.attributes.length > 0 && !this._attributesIncludeKeys(config.attributes) || (config.ignoreOwnership || config.hydrate) && this.ownsKeys(item) || this.ownsItem(item)) {
                  let record = this.model.schema.formatItemForRetrieval(
                    item,
                    config
                  );
                  if (Object.keys(record).length > 0) {
                    results.push(record);
                  }
                }
              }
            } else if (response.Attributes) {
              results = this.model.schema.formatItemForRetrieval(
                response.Attributes,
                config
              );
              if (Object.keys(results).length === 0) {
                results = null;
              }
            } else if (config._objectOnEmpty) {
              return {
                data: {
                  ...config._includeOnResponseItem
                }
              };
            } else {
              results = null;
            }
          }
          if (config._isPagination || response.LastEvaluatedKey) {
            const nextPage = this._formatReturnPager(
              config,
              response.LastEvaluatedKey
            );
            return { cursor: nextPage || null, data: results };
          }
          return { data: results };
        } catch (err) {
          if (config.originalErr || stackTrace === void 0 || err.isElectroError) {
            throw err;
          } else {
            stackTrace.message = `Error thrown by DynamoDB client: "${err.message}" - For more detail on this error reference: https://electrodb.dev/en/reference/errors/#aws-error`;
            stackTrace.cause = err;
            throw stackTrace;
          }
        }
      }
      parse(item, options2 = {}) {
        if (item === void 0 || item === null) {
          return null;
        }
        const config = {
          ...options2 || {},
          ignoreOwnership: true
        };
        return this.formatResponse(item, TableIndex, config);
      }
      _fromCompositeToKeys({ provided }, options2 = {}) {
        if (!provided || Object.keys(provided).length === 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionCompositeProvided,
            "Invalid conversion composite provided"
          );
        }
        let keys = {};
        const secondaryIndexStrictMode = options2.strict === "all" || options2.strict === "pk" ? "pk" : "none";
        for (const { index } of Object.values(this.model.indexes)) {
          const indexKeys = this._fromCompositeToKeysByIndex(
            { indexName: index, provided },
            {
              strict: index === TableIndex ? options2.strict : secondaryIndexStrictMode
            }
          );
          if (indexKeys) {
            keys = {
              ...keys,
              ...indexKeys
            };
          }
        }
        if (Object.keys(keys).length === 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionCompositeProvided,
            "Invalid conversion composite provided"
          );
        }
        return keys;
      }
      _fromCompositeToCursor({ provided }, options2 = {}) {
        const keys = this._fromCompositeToKeys({ provided }, options2);
        if (!keys || Object.keys(keys).length === 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionCompositeProvided,
            "Invalid conversion composite provided"
          );
        }
        return u.cursorFormatter.serialize(keys);
      }
      _fromKeysToCursor({ provided }, options2 = {}) {
        if (!provided || Object.keys(provided).length === 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionKeysProvided,
            "Invalid keys provided"
          );
        }
        return u.cursorFormatter.serialize(provided);
      }
      _fromKeysToComposite({ provided }, options2 = {}) {
        if (!provided || Object.keys(provided).length === 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionKeysProvided,
            "Provided keys could not be used to form composite attributes"
          );
        }
        let keys = {};
        for (const { index } of Object.values(this.model.indexes)) {
          const composite = this._fromKeysToCompositeByIndex(
            { indexName: index, provided },
            options2
          );
          if (composite) {
            for (const attribute in composite) {
              if (keys[attribute] === void 0) {
                keys[attribute] = composite[attribute];
              }
            }
          }
        }
        if (Object.keys(keys).length === 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionKeysProvided,
            "Provided keys could not be used to form composite attributes"
          );
        }
        return keys;
      }
      _fromCursorToKeys({ provided }, options2 = {}) {
        if (typeof provided !== "string") {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionCursorProvided,
            "Invalid conversion cursor provided"
          );
        }
        return u.cursorFormatter.deserialize(provided);
      }
      _fromCursorToComposite({ provided }, options2 = {}) {
        if (typeof provided !== "string") {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionCursorProvided,
            "Invalid conversion cursor provided"
          );
        }
        const keys = this._fromCursorToKeys({ provided }, options2);
        if (!keys) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionCursorProvided,
            "Invalid conversion cursor provided"
          );
        }
        return this._fromKeysToComposite({ provided: keys }, options2);
      }
      _fromCompositeToCursorByIndex({ indexName = TableIndex, provided }, options2 = {}) {
        if (!provided || Object.keys(provided).length === 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionCompositeProvided,
            "Invalid conversion composite provided"
          );
        }
        const keys = this._formatSuppliedPager(indexName, provided, {
          relaxedPk: false,
          relaxedSk: false
        });
        return this._fromKeysToCursorByIndex(
          { indexName, provided: keys },
          options2
        );
      }
      _fromCompositeToKeysByIndex({ indexName = TableIndex, provided }, options2 = {}) {
        return this._formatSuppliedPager(indexName, provided, {
          relaxedPk: options2.strict !== "pk" && options2.strict !== "all",
          relaxedSk: options2.strict !== "all"
        });
      }
      _fromCursorToKeysByIndex({ provided }, options2 = {}) {
        if (typeof provided !== "string" || provided.length < 1) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionCursorProvided,
            "Invalid conversion cursor provided"
          );
        }
        return u.cursorFormatter.deserialize(provided);
      }
      _fromKeysToCursorByIndex({ indexName = TableIndex, provided }, options2 = {}) {
        const isValidTableIndex = this._verifyKeys({
          indexName: TableIndex,
          provided
        });
        const isValidIndex = this._verifyKeys({ indexName, provided });
        if (!isValidTableIndex) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionKeysProvided,
            "Provided keys did not include valid properties for the primary index"
          );
        } else if (!isValidIndex) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionKeysProvided,
            `Provided keys did not include valid properties for the index "${indexName}"`
          );
        }
        const keys = this._trimKeysToIndex({ indexName, provided });
        if (!keys || Object.keys(keys).length === 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionKeysProvided,
            `Provided keys not defined`
          );
        }
        return u.cursorFormatter.serialize(provided);
      }
      _fromKeysToCompositeByIndex({ indexName = TableIndex, provided }, options2 = {}) {
        let allKeys = {};
        const indexKeys = this._deconstructIndex({
          index: indexName,
          keys: provided
        });
        if (!indexKeys) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionKeysProvided,
            `Provided keys did not include valid properties for the index "${indexName}"`
          );
        }
        allKeys = {
          ...indexKeys
        };
        let tableKeys;
        if (indexName !== TableIndex) {
          tableKeys = this._deconstructIndex({ index: TableIndex, keys: provided });
        }
        if (tableKeys === null) {
          return allKeys;
        }
        allKeys = {
          ...allKeys,
          ...tableKeys
        };
        if (Object.keys(allKeys).length === 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionKeysProvided,
            "Provided keys could not be used to form composite attributes"
          );
        }
        return allKeys;
      }
      _fromCursorToCompositeByIndex({ indexName = TableIndex, provided }, options2 = {}) {
        const keys = this._fromCursorToKeysByIndex(
          { indexName, provided },
          options2
        );
        if (!keys || Object.keys(keys).length === 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionCursorProvided,
            "Invalid conversion cursor provided"
          );
        }
        return this._fromKeysToCompositeByIndex(
          { indexName, provided: keys },
          options2
        );
      }
      _trimKeysToIndex({ indexName = TableIndex, provided }) {
        if (!provided) {
          return null;
        }
        const pkName = this.model.translations.keys[indexName].pk;
        const skName = this.model.translations.keys[indexName].sk;
        const tablePKName = this.model.translations.keys[TableIndex].pk;
        const tableSKName = this.model.translations.keys[TableIndex].sk;
        const keys = {
          [pkName]: provided[pkName],
          [skName]: provided[skName],
          [tablePKName]: provided[tablePKName],
          [tableSKName]: provided[tableSKName]
        };
        if (!keys || Object.keys(keys).length === 0) {
          return null;
        }
        return keys;
      }
      _verifyKeys({ indexName, provided }) {
        if (!provided) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConversionKeysProvided,
            `Provided keys not defined`
          );
        }
        const pkName = this.model.translations.keys[indexName].pk;
        const skName = this.model.translations.keys[indexName].sk;
        return provided[pkName] !== void 0 && (!skName || provided[skName] !== void 0);
      }
      _formatReturnPager(config, lastEvaluatedKey) {
        let page = lastEvaluatedKey || null;
        if (config.data === DataOptions.raw || config.pager === Pager.raw) {
          return page;
        }
        return config.formatCursor.serialize(page) || null;
      }
      _formatExclusiveStartKey({ config, indexName = TableIndex }) {
        let exclusiveStartKey = config.cursor;
        if (config.data === DataOptions.raw || config.pager === Pager.raw) {
          return this._trimKeysToIndex({ provided: exclusiveStartKey, indexName }) || null;
        }
        let keys;
        if (config.pager === Pager.item) {
          keys = this._fromCompositeToKeysByIndex({
            indexName,
            provided: exclusiveStartKey
          });
        } else {
          keys = config.formatCursor.deserialize(exclusiveStartKey);
        }
        if (!keys) {
          return null;
        }
        return this._trimKeysToIndex({ provided: keys, indexName }) || null;
      }
      setClient(client2) {
        if (client2) {
          this.client = c.normalizeClient(client2);
        }
      }
      setTableName(tableName) {
        this.config.table = tableName;
      }
      getTableName() {
        return this.config.table;
      }
      getTableName() {
        return this.config.table;
      }
      _chain(state, clauses2, clause) {
        let current = {};
        for (let child of clause.children) {
          current[child] = (...args) => {
            state.prev = state.self;
            state.self = child;
            let results = clauses2[child].action(this, state, ...args);
            if (clauses2[child].children.length) {
              return this._chain(results, clauses2, clauses2[child]);
            } else {
              return results;
            }
          };
        }
        return current;
      }
      /* istanbul ignore next */
      _makeChain(index = TableIndex, clauses2, rootClause, options2 = {}) {
        let state = new ChainState({
          index,
          options: options2,
          attributes: options2.attributes || this.model.schema.attributes,
          hasSortKey: options2.hasSortKey || this.model.lookup.indexHasSortKeys[index],
          compositeAttributes: options2.compositeAttributes || this.model.facets.byIndex[index]
        });
        return state.init(this, clauses2, rootClause);
      }
      _regexpEscape(string) {
        return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      }
      _normalizeConcurrencyValue(value = 1) {
        value = parseInt(value);
        if (isNaN(value) || value < 1) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidConcurrencyOption,
            "Query option 'concurrency' must be of type 'number' and greater than zero."
          );
        }
        return value;
      }
      _normalizePagesValue(value) {
        if (value === AllPages) {
          return value;
        }
        value = parseInt(value);
        if (isNaN(value) || value < 1) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidPagesOption,
            `Query option 'pages' must be of type 'number' and greater than zero or the string value '${AllPages}'`
          );
        }
        return value;
      }
      _normalizeLimitValue(value) {
        if (value !== void 0) {
          value = parseInt(value);
          if (isNaN(value) || value < 1) {
            throw new e.ElectroError(
              e.ErrorCodes.InvalidLimitOption,
              "Query option 'limit' must be of type 'number' and greater than zero."
            );
          }
        }
        return value;
      }
      _createKeyDeconstructor(prefixes = {}, labels = [], attributes2 = {}) {
        let { prefix, isCustom, postfix, cast } = prefixes;
        let names = [];
        let types = [];
        let pattern = `^${this._regexpEscape(prefix || "")}`;
        for (let { name, label } of labels) {
          let attr = attributes2[name];
          if (isCustom && !name && label) {
            pattern += `${this._regexpEscape(label)}`;
          } else if (isCustom) {
            pattern += `${this._regexpEscape(
              label === void 0 ? "" : label
            )}(.+)`;
          } else {
            pattern += `#${this._regexpEscape(
              label === void 0 ? name : label
            )}_(.+)`;
          }
          names.push(name);
          if (attr) {
            types.push(attr.type);
          }
        }
        if (typeof postfix === "string") {
          pattern += this._regexpEscape(postfix);
        }
        pattern += "$";
        let regex = new RegExp(pattern, "i");
        return ({ key } = {}) => {
          const typeofKey = typeof key;
          if (!["string", "number"].includes(typeofKey)) {
            return null;
          }
          key = `${key}`;
          const isNumeric = cast === CastKeyOptions.number && typeofKey === "number";
          let match = key.match(regex);
          let results = {};
          if (match || isNumeric) {
            for (let i = 0; i < names.length; i++) {
              let keyName = names[i];
              let value = isNumeric ? key : match[i + 1];
              let type = types[i];
              switch (type) {
                case "number": {
                  value = parseFloat(value);
                  break;
                }
                case "boolean": {
                  value = value === "true";
                  break;
                }
              }
              if (keyName && value !== void 0) {
                results[keyName] = value;
              }
            }
          } else {
            results = null;
          }
          return results;
        };
      }
      _deconstructIndex({ index = TableIndex, keys = {} } = {}) {
        const hasIndex = !!this.model.translations.keys[index];
        if (!hasIndex) {
          return null;
        }
        let pkName = this.model.translations.keys[index].pk;
        let skName = this.model.translations.keys[index].sk;
        const indexHasSortKey = this.model.lookup.indexHasSortKeys[index];
        const deconstructors = this.model.keys.deconstructors[index];
        const pk = keys[pkName];
        if (pk === void 0) {
          return null;
        }
        const pkComposites = deconstructors.pk({ key: pk });
        if (pkComposites === null) {
          return null;
        }
        let skComposites = {};
        if (indexHasSortKey) {
          const sk = keys[skName];
          if (sk === void 0) {
            return null;
          }
          skComposites = deconstructors.sk({ key: sk });
          if (skComposites === null) {
            return null;
          }
        }
        return {
          ...pkComposites,
          ...skComposites
        };
      }
      _formatKeysToItem(index = TableIndex, keys) {
        if (keys === null || typeof keys !== "object" || Object.keys(keys).length === 0) {
          return keys;
        }
        let tableIndex = TableIndex;
        let indexParts = this._deconstructIndex({ index, keys });
        if (indexParts === null) {
          return null;
        }
        if (index !== tableIndex) {
          const tableIndexParts = this._deconstructIndex({
            index: tableIndex,
            keys
          });
          if (tableIndexParts === null) {
            return null;
          }
          indexParts = { ...indexParts, ...tableIndexParts };
        }
        let noPartsFound = Object.keys(indexParts).length === 0 && this.model.facets.byIndex[tableIndex].all.length > 0;
        let partsAreIncomplete = this.model.facets.byIndex[tableIndex].all.find(
          (facet) => indexParts[facet.name] === void 0
        );
        if (noPartsFound || partsAreIncomplete) {
          return null;
        }
        return indexParts;
      }
      _constructPagerIndex(index = TableIndex, item, options2 = {}) {
        let pkAttributes = options2.relaxedPk ? item : this._expectFacets(item, this.model.facets.byIndex[index].pk);
        let skAttributes = options2.relaxedSk ? item : this._expectFacets(item, this.model.facets.byIndex[index].sk);
        let keys = this._makeIndexKeys({
          index,
          pkAttributes,
          skAttributes: [skAttributes]
        });
        return this._makeParameterKey(index, keys.pk, ...keys.sk);
      }
      _formatSuppliedPager(index = TableIndex, item, options2 = {}) {
        if (typeof item !== "object" || Object.keys(item).length === 0) {
          return item;
        }
        let tableIndex = TableIndex;
        let pager = this._constructPagerIndex(index, item, options2);
        if (index !== tableIndex) {
          pager = {
            ...pager,
            ...this._constructPagerIndex(tableIndex, item, options2)
          };
        }
        return pager;
      }
      _normalizeExecutionOptions({ provided = [], context = {} } = {}) {
        let config = {
          includeKeys: false,
          originalErr: false,
          raw: false,
          params: {},
          page: {},
          lastEvaluatedKeyRaw: false,
          table: void 0,
          concurrent: void 0,
          parse: void 0,
          pager: Pager.named,
          unprocessed: UnprocessedTypes.item,
          response: "default",
          cursor: null,
          data: "attributes",
          consistent: void 0,
          compare: ComparisonTypes.keys,
          complete: false,
          ignoreOwnership: false,
          _providedIgnoreOwnership: false,
          _isPagination: false,
          _isCollectionQuery: false,
          pages: 1,
          count: void 0,
          listeners: [],
          preserveBatchOrder: false,
          attributes: [],
          terminalOperation: void 0,
          formatCursor: u.cursorFormatter,
          order: void 0,
          hydrate: false,
          hydrator: (_entity, _indexName, items) => items,
          _includeOnResponseItem: {}
        };
        return provided.filter(Boolean).reduce((config2, option) => {
          if (typeof option.order === "string") {
            switch (option.order.toLowerCase()) {
              case "asc":
                config2.params[ResultOrderParam] = ResultOrderOption.asc;
                break;
              case "desc":
                config2.params[ResultOrderParam] = ResultOrderOption.desc;
                break;
              default:
                throw new e.ElectroError(
                  e.ErrorCodes.InvalidOptions,
                  `Invalid value for query option "order" provided. Valid options include 'asc' and 'desc, received: "${option.order}"`
                );
            }
          }
          if (typeof option.compare === "string") {
            const type = ComparisonTypes[option.compare.toLowerCase()];
            if (type) {
              config2.compare = type;
              if (type === ComparisonTypes.v2 && option.complete === void 0) {
                config2.complete = true;
              }
            } else {
              throw new e.ElectroError(
                e.ErrorCodes.InvalidOptions,
                `Invalid value for query option "compare" provided. Valid options include ${u.commaSeparatedString(
                  Object.keys(ComparisonTypes)
                )}, received: "${option.compare}"`
              );
            }
          }
          if (typeof option.response === "string" && option.response.length) {
            const format = ReturnValues[option.response];
            if (format === void 0) {
              throw new e.ElectroError(
                e.ErrorCodes.InvalidOptions,
                `Invalid value for query option "format" provided: "${option.format}". Allowed values include ${u.commaSeparatedString(
                  Object.keys(ReturnValues)
                )}.`
              );
            } else if (format !== ReturnValues.default) {
              config2.response = format;
              if (context.operation === MethodTypes.transactWrite) {
                config2.params.ReturnValuesOnConditionCheckFailure = FormatToReturnValues[format];
              } else {
                config2.params.ReturnValues = FormatToReturnValues[format];
              }
            }
          }
          if (option.formatCursor) {
            const isValid = ["serialize", "deserialize"].every(
              (method) => method in option.formatCursor && validations.isFunction(option.formatCursor[method])
            );
            if (isValid) {
              config2.formatCursor = option.formatCursor;
            } else {
              throw new e.ElectroError(
                e.ErrorCodes.InvalidOptions,
                `Invalid value for query option "formatCursor" provided. Formatter interface must have serialize and deserialize functions`
              );
            }
          }
          if (option.terminalOperation in TerminalOperation) {
            config2.terminalOperation = TerminalOperation[option.terminalOperation];
          }
          if (Array.isArray(option.attributes)) {
            config2.attributes = config2.attributes.concat(option.attributes);
          }
          if (option.preserveBatchOrder === true) {
            config2.preserveBatchOrder = true;
          }
          if (option.pages !== void 0) {
            config2.pages = option.pages;
          }
          if (option._isCollectionQuery === true) {
            config2._isCollectionQuery = true;
          }
          if (option.includeKeys === true) {
            config2.includeKeys = true;
          }
          if (option.originalErr === true) {
            config2.originalErr = true;
          }
          if (option.raw === true) {
            config2.raw = true;
          }
          if (option._isPagination) {
            config2._isPagination = true;
          }
          if (option.lastEvaluatedKeyRaw === true) {
            config2.lastEvaluatedKeyRaw = true;
            config2.pager = Pager.raw;
            config2.unprocessed = UnprocessedTypes.raw;
          }
          if (option.cursor) {
            config2.cursor = option.cursor;
          }
          if (option.data) {
            if (!DataOptions[option.data]) {
              throw new e.ElectroError(
                e.ErrorCodes.InvalidOptions,
                `Query option 'data' must be one of ${u.commaSeparatedString(
                  Object.keys(DataOptions)
                )}.`
              );
            }
            config2.data = option.data;
            switch (option.data) {
              case DataOptions.raw:
                config2.raw = true;
                break;
              case DataOptions.includeKeys:
                config2.includeKeys = true;
                break;
            }
          }
          if (option.count !== void 0) {
            if (typeof option.count !== "number" || option.count < 1) {
              throw new e.ElectroError(
                e.ErrorCodes.InvalidOptions,
                `Query option 'count' must be of type 'number' and greater than zero.`
              );
            }
            config2.count = option.count;
          }
          if (option.consistent === true) {
            config2.consistent = true;
            config2.params.ConsistentRead = true;
          }
          if (option.limit !== void 0) {
            config2.limit = option.limit;
            config2.params.Limit = option.limit;
          }
          if (validations.isStringHasLength(option.table)) {
            config2.params.TableName = option.table;
            config2.table = option.table;
          }
          if (option.concurrent !== void 0) {
            config2.concurrent = option.concurrent;
          }
          if (validations.isFunction(option.parse)) {
            config2.parse = option.parse;
          }
          if (typeof option.pager === "string") {
            if (typeof Pager[option.pager] === "string") {
              config2.pager = option.pager;
            } else {
              throw new e.ElectroError(
                e.ErrorCodes.InvalidOptions,
                `Invalid value for option "pager" provided: "${option.pager}". Allowed values include ${u.commaSeparatedString(
                  Object.keys(Pager)
                )}.`
              );
            }
          }
          if (typeof option.unprocessed === "string") {
            if (typeof UnprocessedTypes[option.unprocessed] === "string") {
              config2.unproessed = UnprocessedTypes[option.unprocessed];
            } else {
              throw new e.ElectroError(
                e.ErrorCodes.InvalidOptions,
                `Invalid value for option "unprocessed" provided: "${option.unprocessed}". Allowed values include ${u.commaSeparatedString(
                  Object.keys(UnprocessedTypes)
                )}.`
              );
            }
          }
          if (option.ignoreOwnership) {
            config2.ignoreOwnership = option.ignoreOwnership;
            config2._providedIgnoreOwnership = option.ignoreOwnership;
          }
          if (option.listeners) {
            if (Array.isArray(option.listeners)) {
              config2.listeners = config2.listeners.concat(option.listeners);
            }
          }
          if (option.logger) {
            if (validations.isFunction(option.logger)) {
              config2.listeners.push(option.logger);
            } else {
              throw new e.ElectroError(
                e.ErrorCodes.InvalidLoggerProvided,
                `Loggers must be of type function`
              );
            }
          }
          if (option.hydrate) {
            config2.hydrate = true;
            config2.ignoreOwnership = true;
          }
          if (validations.isFunction(option.hydrator)) {
            config2.hydrator = option.hydrator;
          }
          if (option._includeOnResponseItem) {
            config2._includeOnResponseItem = {
              ...config2._includeOnResponseItem,
              ...option._includeOnResponseItem
            };
          }
          config2.page = Object.assign({}, config2.page, option.page);
          config2.params = Object.assign({}, config2.params, option.params);
          return config2;
        }, config);
      }
      _applyParameterOptions({ params = {}, options: options2 = {} } = {}) {
        let parameters = Object.assign({}, params);
        for (let customParameter of Object.keys(options2.params || {})) {
          if (options2.params[customParameter] !== void 0) {
            parameters[customParameter] = options2.params[customParameter];
          }
        }
        return parameters;
      }
      addListeners(logger) {
        this.eventManager.add(logger);
      }
      _addLogger(logger) {
        if (validations.isFunction(logger)) {
          this.addListeners(logger);
        } else {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidLoggerProvided,
            `Logger must be of type function`
          );
        }
      }
      _getPrimaryIndexFieldNames() {
        let hasSortKey = this.model.lookup.indexHasSortKeys[TableIndex];
        let accessPattern = this.model.translations.indexes.fromIndexToAccessPattern[TableIndex];
        let pkField = this.model.indexes[accessPattern].pk.field;
        let skField;
        if (hasSortKey) {
          skField = this.model.indexes[accessPattern].sk.field;
        }
        return {
          pk: pkField,
          sk: skField
        };
      }
      _applyParameterExpressionTypes(params, filter) {
        const conditions = filter[ExpressionTypes.ConditionExpression];
        if (conditions.build().length > 0) {
          if (typeof params[ExpressionTypes.ConditionExpression] === "string" && params[ExpressionTypes.ConditionExpression].length > 0) {
            params[ExpressionTypes.ConditionExpression] = `${params[ExpressionTypes.ConditionExpression]} AND ${conditions.build()}`;
          } else {
            params[ExpressionTypes.ConditionExpression] = conditions.build();
          }
          if (Object.keys(conditions.getNames()).length > 0) {
            params.ExpressionAttributeNames = params.ExpressionAttributeNames || {};
            params.ExpressionAttributeNames = Object.assign(
              {},
              conditions.getNames(),
              params.ExpressionAttributeNames
            );
          }
          if (Object.keys(conditions.getValues()).length > 0) {
            params.ExpressionAttributeValues = params.ExpressionAttributeValues || {};
            params.ExpressionAttributeValues = Object.assign(
              {},
              conditions.getValues(),
              params.ExpressionAttributeValues
            );
          }
        }
        return params;
      }
      /* istanbul ignore next */
      _params(state, config = {}) {
        const {
          keys = {},
          method = "",
          put = {},
          update = {},
          filter = {},
          upsert,
          updateProxy
        } = state.query;
        let consolidatedQueryFacets = this._consolidateQueryFacets(keys.sk);
        let params = {};
        switch (method) {
          case MethodTypes.check:
          case MethodTypes.get:
          case MethodTypes.delete:
          case MethodTypes.remove:
            params = this._makeSimpleIndexParams(
              keys.pk,
              ...consolidatedQueryFacets
            );
            break;
          case MethodTypes.upsert:
            params = this._makeUpsertParams(
              { update, upsert, updateProxy },
              keys.pk,
              ...keys.sk
            );
            break;
          case MethodTypes.put:
          case MethodTypes.create:
            params = this._makePutParams(put, keys.pk, ...keys.sk);
            break;
          case MethodTypes.update:
          case MethodTypes.patch:
            params = this._makeUpdateParams(
              update,
              keys.pk,
              ...consolidatedQueryFacets
            );
            break;
          case MethodTypes.scan:
            params = this._makeScanParam(filter[ExpressionTypes.FilterExpression]);
            break;
          default:
            throw new Error(`Invalid method: ${method}`);
        }
        let appliedParameters = this._applyParameterOptions({
          params,
          options: config
        });
        return this._applyParameterExpressions(
          method,
          appliedParameters,
          config,
          filter
        );
      }
      _applyParameterExpressions(method, parameters, config, filter) {
        if (method !== MethodTypes.get) {
          return this._applyParameterExpressionTypes(parameters, filter);
        } else {
          parameters = this._applyProjectionExpressions({ parameters, config });
          return this._applyParameterExpressionTypes(parameters, filter);
        }
      }
      _applyProjectionExpressions({ parameters = {}, config = {} } = {}) {
        const attributes2 = config.attributes || [];
        if (attributes2.length === 0) {
          return parameters;
        }
        const requiresRawResponse = config.data === DataOptions.raw;
        const enforcesOwnership = !config.ignoreOwnership;
        const requiresUserInvolvedPagination = TerminalOperation[config.terminalOperation] === TerminalOperation.page;
        const isServerBound = TerminalOperation[config.terminalOperation] === TerminalOperation.go || TerminalOperation[config.terminalOperation] === TerminalOperation.page;
        const unknownAttributes = [];
        let attributeFields = /* @__PURE__ */ new Set();
        for (const attributeName of attributes2) {
          const fieldName = this.model.schema.getFieldName(attributeName);
          if (typeof fieldName !== "string") {
            unknownAttributes.push(attributeName);
          } else {
            attributeFields.add(fieldName);
          }
        }
        if (attributeFields.size === 0 || unknownAttributes.length > 0) {
          let message = "Unknown attributes provided in query options";
          if (unknownAttributes.length) {
            message += `: ${u.commaSeparatedString(unknownAttributes)}`;
          }
          throw new e.ElectroError(e.ErrorCodes.InvalidOptions, message);
        }
        parameters.ExpressionAttributeNames = parameters.ExpressionAttributeNames || {};
        if (
          // The response you're returning:
          // 1. is not expected to be raw
          !requiresRawResponse && // 2. is making a request to the server
          isServerBound && // 3. will expect entity identifiers down stream
          enforcesOwnership
        ) {
          attributeFields.add(this.identifiers.entity);
          attributeFields.add(this.identifiers.version);
          if (requiresUserInvolvedPagination && config.pager !== Pager.raw) {
            let tableIndexFacets = this.model.facets.byIndex[TableIndex];
            let indexFacets = this.model.facets.byIndex[parameters.IndexName] || {
              all: []
            };
            for (const attribute of [...tableIndexFacets.all, ...indexFacets.all]) {
              const fieldName = this.model.schema.getFieldName(attribute.name);
              attributeFields.add(fieldName);
            }
          }
        }
        for (const attributeField of attributeFields) {
          parameters.ExpressionAttributeNames["#" + attributeField] = attributeField;
        }
        if (typeof parameters.ProjectionExpression === "string") {
          parameters.ProjectionExpression = [
            parameters.ProjectionExpression,
            ...Object.keys([parameters.ExpressionAttributeNames])
          ].join(", ");
        } else {
          parameters.ProjectionExpression = Object.keys(
            parameters.ExpressionAttributeNames
          ).join(", ");
        }
        return parameters;
      }
      _batchGetParams(state, config = {}) {
        let table2 = config.table || this.getTableName();
        let userDefinedParams = config.params || {};
        delete userDefinedParams.TableName;
        let records = [];
        for (let itemState of state.subStates) {
          let method = itemState.query.method;
          let params = this._params(itemState, config);
          if (method === MethodTypes.get) {
            let { Key } = params;
            records.push(Key);
          }
        }
        let batches = u.batchItems(records, MaxBatchItems.batchGet);
        return batches.map((batch) => {
          return {
            RequestItems: {
              [table2]: {
                ...userDefinedParams,
                Keys: batch
              }
            }
          };
        });
      }
      _batchWriteParams(state, config = {}) {
        let table2 = config.table || this.getTableName();
        let records = [];
        for (let itemState of state.subStates) {
          let method = itemState.query.method;
          let params = this._params(itemState, config);
          switch (method) {
            case MethodTypes.put:
              let { Item } = params;
              records.push({ PutRequest: { Item } });
              break;
            case MethodTypes.delete:
              let { Key } = params;
              records.push({ DeleteRequest: { Key } });
              break;
            default:
              throw new Error("Invalid method type");
          }
        }
        let batches = u.batchItems(records, MaxBatchItems.batchWrite);
        return batches.map((batch) => {
          return {
            RequestItems: {
              [table2]: batch
            }
          };
        });
      }
      _makeParameterKey(index, pk, sk) {
        let hasSortKey = this.model.lookup.indexHasSortKeys[index];
        let accessPattern = this.model.translations.indexes.fromIndexToAccessPattern[index];
        let pkField = this.model.indexes[accessPattern].pk.field;
        let key = {
          [pkField]: pk
        };
        if (hasSortKey && sk !== void 0) {
          let skField = this.model.indexes[accessPattern].sk.field;
          key[skField] = sk;
        }
        return key;
      }
      getIdentifierExpressions(alias = this.getName()) {
        let name = this.getName();
        let version = this.getVersion();
        return {
          names: {
            [`#${this.identifiers.entity}`]: this.identifiers.entity,
            [`#${this.identifiers.version}`]: this.identifiers.version
          },
          values: {
            [`:${this.identifiers.entity}_${alias}`]: name,
            [`:${this.identifiers.version}_${alias}`]: version
          },
          expression: `(#${this.identifiers.entity} = :${this.identifiers.entity}_${alias} AND #${this.identifiers.version} = :${this.identifiers.version}_${alias})`
        };
      }
      /* istanbul ignore next */
      _makeScanParam(filter = {}) {
        let indexBase = TableIndex;
        let hasSortKey = this.model.lookup.indexHasSortKeys[indexBase];
        let accessPattern = this.model.translations.indexes.fromIndexToAccessPattern[indexBase];
        let pkField = this.model.indexes[accessPattern].pk.field;
        let { pk, sk } = this._makeIndexKeys({
          index: indexBase
        });
        let keys = this._makeParameterKey(indexBase, pk, ...sk);
        for (let key in keys) {
          if (keys[key] === void 0 || keys[key] === "") {
            delete keys[key];
          }
        }
        let keyExpressions = this._expressionAttributeBuilder(keys);
        const expressionAttributeNames = this._mergeExpressionsAttributes(
          filter.getNames(),
          keyExpressions.ExpressionAttributeNames
        );
        const expressionAttributeValues = this._mergeExpressionsAttributes(
          filter.getValues(),
          keyExpressions.ExpressionAttributeValues
        );
        let params = {
          TableName: this.getTableName()
        };
        if (Object.keys(expressionAttributeNames).length) {
          params["ExpressionAttributeNames"] = expressionAttributeNames;
        }
        if (Object.keys(expressionAttributeValues).length) {
          params["ExpressionAttributeValues"] = expressionAttributeValues;
        }
        let filterExpressions = [];
        if (keys[pkField]) {
          filterExpressions.push(`begins_with(#${pkField}, :${pkField})`);
        }
        if (hasSortKey) {
          let skField = this.model.indexes[accessPattern].sk.field;
          if (keys[skField]) {
            filterExpressions.push(`begins_with(#${skField}, :${skField})`);
          }
        }
        if (filter.build()) {
          filterExpressions.push(filter.build());
        }
        if (filterExpressions.length) {
          params.FilterExpression = filterExpressions.join(" AND ");
        }
        return params;
      }
      _makeSimpleIndexParams(partition, sort) {
        let index = TableIndex;
        let keys = this._makeIndexKeys({
          index,
          pkAttributes: partition,
          skAttributes: [sort]
        });
        let Key = this._makeParameterKey(index, keys.pk, ...keys.sk);
        let TableName = this.getTableName();
        return { Key, TableName };
      }
      _removeAttributes(item, keys) {
        let copy = { ...item };
        for (let key of Object.keys(keys)) {
          delete copy[key];
        }
        return copy;
      }
      _makeUpdateParams(update = {}, pk = {}, sk = {}) {
        let primaryIndexAttributes = { ...pk, ...sk };
        let modifiedAttributeValues = {};
        let modifiedAttributeNames = {};
        for (const path of Object.keys(update.paths)) {
          const { value, name } = update.paths[path];
          modifiedAttributeValues[path] = value;
          modifiedAttributeNames[path] = name;
        }
        const removed = {};
        for (const name in update.impacted) {
          if (update.impacted[name] === ItemOperations.remove) {
            removed[name] = name;
          }
        }
        modifiedAttributeValues = this._removeAttributes(modifiedAttributeValues, {
          ...pk,
          ...sk,
          ...this.model.schema.getReadOnly()
        });
        const preparedUpdateValues = this.model.schema.applyAttributeSetters(
          modifiedAttributeValues
        );
        const attributesAndComposites = {
          ...preparedUpdateValues
        };
        const {
          indexKey,
          updatedKeys,
          deletedKeys = []
        } = this._getUpdatedKeys(
          pk,
          sk,
          attributesAndComposites,
          removed,
          update.composites
        );
        const accessPattern = this.model.translations.indexes.fromIndexToAccessPattern[TableIndex];
        for (const path of Object.keys(preparedUpdateValues)) {
          if (modifiedAttributeNames[path] !== void 0 && preparedUpdateValues[path] !== void 0) {
            update.updateValue(
              modifiedAttributeNames[path],
              preparedUpdateValues[path]
            );
          } else if (preparedUpdateValues[path] !== void 0) {
            const attr = this.model.schema.getAttribute(path);
            if (attr) {
              update.set(attr.field, preparedUpdateValues[path]);
            } else {
              update.set(path, preparedUpdateValues[path]);
            }
          }
        }
        for (const indexKey2 of Object.keys(updatedKeys)) {
          const isNotTablePK = indexKey2 !== this.model.indexes[accessPattern].pk.field;
          const isNotTableSK = indexKey2 !== this.model.indexes[accessPattern].sk.field;
          const wasNotAlreadyModified = modifiedAttributeNames[indexKey2] === void 0;
          if (isNotTablePK && isNotTableSK && wasNotAlreadyModified) {
            update.set(indexKey2, updatedKeys[indexKey2]);
          }
        }
        for (const indexKey2 of deletedKeys) {
          const isNotTablePK = indexKey2 !== this.model.indexes[accessPattern].pk.field;
          const isNotTableSK = indexKey2 !== this.model.indexes[accessPattern].sk.field;
          const wasNotAlreadyModified = modifiedAttributeNames[indexKey2] === void 0;
          if (isNotTablePK && isNotTableSK && wasNotAlreadyModified) {
            update.remove(indexKey2);
          }
        }
        for (const primaryIndexAttribute of Object.keys(primaryIndexAttributes)) {
          const attribute = this.model.schema.attributes[primaryIndexAttribute];
          const isNotTablePK = !!(attribute && attribute.field !== this.model.indexes[accessPattern].pk.field);
          const isNotTableSK = !!(attribute && attribute.field !== this.model.indexes[accessPattern].sk.field);
          const wasNotAlreadyModified = modifiedAttributeNames[primaryIndexAttribute] === void 0;
          if (isNotTablePK && isNotTableSK && wasNotAlreadyModified) {
            update.set(
              attribute.field,
              primaryIndexAttributes[primaryIndexAttribute]
            );
          }
        }
        update.set(this.identifiers.entity, this.getName());
        update.set(this.identifiers.version, this.getVersion());
        return {
          UpdateExpression: update.build(),
          ExpressionAttributeNames: update.getNames(),
          ExpressionAttributeValues: update.getValues(),
          TableName: this.getTableName(),
          Key: indexKey
        };
      }
      /* istanbul ignore next */
      _makePutParams({ data } = {}, pk, sk) {
        let appliedData = this.model.schema.applyAttributeSetters(data);
        let { updatedKeys, setAttributes } = this._getPutKeys(
          pk,
          sk && sk.facets,
          appliedData
        );
        let translatedFields = this.model.schema.translateToFields(setAttributes);
        return {
          Item: {
            ...translatedFields,
            ...updatedKeys,
            [this.identifiers.entity]: this.getName(),
            [this.identifiers.version]: this.getVersion()
          },
          TableName: this.getTableName()
        };
      }
      _maybeApplyUpsertUpdate({ fields = [], operation, updateProxy, update }) {
        for (let [field, value] of fields) {
          const name = this.model.schema.translationForRetrieval[field];
          if (name) {
            const attribute = this.model.schema.attributes[name];
            if (this.model.schema.readOnlyAttributes.has(name) && (!attribute || !attribute.indexes || attribute.indexes.length === 0)) {
              update.set(field, value, ItemOperations.ifNotExists);
            } else {
              updateProxy.performOperation({
                value,
                operation,
                path: name,
                force: true
              });
            }
          } else {
            update.set(field, value, operation);
          }
        }
      }
      _makeUpsertParams({ update, upsert } = {}) {
        return {
          TableName: this.getTableName(),
          UpdateExpression: update.build(),
          ExpressionAttributeNames: update.getNames(),
          ExpressionAttributeValues: update.getValues(),
          Key: upsert.indexKey
        };
      }
      _updateExpressionBuilder(data) {
        let accessPattern = this.model.translations.indexes.fromIndexToAccessPattern[TableIndex];
        let skip = [
          // Removing readOnly from here because this should have been validated earlier in the process. Not checking
          // readOnly here also allows `watch` properties to circumnavigate the readOnly check for attributes that
          // should be calculated but not updatable by the user.
          // ...this.model.schema.getReadOnly(),
          // ...this.model.facets.fields,
          this.model.indexes[accessPattern].pk.field,
          this.model.indexes[accessPattern].sk.field
        ];
        return this._expressionAttributeBuilder(data, ItemOperations.set, { skip });
      }
      _queryKeyExpressionAttributeBuilder(index, pk, ...sks) {
        let translate = { ...this.model.translations.keys[index] };
        let restrict = ["pk"];
        let keys = { pk };
        sks = sks.filter((sk) => sk !== void 0);
        for (let i = 0; i < sks.length; i++) {
          let id = `sk${i + 1}`;
          keys[id] = sks[i];
          restrict.push(id);
          translate[id] = translate["sk"];
        }
        let keyExpressions = this._expressionAttributeBuilder(
          keys,
          ItemOperations.set,
          {
            translate,
            restrict
          }
        );
        return {
          ExpressionAttributeNames: Object.assign(
            {},
            keyExpressions.ExpressionAttributeNames
          ),
          ExpressionAttributeValues: Object.assign(
            {},
            keyExpressions.ExpressionAttributeValues
          )
        };
      }
      /* istanbul ignore next */
      _expressionAttributeBuilder(item = {}, operation = "", options2 = {}) {
        let {
          require: require2 = [],
          reject = [],
          restrict = [],
          skip = [],
          translate = {}
        } = options2;
        let expressions = {
          UpdateExpression: [],
          ExpressionAttributeNames: {},
          ExpressionAttributeValues: {}
        };
        if (require2.length) {
          let props = Object.keys(item);
          let missing = require2.filter((prop) => !props.includes(prop));
          if (!missing) {
            throw new e.ElectroError(
              e.ErrorCodes.MissingAttribute,
              `Item is missing attributes: ${u.commaSeparatedString(missing)}`
            );
          }
        }
        for (let prop in item) {
          if (reject.includes(prop)) {
            throw new Error(`Invalid attribute ${prop}`);
          }
          if (restrict.length && !restrict.includes(prop)) {
            throw new Error(
              `${prop} is not a valid attribute: ${u.commaSeparatedString(
                restrict
              )}`
            );
          }
          if (prop === void 0 || skip.includes(prop)) {
            continue;
          }
          let name = prop;
          let value = item[prop];
          let nameProp = `#${prop}`;
          let valProp = `:${prop}`;
          if (translate[prop]) {
            name = translate[prop];
          }
          expressions.UpdateExpression.push(`${nameProp} = ${valProp}`);
          expressions.ExpressionAttributeNames[nameProp] = name;
          expressions.ExpressionAttributeValues[valProp] = value;
        }
        expressions.UpdateExpression = `${operation.toUpperCase()} ${expressions.UpdateExpression.join(
          ", "
        )}`;
        return expressions;
      }
      _makeQueryKeys(state, options2) {
        let consolidatedQueryFacets = this._consolidateQueryFacets(
          state.query.keys.sk
        );
        switch (state.query.type) {
          case QueryTypes.is:
            return this._makeIndexKeys({
              index: state.query.index,
              pkAttributes: state.query.keys.pk,
              skAttributes: consolidatedQueryFacets,
              indexType: state.query.options.indexType,
              queryType: state.query.type,
              isCollection: state.query.options._isCollectionQuery
            });
          default:
            return this._makeIndexKeysWithoutTail(
              state,
              consolidatedQueryFacets,
              options2
            );
        }
      }
      /* istanbul ignore next */
      _queryParams(state = {}, options2 = {}) {
        const indexKeys = this._makeQueryKeys(state, options2);
        let parameters = {};
        switch (state.query.type) {
          case QueryTypes.is:
            parameters = this._makeIsQueryParams(
              state.query,
              state.query.index,
              state.query.filter[ExpressionTypes.FilterExpression],
              indexKeys.pk,
              ...indexKeys.sk
            );
            break;
          case QueryTypes.begins:
            parameters = this._makeBeginsWithQueryParams(
              state.query.options,
              state.query.index,
              state.query.filter[ExpressionTypes.FilterExpression],
              indexKeys.pk,
              ...indexKeys.sk
            );
            break;
          case QueryTypes.collection:
            parameters = this._makeBeginsWithQueryParams(
              state.query.options,
              state.query.index,
              state.query.filter[ExpressionTypes.FilterExpression],
              indexKeys.pk,
              this._getCollectionSk(state.query.collection)
            );
            break;
          case QueryTypes.clustered_collection:
            parameters = this._makeBeginsWithQueryParams(
              state.query.options,
              state.query.index,
              state.query.filter[ExpressionTypes.FilterExpression],
              indexKeys.pk,
              ...indexKeys.sk
            );
            break;
          case QueryTypes.between:
            parameters = this._makeBetweenQueryParams(
              state.query.options,
              state.query.index,
              state.query.filter[ExpressionTypes.FilterExpression],
              indexKeys.pk,
              ...indexKeys.sk
            );
            break;
          case QueryTypes.gte:
          case QueryTypes.gt:
          case QueryTypes.lte:
          case QueryTypes.lt:
            parameters = this._makeComparisonQueryParams(
              state.query.index,
              state.query.type,
              state.query.filter[ExpressionTypes.FilterExpression],
              indexKeys,
              options2,
              state.query.options
            );
            break;
          default:
            throw new Error(`Invalid query type: ${state.query.type}`);
        }
        const appliedParameters = this._applyParameterOptions({
          params: parameters,
          options: options2
        });
        return this._applyProjectionExpressions({
          parameters: appliedParameters,
          config: options2
        });
      }
      _makeBetweenQueryParams(queryOptions, index, filter, pk, ...sk) {
        let keyExpressions = this._queryKeyExpressionAttributeBuilder(
          index,
          pk,
          ...sk
        );
        delete keyExpressions.ExpressionAttributeNames["#sk2"];
        const customExpressions = {
          names: queryOptions.expressions && queryOptions.expressions.names || {},
          values: queryOptions.expressions && queryOptions.expressions.values || {},
          expression: queryOptions.expressions && queryOptions.expressions.expression || ""
        };
        let params = {
          TableName: this.getTableName(),
          ExpressionAttributeNames: this._mergeExpressionsAttributes(
            filter.getNames(),
            keyExpressions.ExpressionAttributeNames,
            customExpressions.names
          ),
          ExpressionAttributeValues: this._mergeExpressionsAttributes(
            filter.getValues(),
            keyExpressions.ExpressionAttributeValues,
            customExpressions.values
          ),
          KeyConditionExpression: `#pk = :pk and #sk1 BETWEEN :sk1 AND :sk2`
        };
        if (index) {
          params["IndexName"] = index;
        }
        let expressions = [customExpressions.expression, filter.build()].filter(Boolean).join(" AND ");
        if (expressions.length) {
          params.FilterExpression = expressions;
        }
        return params;
      }
      _makeInclusiveQueryParams(options2, index, filter, pk, sk, type) {
        let keyExpressions = this._queryKeyExpressionAttributeBuilder(
          index,
          pk,
          sk
        );
        let KeyConditionExpression = "#pk = :pk";
        if (this.model.lookup.indexHasSortKeys[index] && (typeof keyExpressions.ExpressionAttributeValues[":sk1"] === "number" || typeof keyExpressions.ExpressionAttributeValues[":sk1"] === "string" && keyExpressions.ExpressionAttributeValues[":sk1"].length > 0)) {
          if (type === QueryTypes.is) {
            KeyConditionExpression = `${KeyConditionExpression} and #sk1 = :sk1`;
          } else {
            KeyConditionExpression = `${KeyConditionExpression} and begins_with(#sk1, :sk1)`;
          }
        } else {
          delete keyExpressions.ExpressionAttributeNames["#sk1"];
          delete keyExpressions.ExpressionAttributeValues[":sk1"];
        }
        let customExpressions = {
          names: options2.expressions && options2.expressions.names || {},
          values: options2.expressions && options2.expressions.values || {},
          expression: options2.expressions && options2.expressions.expression || ""
        };
        let params = {
          KeyConditionExpression,
          TableName: this.getTableName(),
          ExpressionAttributeNames: this._mergeExpressionsAttributes(
            filter.getNames(),
            keyExpressions.ExpressionAttributeNames,
            customExpressions.names
          ),
          ExpressionAttributeValues: this._mergeExpressionsAttributes(
            filter.getValues(),
            keyExpressions.ExpressionAttributeValues,
            customExpressions.values
          )
        };
        if (index) {
          params["IndexName"] = index;
        }
        let expressions = [customExpressions.expression, filter.build()].filter(Boolean).join(" AND ");
        if (expressions.length) {
          params.FilterExpression = expressions;
        }
        return params;
      }
      _makeIsQueryParams(query, index, filter, pk, sk) {
        const { options: options2, keys } = query;
        const providedSks = keys.provided.filter((item) => item.type === KeyTypes.sk).map((item) => item.attribute);
        const skDefinition = this.model.facets.byIndex[index] && this.model.facets.byIndex[index].sk && Array.isArray(this.model.facets.byIndex[index].sk) && this.model.facets.byIndex[index].sk || [];
        const skCompositeAttributes = new Set(skDefinition);
        const skIsCompletelyFulfilled = skCompositeAttributes.size === providedSks.length && skDefinition.every((attr) => providedSks.includes(attr));
        if (skIsCompletelyFulfilled) {
          return this._makeInclusiveQueryParams(
            options2,
            index,
            filter,
            pk,
            sk,
            QueryTypes.is
          );
        } else {
          return this._makeBeginsWithQueryParams(options2, index, filter, pk, sk);
        }
      }
      _makeBeginsWithQueryParams(options2, index, filter, pk, sk) {
        return this._makeInclusiveQueryParams(
          options2,
          index,
          filter,
          pk,
          sk,
          QueryTypes.begins
        );
      }
      _mergeExpressionsAttributes(...expressionAttributes) {
        let merged = {};
        for (let obj of expressionAttributes) {
          if (obj) {
            merged = { ...merged, ...obj };
          }
        }
        return merged;
      }
      _getComparisonOperator(comparison, skType, comparisonType) {
        if (skType === "number") {
          return Comparisons[comparison];
        } else if (comparisonType === ComparisonTypes.v2) {
          return KeyAttributesComparisons[comparison];
        } else {
          return Comparisons[comparison];
        }
      }
      /* istanbul ignore next */
      _makeComparisonQueryParams(index = TableIndex, comparison = "", filter = {}, indexKeys = {}, options2 = {}, queryOptions = {}) {
        const { pk } = indexKeys;
        const sk = indexKeys.sk[0];
        let operator = this._getComparisonOperator(
          comparison,
          typeof sk,
          options2.compare
        );
        if (!operator) {
          throw new Error(
            `Unexpected comparison operator "${comparison}", expected ${u.commaSeparatedString(
              Object.keys(KeyAttributesComparisons)
            )}`
          );
        }
        let customExpressions = {
          names: queryOptions.expressions && queryOptions.expressions.names || {},
          values: queryOptions.expressions && queryOptions.expressions.values || {},
          expression: queryOptions.expressions && queryOptions.expressions.expression || ""
        };
        let keyExpressions = this._queryKeyExpressionAttributeBuilder(
          index,
          pk,
          sk
        );
        let params = {
          TableName: this.getTableName(),
          ExpressionAttributeNames: this._mergeExpressionsAttributes(
            filter.getNames(),
            keyExpressions.ExpressionAttributeNames,
            customExpressions.names
          ),
          ExpressionAttributeValues: this._mergeExpressionsAttributes(
            filter.getValues(),
            keyExpressions.ExpressionAttributeValues,
            customExpressions.values
          ),
          KeyConditionExpression: `#pk = :pk and #sk1 ${operator} :sk1`
        };
        if (index) {
          params["IndexName"] = index;
        }
        let expressions = [customExpressions.expression, filter.build()].filter(Boolean).join(" AND ");
        if (expressions.length) {
          params.FilterExpression = expressions;
        }
        return params;
      }
      _expectIndexFacets(attributes2, facets, { utilizeIncludedOnlyIndexes, skipConditionCheck } = {}) {
        let [isIncomplete, { incomplete, complete }] = this._getIndexImpact(
          attributes2,
          facets,
          { utilizeIncludedOnlyIndexes, skipConditionCheck }
        );
        if (isIncomplete) {
          let incompleteAccessPatterns = incomplete.map(
            ({ index }) => this.model.translations.indexes.fromIndexToAccessPattern[index]
          );
          let missingFacets = incomplete.reduce(
            (result, { missing }) => [...result, ...missing],
            []
          );
          throw new e.ElectroError(
            e.ErrorCodes.IncompleteCompositeAttributes,
            `Incomplete composite attributes: Without the composite attributes ${u.commaSeparatedString(
              missingFacets
            )} the following access patterns cannot be updated: ${u.commaSeparatedString(
              incompleteAccessPatterns.filter((val2) => val2 !== void 0)
            )}. If a composite attribute is readOnly and cannot be set, use the 'composite' chain method on update to supply the value for key formatting purposes.`
          );
        }
        return complete;
      }
      _makeKeysFromAttributes(indexes, attributes2, conditions) {
        let indexKeys = {};
        for (let [index, keyTypes] of Object.entries(indexes)) {
          const shouldMakeKeys = !this._indexConditionIsDefined(index) || conditions[index];
          if (!shouldMakeKeys && index !== TableIndex) {
            continue;
          }
          let keys = this._makeIndexKeys({
            index,
            pkAttributes: attributes2,
            skAttributes: [attributes2]
          });
          if (keyTypes.pk || keyTypes.sk) {
            indexKeys[index] = {};
          }
          if (keyTypes.pk && keys.pk) {
            indexKeys[index].pk = keys.pk;
          }
          if (keyTypes.sk && keys.sk) {
            indexKeys[index].sk = keys.sk;
          } else {
            indexKeys[index].sk = [];
          }
        }
        return indexKeys;
      }
      _makePutKeysFromAttributes(indexes, attributes2) {
        let indexKeys = {};
        for (let index of indexes) {
          const shouldMakeKeys = this.model.indexes[this.model.translations.indexes.fromIndexToAccessPattern[index]].condition(attributes2);
          if (!shouldMakeKeys) {
            continue;
          }
          indexKeys[index] = this._makeIndexKeys({
            index,
            pkAttributes: attributes2,
            skAttributes: [attributes2]
          });
        }
        return indexKeys;
      }
      _getPutKeys(pk, sk, set, validationAssistance) {
        let setAttributes = set;
        let updateIndex = TableIndex;
        let keyTranslations = this.model.translations.keys;
        let keyAttributes = { ...sk, ...pk };
        let completeFacets = this._expectIndexFacets(
          { ...setAttributes, ...validationAssistance },
          { ...keyAttributes },
          { set }
        );
        let deletedKeys = [];
        for (const [indexName, condition] of Object.entries(
          completeFacets.conditions
        )) {
          if (!condition) {
            deletedKeys.push(this.model.translations.keys[indexName][KeyTypes.pk]);
            if (this.model.translations.keys[indexName][KeyTypes.sk]) {
              deletedKeys.push(
                this.model.translations.keys[indexName][KeyTypes.sk]
              );
            }
          }
        }
        if (!completeFacets.indexes.includes(updateIndex)) {
          completeFacets.indexes.push(updateIndex);
        }
        let composedKeys = this._makePutKeysFromAttributes(completeFacets.indexes, {
          ...keyAttributes,
          ...setAttributes
        });
        let updatedKeys = {};
        let indexKey = {};
        for (let [index, keys] of Object.entries(composedKeys)) {
          let { pk: pk2, sk: sk2 } = keyTranslations[index];
          if (index === updateIndex) {
            indexKey[pk2] = keys.pk;
            if (sk2) {
              indexKey[sk2] = keys.sk[0];
            }
          }
          if (keys.pk !== void 0 && keys.pk !== "") {
            updatedKeys[pk2] = keys.pk;
          }
          if (sk2 && keys.sk[0] !== void 0 && keys.sk[0] !== "") {
            updatedKeys[sk2] = keys.sk[0];
          }
        }
        return { indexKey, updatedKeys, setAttributes, deletedKeys };
      }
      _getUpdatedKeys(pk, sk, set, removed, composite = {}) {
        let updateIndex = TableIndex;
        let keyTranslations = this.model.translations.keys;
        let keyAttributes = { ...sk, ...pk };
        let completeFacets = this._expectIndexFacets(
          { ...set },
          { ...composite, ...keyAttributes },
          { utilizeIncludedOnlyIndexes: true }
        );
        const removedKeyImpact = this._expectIndexFacets(
          { ...removed },
          { ...keyAttributes },
          { skipConditionCheck: true }
        );
        if (completeFacets.impactedIndexTypes[updateIndex] === void 0) {
          completeFacets.impactedIndexTypes[updateIndex] = {
            pk: "pk",
            sk: "sk"
          };
        }
        let composedKeys = this._makeKeysFromAttributes(
          completeFacets.impactedIndexTypes,
          { ...composite, ...set, ...keyAttributes },
          completeFacets.conditions
        );
        let updatedKeys = {};
        let deletedKeys = [];
        let indexKey = {};
        for (const [indexName, condition] of Object.entries(
          completeFacets.conditions
        )) {
          if (!condition) {
            deletedKeys.push(this.model.translations.keys[indexName][KeyTypes.pk]);
            if (this.model.translations.keys[indexName][KeyTypes.sk]) {
              deletedKeys.push(
                this.model.translations.keys[indexName][KeyTypes.sk]
              );
            }
          }
        }
        for (const keys of Object.values(removedKeyImpact.impactedIndexTypes)) {
          deletedKeys = deletedKeys.concat(Object.values(keys));
        }
        for (let [index, keys] of Object.entries(composedKeys)) {
          let { pk: pk2, sk: sk2 } = keyTranslations[index];
          if (index === updateIndex) {
            indexKey[pk2] = keys.pk;
            if (sk2) {
              indexKey[sk2] = keys.sk[0];
            }
          } else {
            let noImpactSk = Array.isArray(keys.sk) && keys.sk.length === 0;
            let indexHasSk = this.model.lookup.indexHasSortKeys[index];
            let noAttributeSk = indexHasSk && this.model.facets.byIndex[index].sk.length === 0;
            let hasPrefix = indexHasSk && this.model.prefixes[index].sk.prefix !== void 0;
            let hasPostfix = indexHasSk && this.model.prefixes[index].sk.prefix !== void 0;
            if (noImpactSk && noAttributeSk) {
              let key = hasPrefix ? this.model.prefixes[index].sk.prefix : "";
              if (hasPostfix) {
                key = `${key}${this.model.prefixes[index].sk.postfix}`;
              }
              if (key) {
                keys.sk.push(key);
              }
            }
          }
          if (keys.pk) {
            updatedKeys[pk2] = keys.pk;
          }
          if (sk2 && keys.sk[0]) {
            updatedKeys[sk2] = keys.sk[0];
          }
        }
        return { indexKey, updatedKeys, deletedKeys };
      }
      _indexConditionIsDefined(index) {
        const definition = this.model.indexes[this.model.translations.indexes.fromIndexToAccessPattern[index]];
        return definition && definition.conditionDefined;
      }
      /* istanbul ignore next */
      _getIndexImpact(attributes2 = {}, included = {}, { utilizeIncludedOnlyIndexes, skipConditionCheck } = {}) {
        let includedFacets = Object.keys(included);
        let impactedIndexes = {};
        let conditions = {};
        let impactedIndexTypes = {};
        let impactedIndexTypeSources = {};
        let completedIndexes = [];
        let facets = {};
        for (let [attribute, indexes] of Object.entries(this.model.facets.byAttr)) {
          if (attributes2[attribute] !== void 0) {
            facets[attribute] = attributes2[attribute];
            indexes.forEach((definition) => {
              const { index, type } = definition;
              impactedIndexes[index] = impactedIndexes[index] || {};
              impactedIndexes[index][type] = impactedIndexes[index][type] || [];
              impactedIndexes[index][type].push(attribute);
              impactedIndexTypes[index] = impactedIndexTypes[index] || {};
              impactedIndexTypes[index][type] = this.model.translations.keys[index][type];
              impactedIndexTypeSources[index] = impactedIndexTypeSources[index] || {};
              impactedIndexTypeSources[index][type] = ImpactedIndexTypeSource.provided;
            });
          }
        }
        if (utilizeIncludedOnlyIndexes) {
          for (const [index, { pk, sk }] of Object.entries(
            this.model.facets.byIndex
          )) {
            if (index === TableIndex || !this._indexConditionIsDefined(index)) {
              continue;
            }
            if (pk && pk.length && pk.every((attr) => included[attr] !== void 0)) {
              pk.forEach((attr) => {
                facets[attr] = included[attr];
              });
              impactedIndexes[index] = impactedIndexes[index] || {};
              impactedIndexes[index][KeyTypes.pk] = [...pk];
              impactedIndexTypes[index] = impactedIndexTypes[index] || {};
              impactedIndexTypes[index][KeyTypes.pk] = this.model.translations.keys[index][KeyTypes.pk];
              impactedIndexTypeSources[index] = impactedIndexTypeSources[index] || {};
              impactedIndexTypeSources[index][KeyTypes.pk] = impactedIndexTypeSources[index][KeyTypes.pk] || ImpactedIndexTypeSource.composite;
            }
            if (sk && sk.length && sk.every((attr) => included[attr] !== void 0)) {
              if (this.model.translations.keys[index][KeyTypes.sk]) {
                sk.forEach((attr) => {
                  facets[attr] = included[attr];
                });
                impactedIndexes[index] = impactedIndexes[index] || {};
                impactedIndexes[index][KeyTypes.sk] = [...sk];
                impactedIndexTypes[index] = impactedIndexTypes[index] || {};
                impactedIndexTypes[index][KeyTypes.sk] = this.model.translations.keys[index][KeyTypes.sk];
                impactedIndexTypeSources[index] = impactedIndexTypeSources[index] || {};
                impactedIndexTypeSources[index][KeyTypes.sk] = impactedIndexTypeSources[index][KeyTypes.sk] || ImpactedIndexTypeSource.composite;
              }
            }
          }
        }
        let indexesWithMissingComposites = Object.entries(
          this.model.facets.byIndex
        ).map(([index, definition]) => {
          const { pk, sk } = definition;
          let impacted = impactedIndexes[index];
          let impact = {
            index,
            definition,
            missing: []
          };
          if (impacted) {
            let missingPk = impacted[KeyTypes.pk] && impacted[KeyTypes.pk].length !== pk.length;
            let missingSk = impacted[KeyTypes.sk] && impacted[KeyTypes.sk].length !== sk.length;
            if (missingPk) {
              impact.missing = [
                ...impact.missing,
                ...pk.filter((attr) => {
                  return !impacted[KeyTypes.pk].includes(attr) && !includedFacets.includes(attr);
                })
              ];
            }
            if (missingSk) {
              impact.missing = [
                ...impact.missing,
                ...sk.filter(
                  (attr) => !impacted[KeyTypes.sk].includes(attr) && !includedFacets.includes(attr)
                )
              ];
            }
            if (!missingPk && !missingSk) {
              completedIndexes.push(index);
            }
          }
          return impact;
        });
        let incomplete = [];
        for (const { index, missing, definition } of indexesWithMissingComposites) {
          const indexConditionIsDefined = this._indexConditionIsDefined(index);
          if (skipConditionCheck || index === TableIndex || !indexConditionIsDefined) {
            incomplete.push({ index, missing });
            conditions[index] = true;
            continue;
          }
          const memberAttributeIsImpacted = impactedIndexTypeSources[index] && (impactedIndexTypeSources[index][KeyTypes.pk] === ImpactedIndexTypeSource.provided || impactedIndexTypeSources[index][KeyTypes.sk] === ImpactedIndexTypeSource.provided);
          const allMemberAttributesAreIncluded = definition.all.every(
            ({ name }) => included[name] !== void 0
          );
          if (memberAttributeIsImpacted || allMemberAttributesAreIncluded) {
            const missingAttributes = definition.all.filter(
              ({ name }) => attributes2[name] === void 0 && included[name] === void 0 || missing.includes(name)
            ).map(({ name }) => name);
            if (missingAttributes.length) {
              throw new e.ElectroError(
                e.ErrorCodes.IncompleteIndexCompositesAttributesProvided,
                `Incomplete composite attributes provided for index ${index}. Write operations that include composite attributes, for indexes with a condition callback defined, must always provide values for every index composite. This is to ensure consistency between index values and attribute values. Missing composite attributes identified: ${u.commaSeparatedString(
                  missingAttributes
                )}`
              );
            }
            const accessPattern = this.model.translations.indexes.fromIndexToAccessPattern[index];
            let shouldMakeKeys = !!this.model.indexes[accessPattern].condition({
              ...attributes2,
              ...included
            });
            conditions[index] = shouldMakeKeys;
            if (!shouldMakeKeys) {
              continue;
            }
          } else {
            incomplete.push({ index, missing });
          }
        }
        incomplete = incomplete.filter(({ missing }) => missing.length);
        let isIncomplete = !!incomplete.length;
        let complete = {
          facets,
          indexes: completedIndexes,
          impactedIndexTypes,
          conditions
        };
        return [isIncomplete, { incomplete, complete }];
      }
      _consolidateQueryFacets(queryFacets) {
        let sk1 = {};
        let sk2 = {};
        for (let { type, facets } of queryFacets) {
          if (type === QueryTypes.between) {
            sk1 = { ...sk1, ...facets };
          } else if (type === QueryTypes.and) {
            sk2 = { ...sk2, ...facets };
          } else {
            sk1 = { ...sk1, ...facets };
            sk2 = { ...sk2, ...facets };
          }
        }
        return [sk1, sk2];
      }
      _buildQueryFacets(facets, skFacets) {
        let queryFacets = this._findProperties(facets, skFacets).reduce(
          (result, [name, value]) => {
            if (value !== void 0) {
              result[name] = value;
            }
            return result;
          },
          {}
        );
        return { ...queryFacets };
      }
      /* istanbul ignore next */
      _expectFacets(obj = {}, properties = [], type = "key composite attributes") {
        let [incompletePk, missing, matching] = this._expectProperties(
          obj,
          properties
        );
        if (incompletePk) {
          throw new e.ElectroError(
            e.ErrorCodes.IncompleteCompositeAttributes,
            `Incomplete or invalid ${type} supplied. Missing properties: ${u.commaSeparatedString(
              missing
            )}`
          );
        } else {
          return matching;
        }
      }
      _findProperties(obj, properties) {
        return properties.map((name) => [name, obj[name]]);
      }
      _expectProperties(obj, properties) {
        let missing = [];
        let matching = {};
        this._findProperties(obj, properties).forEach(([name, value]) => {
          if (value === void 0) {
            missing.push(name);
          } else {
            matching[name] = value;
          }
        });
        return [!!missing.length, missing, matching];
      }
      _makeKeyFixings({
        service,
        entity,
        version = "1",
        tableIndex,
        modelVersion,
        isClustered,
        schema
      }) {
        let keys = {
          pk: {
            prefix: "",
            field: tableIndex.pk.field,
            casing: tableIndex.pk.casing,
            isCustom: tableIndex.customFacets.pk,
            cast: tableIndex.pk.cast
          },
          sk: {
            prefix: "",
            casing: tableIndex.sk.casing,
            isCustom: tableIndex.customFacets.sk,
            field: tableIndex.sk ? tableIndex.sk.field : void 0,
            cast: tableIndex.sk ? tableIndex.sk.cast : void 0
          }
        };
        let pk = `$${service}`;
        let sk = "";
        let entityKeys = "";
        let postfix = "";
        let collectionPrefix = this._makeCollectionPrefix(tableIndex.collection);
        if (validations.isStringHasLength(collectionPrefix)) {
          sk = `${collectionPrefix}`;
          entityKeys += `#${entity}`;
        } else {
          entityKeys += `$${entity}`;
        }
        if (modelVersion === ModelVersions.beta) {
          pk = `${pk}_${version}`;
        } else {
          entityKeys = `${entityKeys}_${version}`;
        }
        if (isClustered) {
          postfix = entityKeys;
        } else {
          sk = `${sk}${entityKeys}`;
        }
        if (Object.keys(tableIndex.sk).length === 0) {
          pk += sk;
          if (isClustered) {
            pk += postfix;
          }
        }
        if (!keys.pk.isCustom) {
          if (tableIndex.scope) {
            pk = `${pk}_${tableIndex.scope}`;
          }
          keys.pk.prefix = u.formatKeyCasing(pk, tableIndex.pk.casing);
        }
        if (!keys.sk.isCustom) {
          keys.sk.prefix = u.formatKeyCasing(sk, tableIndex.sk.casing);
          keys.sk.postfix = u.formatKeyCasing(postfix, tableIndex.sk.casing);
        }
        const castKeys = tableIndex.hasSk ? [tableIndex.pk, tableIndex.sk] : [tableIndex.pk];
        for (const castKey of castKeys) {
          if (castKey.cast === CastKeyOptions.string) {
            keys[castKey.type].cast = CastKeyOptions.string;
          } else if (
            // custom keys with only one facet and no labels are numeric by default
            castKey.cast === void 0 && castKey.isCustom && castKey.facets.length === 1 && castKey.facetLabels.every(({ label }) => !label) && schema.attributes[castKey.facets[0]] && schema.attributes[castKey.facets[0]].type === "number"
          ) {
            keys[castKey.type].cast = CastKeyOptions.number;
          } else if (castKey.cast === CastKeyOptions.number && castKey.facets.length === 1 && schema.attributes[castKey.facets[0]] && ["number", "string", "boolean"].includes(
            schema.attributes[castKey.facets[0]].type
          )) {
            keys[castKey.type].cast = CastKeyOptions.number;
          } else if (castKey.cast === CastKeyOptions.number && castKey.facets.length > 1) {
            throw new e.ElectroError(
              e.ErrorCodes.InvalidModel,
              `Invalid "cast" option provided for ${castKey.type} definition on index "${u.formatIndexNameForDisplay(
                tableIndex.index
              )}". Keys can only be cast to 'number' if they are a composite of one numeric attribute.`
            );
          } else {
            keys[castKey.type].cast = CastKeyOptions.string;
          }
        }
        return keys;
      }
      _formatKeyCasing(accessPattern, key) {
        const casing = this.model.indexes[accessPattern] !== void 0 ? this.model.indexes[accessPattern].sk.casing : void 0;
        return u.formatKeyCasing(key, casing);
      }
      _validateIndex(index) {
        if (!this.model.facets.byIndex[index]) {
          throw new Error(`Invalid index: ${index}`);
        }
      }
      _getCollectionSk(collection = "") {
        const subCollections = this.model.subCollections[collection];
        const index = this.model.translations.collections.fromCollectionToIndex[collection];
        const accessPattern = this.model.translations.indexes.fromIndexToAccessPattern[index];
        const prefixes = this.model.prefixes[index];
        const prefix = this._makeCollectionPrefix(subCollections);
        if (prefixes.sk && prefixes.sk.isCustom) {
          return "";
        }
        return this._formatKeyCasing(accessPattern, prefix);
      }
      _makeCollectionPrefix(collection = []) {
        let prefix = "";
        if (validations.isArrayHasLength(collection)) {
          for (let i = 0; i < collection.length; i++) {
            let subCollection = collection[i];
            if (i === 0) {
              prefix += `$${subCollection}`;
            } else {
              prefix += `#${subCollection}`;
            }
          }
        } else if (validations.isStringHasLength(collection)) {
          prefix = `$${collection}`;
        }
        return prefix;
      }
      _makeKeyTransforms(queryType, options2 = {}) {
        const transforms = [];
        const shiftUp = (val2) => u.shiftSortOrder(val2, 1);
        const noop = (val2) => val2;
        if (options2.compare !== ComparisonTypes.v2) {
          transforms.push(noop);
        } else if (queryType === QueryTypes.between) {
          transforms.push(noop, shiftUp);
        } else if (queryType === QueryTypes.lte || queryType === QueryTypes.gt) {
          transforms.push(shiftUp);
        } else {
          transforms.push(noop);
        }
        return transforms;
      }
      /* istanbul ignore next */
      _makeIndexKeysWithoutTail(state = {}, skFacets = [], options2) {
        const index = state.query.index || TableIndex;
        this._validateIndex(index);
        const pkFacets = state.query.keys.pk || {};
        const excludePostfix = state.query.options.indexType === IndexTypes.clustered && state.query.options._isCollectionQuery;
        const transforms = this._makeKeyTransforms(state.query.type, options2);
        if (!skFacets.length) {
          skFacets.push({});
        }
        let facets = this.model.facets.byIndex[index];
        let prefixes = this.model.prefixes[index];
        if (!prefixes) {
          throw new Error(`Invalid index: ${index}`);
        }
        let partitionKey = this._makeKey(
          prefixes.pk,
          facets.pk,
          pkFacets,
          this.model.facets.labels[index].pk
        );
        let pk = partitionKey.key;
        let sk = [];
        let fulfilled = false;
        if (this.model.lookup.indexHasSortKeys[index]) {
          for (let i = 0; i < skFacets.length; i++) {
            const skFacet = skFacets[i];
            const transform = transforms[i];
            let hasLabels = this.model.facets.labels[index] && Array.isArray(this.model.facets.labels[index].sk);
            let labels = hasLabels ? this.model.facets.labels[index].sk : [];
            let sortKey = this._makeKey(prefixes.sk, facets.sk, skFacet, labels, {
              excludeLabelTail: true,
              excludePostfix,
              transform
            });
            if (sortKey.key !== void 0) {
              sk.push(sortKey.key);
            }
            if (sortKey.fulfilled) {
              fulfilled = true;
            }
          }
        }
        return {
          pk,
          sk,
          fulfilled
        };
      }
      /* istanbul ignore next */
      _makeIndexKeys({
        index = TableIndex,
        pkAttributes = {},
        skAttributes = [],
        queryType,
        indexType,
        isCollection = false
      }) {
        this._validateIndex(index);
        const excludePostfix = indexType === IndexTypes.clustered && isCollection;
        const transforms = this._makeKeyTransforms(queryType);
        if (!skAttributes.length) {
          skAttributes.push({});
        }
        let facets = this.model.facets.byIndex[index];
        let prefixes = this.model.prefixes[index];
        if (!prefixes) {
          throw new Error(`Invalid index: ${index}`);
        }
        let pk = this._makeKey(
          prefixes.pk,
          facets.pk,
          pkAttributes,
          this.model.facets.labels[index].pk
        );
        let sk = [];
        let fulfilled = false;
        if (this.model.lookup.indexHasSortKeys[index]) {
          for (let i = 0; i < skAttributes.length; i++) {
            const skFacet = skAttributes[i];
            const transform = transforms[i];
            let hasLabels = this.model.facets.labels[index] && Array.isArray(this.model.facets.labels[index].sk);
            let labels = hasLabels ? this.model.facets.labels[index].sk : [];
            let sortKey = this._makeKey(prefixes.sk, facets.sk, skFacet, labels, {
              excludePostfix,
              transform
            });
            if (sortKey.key !== void 0) {
              sk.push(sortKey.key);
            }
            if (sortKey.fulfilled) {
              fulfilled = true;
            }
          }
        }
        return {
          pk: pk.key,
          sk,
          fulfilled
        };
      }
      _formatNumericCastKey(attributeName, key) {
        const fulfilled = key !== void 0;
        if (!fulfilled) {
          return {
            fulfilled,
            key
          };
        }
        if (typeof key === "number") {
          return {
            fulfilled,
            key
          };
        }
        if (typeof key === "string") {
          const parsed = parseInt(key);
          if (!isNaN(parsed)) {
            return {
              fulfilled,
              key: parsed
            };
          }
        }
        if (typeof key === "boolean") {
          return {
            fulfilled,
            key: key === true ? 1 : 0
          };
        }
        throw new e.ElectroAttributeValidationError(
          attributeName,
          `Invalid key value provided, could not cast composite attribute ${attributeName} to number for index`
        );
      }
      /* istanbul ignore next */
      _makeKey({ prefix, isCustom, casing, postfix, cast } = {}, facets = [], supplied = {}, labels = [], { excludeLabelTail, excludePostfix, transform = (val2) => val2 } = {}) {
        if (cast === CastKeyOptions.number) {
          return this._formatNumericCastKey(facets[0], supplied[facets[0]]);
        }
        let key = prefix;
        let foundCount = 0;
        for (let i = 0; i < labels.length; i++) {
          const { name, label } = labels[i];
          const attribute = this.model.schema.getAttribute(name);
          let value = supplied[name];
          if (supplied[name] === void 0 && excludeLabelTail) {
            break;
          }
          if (attribute && validations.isFunction(attribute.format)) {
            value = attribute.format(`${value}`);
          }
          if (isCustom) {
            key = `${key}${label}`;
          } else {
            key = `${key}#${label}_`;
          }
          if (supplied[name] === void 0) {
            break;
          }
          foundCount++;
          key = `${key}${value}`;
        }
        const fulfilled = foundCount === labels.length;
        const shouldApplyPostfix = typeof postfix === "string" && !excludePostfix;
        if (fulfilled && shouldApplyPostfix) {
          key += postfix;
        }
        const transformedKey = transform(u.formatKeyCasing(key, casing));
        return {
          fulfilled,
          key: transformedKey
        };
      }
      _findBestIndexKeyMatch(attributes2 = {}) {
        let facets = this.model.facets.bySlot;
        let matches = [];
        for (let f = 0; f < facets.length; f++) {
          const slots = facets[f] || [];
          for (let s = 0; s < slots.length; s++) {
            const accessPatternSlot = slots[s];
            matches[s] = matches[s] || {
              index: accessPatternSlot.index,
              allKeys: false,
              hasSk: false,
              count: 0,
              done: false,
              keys: []
            };
            const indexOutOfContention = matches[s].done;
            const lacksAttributeAtSlot = !accessPatternSlot;
            const attributeNotProvided = accessPatternSlot && attributes2[accessPatternSlot.name] === void 0;
            const nextAttributeIsSortKey = accessPatternSlot && accessPatternSlot.next && facets[f + 1][s].type === "sk";
            const hasAllKeys = accessPatternSlot && !accessPatternSlot.next;
            if (indexOutOfContention || lacksAttributeAtSlot || attributeNotProvided) {
              matches[s].done = true;
              continue;
            }
            if (nextAttributeIsSortKey) {
              matches[s].hasSk = true;
            } else if (hasAllKeys) {
              matches[s].allKeys = true;
            }
            matches[s].count++;
            matches[s].keys.push({
              name: accessPatternSlot.name,
              type: accessPatternSlot.type
            });
          }
        }
        let max = 0;
        matches = matches.filter((match2) => match2.hasSk || match2.allKeys).map((match2) => {
          max = Math.max(max, match2.count);
          return match2;
        });
        const matched = [];
        for (let m = 0; m < matches.length; m++) {
          const match2 = matches[m];
          const primaryIndexIsFinished = match2.index === "" && match2.allKeys;
          const primaryIndexIsMostMatched = match2.index === "" && match2.count === max;
          const indexRequirementsFulfilled = match2.allKeys;
          const hasTheMostAttributeMatches = match2.count === max;
          if (primaryIndexIsFinished) {
            matched[0] = match2;
          } else if (primaryIndexIsMostMatched) {
            matched[1] = match2;
          } else if (indexRequirementsFulfilled) {
            matched[2] = match2;
          } else if (hasTheMostAttributeMatches) {
            matched[3] = match2;
          }
        }
        const match = matched.find((value) => !!value);
        let keys = [];
        let index = "";
        let shouldScan = true;
        if (match) {
          keys = match.keys;
          index = match.index;
          shouldScan = false;
        }
        return { keys, index, shouldScan };
      }
      /* istanbul ignore next */
      _parseComposedKey(key = TableIndex) {
        let attributes2 = {};
        let names = key.match(/:[A-Z1-9]+/gi);
        if (!names) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidKeyCompositeAttributeTemplate,
            `Invalid key composite attribute template. No composite attributes provided, expected at least one composite attribute with the format ":attributeName". Received: ${key}`
          );
        }
        let labels = key.split(/:[A-Z1-9]+/gi);
        for (let i = 0; i < names.length; i++) {
          let name = names[i].replace(":", "");
          let label = labels[i];
          if (name !== "") {
            attributes2[name] = attributes2[name] || [];
            attributes2[name].push(label);
          }
        }
        return attributes2;
      }
      _parseTemplateKey(template = "") {
        let attributes2 = [];
        let current = {
          label: "",
          name: ""
        };
        let type = "label";
        for (let i = 0; i < template.length; i++) {
          let char = template[i];
          let last = template[i - 1];
          let next = template[i + 1];
          if (char === "{" && last === "$" && type === "label") {
            type = "name";
          } else if (char === "}" && type === "name") {
            if (current.name.match(/^\s*$/)) {
              throw new e.ElectroError(
                e.ErrorCodes.InvalidKeyCompositeAttributeTemplate,
                `Invalid key composite attribute template. Empty expression "\${${current.name}}" provided. Expected attribute name.`
              );
            }
            attributes2.push({ name: current.name, label: current.label });
            current.name = "";
            current.label = "";
            type = "label";
          } else if (char === "$" && next === "{" && type === "label") {
            continue;
          } else {
            current[type] += char;
          }
        }
        if (current.name.length > 0 || current.label.length > 0) {
          attributes2.push({ name: current.name, label: current.label });
        }
        return attributes2;
      }
      _parseFacets(facets) {
        let isCustom = !Array.isArray(facets) && typeof facets === "string";
        if (isCustom && facets.length > 0) {
          let labels = this._parseComposedKey(facets);
          return {
            isCustom,
            labels: [],
            attributes: Object.keys(attributes)
          };
        } else if (isCustom && facets.length === 0) {
          return {
            isCustom: false,
            labels: [],
            attributes: []
          };
        } else {
          return {
            isCustom,
            labels: [],
            attributes: Object.keys(facets)
          };
        }
      }
      _parseTemplateAttributes(composite = []) {
        let isCustom = !Array.isArray(composite) && typeof composite === "string";
        if (isCustom && composite.length > 0) {
          let labels = this._parseTemplateKey(composite);
          return {
            isCustom,
            labels,
            attributes: labels.map(({ name }) => name).filter((name) => !!name)
          };
        } else if (isCustom && composite.length === 0) {
          return {
            isCustom: false,
            labels: [],
            attributes: []
          };
        } else {
          return {
            isCustom,
            labels: composite.map((name) => ({ name })),
            attributes: composite
          };
        }
      }
      _compositeTemplateAreCompatible(parsedAttributes, composite) {
        if (!Array.isArray(composite) || !parsedAttributes || !parsedAttributes.isCustom) {
          return true;
        }
        return validations.stringArrayMatch(composite, parsedAttributes.attributes);
      }
      _optimizeIndexKey(keyDefinition) {
        const hasTemplate = typeof keyDefinition.template === "string";
        const hasSingleItemComposite = Array.isArray(keyDefinition.facets) && keyDefinition.facets.length === 1 && keyDefinition.facets[0] === keyDefinition.field;
        if (!hasTemplate && hasSingleItemComposite) {
          keyDefinition.facets = "${" + keyDefinition.field + "}";
        }
        return keyDefinition;
      }
      _optimizeMatchingKeyAttributes(model = {}) {
        const attributeFields = [];
        for (const name of Object.keys(model.attributes)) {
          const { field } = model.attributes[name];
          attributeFields.push(field || name);
        }
        for (const accessPattern of Object.keys(model.indexes)) {
          let { pk, sk } = model.indexes[accessPattern];
          if (attributeFields.includes(pk.field)) {
            model.indexes[accessPattern].pk = this._optimizeIndexKey(pk);
          }
          if (sk && attributeFields.includes(sk.field)) {
            model.indexes[accessPattern].sk = this._optimizeIndexKey(sk);
          }
        }
        return model;
      }
      _normalizeIndexes(indexes) {
        let normalized = {};
        let indexFieldTranslation = {};
        let indexHasSortKeys = {};
        let indexHasSubCollections = {};
        let clusteredIndexes = /* @__PURE__ */ new Set();
        let indexAccessPatternTransaction = {
          fromAccessPatternToIndex: {},
          fromIndexToAccessPattern: {}
        };
        let collectionIndexTranslation = {
          fromCollectionToIndex: {},
          fromIndexToCollection: {}
        };
        let subCollections = {};
        let collections = {};
        let facets = {
          byIndex: {},
          byField: {},
          byFacet: {},
          byAttr: {},
          byType: {},
          bySlot: [],
          fields: [],
          attributes: [],
          labels: {}
        };
        let seenIndexes = {};
        let seenIndexFields = {};
        let accessPatterns = Object.keys(indexes);
        for (let i in accessPatterns) {
          let accessPattern = accessPatterns[i];
          let index = indexes[accessPattern];
          let indexName = index.index || TableIndex;
          let indexType = typeof index.type === "string" ? index.type : IndexTypes.isolated;
          let indexScope = index.scope || "";
          if (index.index === void 0 && v.isFunction(index.condition)) {
            throw new e.ElectroError(
              e.ErrorCodes.InvalidIndexCondition,
              `The index option 'condition' is only allowed on secondary indexes`
            );
          }
          let conditionDefined = v.isFunction(index.condition);
          let indexCondition = index.condition || (() => true);
          if (indexType === "clustered") {
            clusteredIndexes.add(accessPattern);
          }
          if (seenIndexes[indexName] !== void 0) {
            if (indexName === TableIndex) {
              throw new e.ElectroError(
                e.ErrorCodes.DuplicateIndexes,
                `Duplicate index defined in model found in Access Pattern '${accessPattern}': '${u.formatIndexNameForDisplay(
                  indexName
                )}'. This could be because you forgot to specify the index name of a secondary index defined in your model.`
              );
            } else {
              throw new e.ElectroError(
                e.ErrorCodes.DuplicateIndexes,
                `Duplicate index defined in model found in Access Pattern '${accessPattern}': '${indexName}'`
              );
            }
          }
          seenIndexes[indexName] = indexName;
          let hasSk = !!index.sk;
          let inCollection = !!index.collection;
          if (!hasSk && inCollection) {
            throw new e.ElectroError(
              e.ErrorCodes.CollectionNoSK,
              `Invalid Access pattern definition for '${accessPattern}': '${u.formatIndexNameForDisplay(
                indexName
              )}', contains a collection definition without a defined SK. Collections can only be defined on indexes with a defined SK.`
            );
          }
          let collection = index.collection || "";
          let customFacets = {
            pk: false,
            sk: false
          };
          const pkCasing = KeyCasing[index.pk.casing] === void 0 ? KeyCasing.default : index.pk.casing;
          let skCasing = KeyCasing.default;
          if (hasSk && KeyCasing[index.sk.casing] !== void 0) {
            skCasing = index.sk.casing;
          }
          indexHasSortKeys[indexName] = hasSk;
          let parsedPKAttributes = this._parseTemplateAttributes(index.pk.facets);
          customFacets.pk = parsedPKAttributes.isCustom;
          facets.labels[indexName] = facets.labels[indexName] || {};
          facets.labels[indexName]["pk"] = facets.labels[indexName]["pk"] || parsedPKAttributes;
          facets.labels[indexName]["sk"] = facets.labels[indexName]["sk"] || this._parseTemplateAttributes();
          let pk = {
            inCollection,
            accessPattern,
            index: indexName,
            casing: pkCasing,
            type: KeyTypes.pk,
            cast: index.pk.cast,
            field: index.pk.field || "",
            facets: parsedPKAttributes.attributes,
            isCustom: parsedPKAttributes.isCustom,
            facetLabels: parsedPKAttributes.labels
          };
          let sk = {};
          let parsedSKAttributes = {};
          if (hasSk) {
            parsedSKAttributes = this._parseTemplateAttributes(index.sk.facets);
            customFacets.sk = parsedSKAttributes.isCustom;
            facets.labels[indexName]["sk"] = parsedSKAttributes;
            sk = {
              inCollection,
              accessPattern,
              index: indexName,
              casing: skCasing,
              type: KeyTypes.sk,
              cast: index.sk.cast,
              field: index.sk.field || "",
              facets: parsedSKAttributes.attributes,
              isCustom: parsedSKAttributes.isCustom,
              facetLabels: parsedSKAttributes.labels
            };
            facets.fields.push(sk.field);
          }
          if (Array.isArray(sk.facets)) {
            let duplicates = pk.facets.filter((facet) => sk.facets.includes(facet));
            if (duplicates.length !== 0) {
              if (sk.facets.length > 1) {
                throw new e.ElectroError(
                  e.ErrorCodes.DuplicateIndexCompositeAttributes,
                  `The Access Pattern '${accessPattern}' contains duplicate references the composite attribute(s): ${u.commaSeparatedString(
                    duplicates
                  )}. Composite attributes can only be used more than once in an index if your sort key is limitted to a single attribute. This is to prevent unexpected runtime errors related to the inability to generate keys.`
                );
              }
            }
          }
          let definition = {
            pk,
            sk,
            hasSk,
            collection,
            customFacets,
            type: indexType,
            index: indexName,
            scope: indexScope,
            condition: indexCondition,
            conditionDefined
          };
          indexHasSubCollections[indexName] = inCollection && Array.isArray(collection);
          if (inCollection) {
            let collectionArray = this._toSubCollectionArray(collection);
            for (let collectionName of collectionArray) {
              if (collections[collectionName] !== void 0) {
                throw new e.ElectroError(
                  e.ErrorCodes.DuplicateCollections,
                  `Duplicate collection, "${collectionName}" is defined across multiple indexes "${collections[collectionName]}" and "${accessPattern}". Collections must be unique names across indexes for an Entity.`
                );
              } else {
                collections[collectionName] = accessPattern;
              }
              collectionIndexTranslation.fromCollectionToIndex[collectionName] = indexName;
              collectionIndexTranslation.fromIndexToCollection[indexName] = collectionIndexTranslation.fromIndexToCollection[indexName] || [];
              collectionIndexTranslation.fromIndexToCollection[indexName].push(
                collection
              );
            }
            subCollections = {
              ...subCollections,
              ...this._normalizeSubCollections(collectionArray)
            };
          }
          let attributes2 = [
            ...pk.facets.map((name) => ({
              name,
              index: indexName,
              type: KeyTypes.pk
            })),
            ...(sk.facets || []).map((name) => ({
              name,
              index: indexName,
              type: KeyTypes.sk
            }))
          ];
          normalized[accessPattern] = definition;
          indexAccessPatternTransaction.fromAccessPatternToIndex[accessPattern] = indexName;
          indexAccessPatternTransaction.fromIndexToAccessPattern[indexName] = accessPattern;
          indexFieldTranslation[indexName] = {
            pk: pk.field,
            sk: sk.field || ""
          };
          facets.attributes = [...facets.attributes, ...attributes2];
          facets.fields.push(pk.field);
          facets.byIndex[indexName] = {
            customFacets,
            pk: pk.facets,
            sk: sk.facets,
            all: attributes2,
            collection: index.collection,
            hasSortKeys: !!indexHasSortKeys[indexName],
            hasSubCollections: !!indexHasSubCollections[indexName],
            casing: {
              pk: pkCasing,
              sk: skCasing
            }
          };
          facets.byField = facets.byField || {};
          facets.byField[pk.field] = facets.byField[pk.field] || {};
          facets.byField[pk.field][indexName] = pk;
          if (sk.field) {
            facets.byField[sk.field] = facets.byField[sk.field] || {};
            facets.byField[sk.field][indexName] = sk;
          }
          if (seenIndexFields[pk.field] !== void 0) {
            const definition2 = Object.values(facets.byField[pk.field]).find(
              (definition3) => definition3.index !== indexName
            );
            const definitionsMatch = validations.stringArrayMatch(
              pk.facets,
              definition2.facets
            );
            if (!definitionsMatch) {
              throw new e.ElectroError(
                e.ErrorCodes.InconsistentIndexDefinition,
                `Partition Key (pk) on Access Pattern '${u.formatIndexNameForDisplay(
                  accessPattern
                )}' is defined with the composite attribute(s) ${u.commaSeparatedString(
                  pk.facets
                )}, but the accessPattern '${u.formatIndexNameForDisplay(
                  definition2.index
                )}' defines this field with the composite attributes ${u.commaSeparatedString(
                  definition2.facets
                )}'. Key fields must have the same composite attribute definitions across all indexes they are involved with`
              );
            }
            seenIndexFields[pk.field].push({ accessPattern, type: "pk" });
          } else {
            seenIndexFields[pk.field] = [];
            seenIndexFields[pk.field].push({ accessPattern, type: "pk" });
          }
          if (sk.field) {
            if (sk.field === pk.field) {
              throw new e.ElectroError(
                e.ErrorCodes.DuplicateIndexFields,
                `The Access Pattern '${u.formatIndexNameForDisplay(
                  accessPattern
                )}' references the field '${sk.field}' as the field name for both the PK and SK. Fields used for indexes need to be unique to avoid conflicts.`
              );
            } else if (seenIndexFields[sk.field] !== void 0) {
              const isAlsoDefinedAsPK = seenIndexFields[sk.field].find(
                (field) => field.type === "pk"
              );
              if (isAlsoDefinedAsPK) {
                throw new e.ElectroError(
                  e.ErrorCodes.InconsistentIndexDefinition,
                  `The Sort Key (sk) on Access Pattern '${u.formatIndexNameForDisplay(
                    accessPattern
                  )}' references the field '${pk.field}' which is already referenced by the Access Pattern(s) '${u.formatIndexNameForDisplay(
                    isAlsoDefinedAsPK.accessPattern
                  )}' as a Partition Key. Fields mapped to Partition Keys cannot be also mapped to Sort Keys.`
                );
              }
              const definition2 = Object.values(facets.byField[sk.field]).find(
                (definition3) => definition3.index !== indexName
              );
              const definitionsMatch = validations.stringArrayMatch(
                sk.facets,
                definition2.facets
              );
              if (!definitionsMatch) {
                throw new e.ElectroError(
                  e.ErrorCodes.DuplicateIndexFields,
                  `Sort Key (sk) on Access Pattern '${u.formatIndexNameForDisplay(
                    accessPattern
                  )}' is defined with the composite attribute(s) ${u.commaSeparatedString(
                    sk.facets
                  )}, but the accessPattern '${u.formatIndexNameForDisplay(
                    definition2.index
                  )}' defines this field with the composite attributes ${u.commaSeparatedString(
                    definition2.facets
                  )}'. Key fields must have the same composite attribute definitions across all indexes they are involved with`
                );
              }
              seenIndexFields[sk.field].push({ accessPattern, type: "sk" });
            } else {
              seenIndexFields[sk.field] = [];
              seenIndexFields[sk.field].push({ accessPattern, type: "sk" });
            }
          }
          attributes2.forEach(({ index: index2, type, name }, j) => {
            let next = attributes2[j + 1] !== void 0 ? attributes2[j + 1].name : "";
            let facet = { index: index2, name, type, next };
            facets.byAttr[name] = facets.byAttr[name] || [];
            facets.byAttr[name].push(facet);
            facets.byType[type] = facets.byType[type] || [];
            facets.byType[type].push(facet);
            facets.byFacet[name] = facets.byFacet[name] || [];
            facets.byFacet[name][j] = facets.byFacet[name][j] || [];
            facets.byFacet[name][j].push(facet);
            facets.bySlot[j] = facets.bySlot[j] || [];
            facets.bySlot[j][i] = facet;
          });
          let pkTemplateIsCompatible = this._compositeTemplateAreCompatible(
            parsedPKAttributes,
            index.pk.composite
          );
          if (!pkTemplateIsCompatible) {
            throw new e.ElectroError(
              e.ErrorCodes.IncompatibleKeyCompositeAttributeTemplate,
              `Incompatible PK 'template' and 'composite' properties for defined on index "${u.formatIndexNameForDisplay(
                indexName
              )}". PK "template" string is defined as having composite attributes ${u.commaSeparatedString(
                parsedPKAttributes.attributes
              )} while PK "composite" array is defined with composite attributes ${u.commaSeparatedString(
                index.pk.composite
              )}`
            );
          }
          if (index.sk !== void 0 && Array.isArray(index.sk.composite) && typeof index.sk.template === "string") {
            let skTemplateIsCompatible = this._compositeTemplateAreCompatible(
              parsedSKAttributes,
              index.sk.composite
            );
            if (!skTemplateIsCompatible) {
              throw new e.ElectroError(
                e.ErrorCodes.IncompatibleKeyCompositeAttributeTemplate,
                `Incompatible SK 'template' and 'composite' properties for defined on index "${u.formatIndexNameForDisplay(
                  indexName
                )}". SK "template" string is defined as having composite attributes ${u.commaSeparatedString(
                  parsedSKAttributes.attributes
                )} while SK "composite" array is defined with composite attributes ${u.commaSeparatedString(
                  index.sk.composite
                )}`
              );
            }
          }
        }
        if (facets.byIndex[TableIndex] === void 0) {
          throw new e.ElectroError(
            e.ErrorCodes.MissingPrimaryIndex,
            "Schema is missing an index definition for the table's main index. Please update the schema to include an index without a specified name to define the table's natural index"
          );
        }
        return {
          facets,
          subCollections,
          indexHasSortKeys,
          clusteredIndexes,
          indexHasSubCollections,
          indexes: normalized,
          indexField: indexFieldTranslation,
          indexAccessPattern: indexAccessPatternTransaction,
          indexCollection: collectionIndexTranslation,
          collections: Object.keys(collections)
        };
      }
      _normalizeFilters(filters = {}) {
        let normalized = {};
        let invalidFilterNames = ["go", "params", "filter", "where", "set"];
        for (let [name, fn] of Object.entries(filters)) {
          if (invalidFilterNames.includes(name)) {
            throw new e.ElectroError(
              e.ErrorCodes.InvalidFilter,
              `Invalid filter name: ${name}. Filter cannot be named ${u.commaSeparatedString(
                invalidFilterNames
              )}`
            );
          } else {
            normalized[name] = fn;
          }
        }
        return normalized;
      }
      _normalizeKeyFixings({
        service,
        entity,
        version,
        indexes,
        modelVersion,
        clusteredIndexes,
        schema
      }) {
        let prefixes = {};
        for (let accessPattern of Object.keys(indexes)) {
          let tableIndex = indexes[accessPattern];
          prefixes[tableIndex.index] = this._makeKeyFixings({
            service,
            entity,
            version,
            tableIndex,
            modelVersion,
            isClustered: clusteredIndexes.has(accessPattern),
            schema
          });
        }
        return prefixes;
      }
      _normalizeSubCollections(collections = []) {
        let lookup = {};
        for (let i = collections.length - 1; i >= 0; i--) {
          let subCollection = collections[i];
          lookup[subCollection] = lookup[subCollection] || [];
          for (let j = 0; j <= i; j++) {
            lookup[subCollection].push(collections[j]);
          }
        }
        return lookup;
      }
      _toSubCollectionArray(collection) {
        let collectionArray = [];
        if (Array.isArray(collection) && collection.every((col) => validations.isStringHasLength(col))) {
          collectionArray = collection;
        } else if (validations.isStringHasLength(collection)) {
          collectionArray.push(collection);
        } else {
          throw new Error("Invalid collection definition");
        }
        return collectionArray;
      }
      _applyCompositeToFacetConversion(model) {
        for (let accessPattern of Object.keys(model.indexes)) {
          let index = model.indexes[accessPattern];
          let invalidPK = index.pk.facets === void 0 && index.pk.composite === void 0 && index.pk.template === void 0;
          let invalidSK = index.sk && index.sk.facets === void 0 && index.sk.composite === void 0 && index.sk.template === void 0;
          if (invalidPK) {
            throw new Error("Missing Index Composite Attributes!");
          } else if (invalidSK) {
            throw new Error("Missing Index Composite Attributes!");
          }
          if (Array.isArray(index.pk.composite)) {
            index.pk = {
              ...index.pk,
              facets: index.pk.composite
            };
          }
          if (typeof index.pk.template === "string") {
            index.pk = {
              ...index.pk,
              facets: index.pk.template
            };
          }
          if (index.sk && Array.isArray(index.sk.composite)) {
            index.sk = {
              ...index.sk,
              facets: index.sk.composite
            };
          }
          if (index.sk && typeof index.sk.template === "string") {
            index.sk = {
              ...index.sk,
              facets: index.sk.template
            };
          }
          model.indexes[accessPattern] = index;
        }
        return model;
      }
      _mergeKeyDefinitions(fromIndex, fromModel) {
        let definitions = {};
        for (let indexName of Object.keys(fromIndex)) {
          let pk = fromIndex[indexName].pk;
          let sk = fromIndex[indexName].sk || { labels: [] };
          definitions[indexName] = {
            pk: [],
            sk: []
          };
          for (let { name, label } of pk.labels) {
            if (pk.isCustom) {
              definitions[indexName].pk.push({ name, label });
            } else {
              definitions[indexName].pk.push({
                name,
                label: fromModel[name] || name
              });
            }
          }
          for (let { name, label } of sk.labels) {
            if (sk.isCustom) {
              definitions[indexName].sk.push({ name, label });
            } else {
              definitions[indexName].sk.push({
                name,
                label: u.getFirstDefined(fromModel[name], name)
              });
            }
          }
        }
        return definitions;
      }
      _parseModel(model, config = {}) {
        let modelVersion = u.getModelVersion(model);
        let service, entity, version, table2, name;
        switch (modelVersion) {
          case ModelVersions.beta:
            service = model.service;
            entity = model.entity;
            version = model.version;
            table2 = config.table || model.table;
            name = entity;
            break;
          case ModelVersions.v1:
            service = model.model && model.model.service;
            entity = model.model && model.model.entity;
            version = model.model && model.model.version;
            table2 = config.table || model.table;
            name = entity;
            break;
          default:
            throw new Error("Invalid model");
        }
        model = this._applyCompositeToFacetConversion(model);
        model = this._optimizeMatchingKeyAttributes(model);
        let {
          facets,
          indexes,
          indexField,
          collections,
          subCollections,
          indexCollection,
          clusteredIndexes,
          indexHasSortKeys,
          indexAccessPattern,
          indexHasSubCollections
        } = this._normalizeIndexes(model.indexes);
        let schema = new Schema(model.attributes, facets, {
          getClient: () => this.client,
          isRoot: true
        });
        let filters = this._normalizeFilters(model.filters);
        let prefixes = this._normalizeKeyFixings({
          service,
          entity,
          version,
          indexes,
          modelVersion,
          clusteredIndexes,
          schema
        });
        let schemaDefinedLabels = schema.getLabels();
        const deconstructors = {};
        facets.labels = this._mergeKeyDefinitions(
          facets.labels,
          schemaDefinedLabels
        );
        for (let indexName of Object.keys(facets.labels)) {
          const accessPattern = indexAccessPattern.fromIndexToAccessPattern[indexName];
          indexes[accessPattern].pk.labels = facets.labels[indexName].pk;
          indexes[accessPattern].sk.labels = facets.labels[indexName].sk;
          const keyTypes = prefixes[indexName] || {};
          deconstructors[indexName] = {};
          for (const keyType in keyTypes) {
            const prefixes2 = keyTypes[keyType];
            const labels = facets.labels[indexName][keyType] || [];
            const attributes2 = schema.attributes;
            deconstructors[indexName][keyType] = this._createKeyDeconstructor(
              prefixes2,
              labels,
              attributes2
            );
            for (let attributeName in schema.attributes) {
              const { field } = schema.attributes[attributeName];
              if (indexes[accessPattern][keyType].field === field) {
                indexes[accessPattern][keyType].isFieldRef = true;
              }
            }
          }
        }
        return {
          name,
          table: table2,
          schema,
          facets,
          entity,
          service,
          indexes,
          version,
          filters,
          prefixes,
          collections,
          modelVersion,
          subCollections,
          lookup: {
            clusteredIndexes,
            indexHasSortKeys,
            indexHasSubCollections
          },
          translations: {
            keys: indexField,
            indexes: indexAccessPattern,
            collections: indexCollection
          },
          keys: {
            deconstructors
          },
          original: model
        };
      }
    };
    function getEntityIdentifiers(entities) {
      let identifiers = [];
      for (let alias of Object.keys(entities)) {
        let entity = entities[alias];
        let name = entity.model.entity;
        let version = entity.model.version;
        identifiers.push({
          name,
          alias,
          version,
          entity,
          nameField: entity.identifiers.entity,
          versionField: entity.identifiers.version
        });
      }
      return identifiers;
    }
    function matchToEntityAlias({
      paramItem,
      identifiers,
      record,
      entities = {},
      allowMatchOnKeys = false
    } = {}) {
      let entity;
      if (paramItem && v.isFunction(paramItem[TransactionCommitSymbol])) {
        const committed = paramItem[TransactionCommitSymbol]();
        entity = committed.entity;
      }
      let entityAlias;
      for (let { name, version, nameField, versionField, alias } of identifiers) {
        if (entity && entity.model.entity === name && entity.model.version === version) {
          entityAlias = alias;
          break;
        } else if (record[nameField] !== void 0 && record[versionField] !== void 0 && record[nameField] === name && record[versionField] === version) {
          entityAlias = alias;
          break;
        } else if (entities[alias] && entities[alias].ownsKeys(record)) {
          entityAlias = alias;
          break;
        }
      }
      return entityAlias;
    }
    module2.exports = {
      Entity: Entity2,
      clauses,
      getEntityIdentifiers,
      matchToEntityAlias
    };
  }
});

// node_modules/electrodb/src/transaction.js
var require_transaction = __commonJS({
  "node_modules/electrodb/src/transaction.js"(exports2, module2) {
    var { TableIndex, TransactionMethods, DataOptions } = require_types();
    var { getEntityIdentifiers, matchToEntityAlias } = require_entity();
    function cleanseCanceledData(index = TableIndex, entities, data = {}, config = {}) {
      if (config.data === DataOptions.raw) {
        return data;
      }
      const identifiers = getEntityIdentifiers(entities);
      const canceled = data.canceled || [];
      const paramItems = config._paramItems || [];
      const results = [];
      for (let i = 0; i < canceled.length; i++) {
        const { Item, Code, Message } = canceled[i] || {};
        const paramItem = paramItems[i];
        const code = Code || "None";
        const rejected = code !== "None";
        const result = {
          rejected,
          code,
          message: Message
        };
        if (Item) {
          const entityAlias = matchToEntityAlias({
            record: Item,
            paramItem,
            identifiers
          });
          result.item = entities[entityAlias].formatResponse({ Item }, index, {
            ...config,
            pager: false,
            parse: void 0
          }).data;
        } else {
          result.item = null;
        }
        results.push(result);
      }
      return results;
    }
    function cleanseTransactionData(index = TableIndex, entities, data = {}, config = {}) {
      if (config.data === DataOptions.raw) {
        return data;
      }
      const identifiers = getEntityIdentifiers(entities);
      data.Items = data.Items || [];
      const paramItems = config._paramItems || [];
      const results = [];
      for (let i = 0; i < data.Items.length; i++) {
        const record = data.Items[i];
        if (!record) {
          results.push(null);
          continue;
        }
        const paramItem = paramItems[i];
        const entityAlias = matchToEntityAlias({ paramItem, identifiers, record });
        if (!entityAlias) {
          continue;
        }
        let formatted = entities[entityAlias].formatResponse(
          { Item: record },
          index,
          {
            ...config,
            pager: false,
            parse: void 0
          }
        );
        results.push(formatted.data);
      }
      return results.map((item) => ({
        rejected: false,
        item
      }));
    }
    function createTransaction(options2) {
      const { fn, method, getEntities } = options2;
      const operations = {
        params: (options3 = {}) => {
          const paramItems = fn(getEntities());
          const params = {
            TransactItems: paramItems
          };
          if (typeof options3.token === "string" && options3.token.length) {
            params["ClientRequestToken"] = options3.token;
          }
          if (options3._returnParamItems) {
            return { params, paramItems };
          }
          return params;
        },
        go: async (options3) => {
          const driver = Object.values(getEntities())[0];
          if (!driver) {
            throw new Error(
              "At least one entity must exist to perform a transaction"
            );
          }
          const { params, paramItems } = operations.params({
            ...options3,
            _returnParamItems: true
          });
          let canceled = false;
          if (paramItems.length === 0) {
            return {
              canceled,
              data: []
            };
          }
          if (options3 && options3.logger) {
            if (!options3.listeners) {
              options3.listeners = [];
            }
            options3.listeners.push(options3.logger);
          }
          const response = await driver.go(method, params, {
            ...options3,
            parse: (options4, data) => {
              if (options4.data === DataOptions.raw) {
                return data;
              } else if (data.canceled) {
                canceled = true;
                return cleanseCanceledData(TableIndex, getEntities(), data, {
                  ...options4,
                  _isTransaction: true,
                  _paramItems: paramItems
                });
              } else if (data.Responses) {
                return cleanseTransactionData(
                  TableIndex,
                  getEntities(),
                  {
                    Items: data.Responses.map((response2) => response2.Item)
                  },
                  {
                    ...options4,
                    _isTransaction: true,
                    _paramItems: paramItems
                  }
                );
              } else {
                return new Array(paramItems ? paramItems.length : 0).fill({
                  item: null,
                  code: "None",
                  rejected: false,
                  message: void 0
                });
              }
            }
          });
          return {
            ...response,
            canceled
          };
        }
      };
      return operations;
    }
    function createWriteTransaction(entities, fn) {
      return createTransaction({
        fn,
        method: TransactionMethods.transactWrite,
        getEntities: () => entities
      });
    }
    function createGetTransaction(entities, fn) {
      return createTransaction({
        fn,
        method: TransactionMethods.transactGet,
        getEntities: () => entities
      });
    }
    module2.exports = {
      createTransaction,
      createWriteTransaction,
      createGetTransaction
    };
  }
});

// node_modules/electrodb/src/service.js
var require_service = __commonJS({
  "node_modules/electrodb/src/service.js"(exports2, module2) {
    var {
      Entity: Entity2,
      getEntityIdentifiers,
      matchToEntityAlias
    } = require_entity();
    var { clauses } = require_clauses();
    var {
      TableIndex,
      TransactionMethods,
      KeyCasing,
      ServiceVersions,
      ElectroInstance,
      ElectroInstanceTypes,
      ModelVersions,
      IndexTypes,
      DataOptions
    } = require_types();
    var { FilterFactory } = require_filters();
    var { FilterOperations } = require_operations();
    var { WhereFactory } = require_where();
    var v = require_validations();
    var c = require_client();
    var e = require_errors();
    var u = require_util();
    var txn = require_transaction();
    var {
      getInstanceType,
      getModelVersion,
      applyBetaModelOverrides
    } = require_util();
    var ConstructorTypes = {
      beta: "beta",
      v1: "v1",
      v1Map: "v1Map",
      unknown: "unknown"
    };
    function inferConstructorType(service) {
      if (v.isNameEntityRecordType(service) || v.isNameModelRecordType(service)) {
        return ConstructorTypes.v1Map;
      } else if (v.isBetaServiceConfig(service)) {
        return ConstructorTypes.beta;
      } else if (v.isStringHasLength(service)) {
        return ConstructorTypes.v1;
      } else {
        return ConstructorTypes.unknown;
      }
    }
    function inferJoinValues(alias, instance, config) {
      let hasAlias = true;
      let args = { alias, instance, config, hasAlias };
      if (typeof alias !== "string") {
        args.config = instance;
        args.instance = alias;
        args.hasAlias = false;
      }
      return args;
    }
    var Service2 = class {
      _betaConstructor(service, config) {
        this.service = {};
        this._modelOverrides = {};
        this._modelVersion = ModelVersions.beta;
        this._modelOverrides = {
          table: service.table,
          service: service.service,
          version: service.version
        };
        this.service.name = service.name || service.service;
        this.service.table = service.table;
        this.service.version = service.version;
        this.config = config;
        this.client = config.client;
        if (v.isFunction(config.logger)) {
          this.logger = config.logger;
        }
        this.entities = {};
        this.find = {};
        this.collectionSchema = {};
        this.compositeAttributes = {};
        this.collections = {};
        this.identifiers = {};
        this.transaction = {
          get: (fn) => {
            return txn.createTransaction({
              fn,
              getEntities: () => this.entities,
              method: TransactionMethods.transactGet
            });
          },
          write: (fn) => {
            return txn.createTransaction({
              fn,
              getEntities: () => this.entities,
              method: TransactionMethods.transactWrite
            });
          }
        };
        this._instance = ElectroInstance.service;
        this._instanceType = ElectroInstanceTypes.service;
      }
      _v1Constructor(service, config) {
        this.service = {};
        this._modelOverrides = {};
        this._modelVersion = ModelVersions.v1;
        this.service.name = service;
        this.service.table = config.table;
        this._modelOverrides.table = config.table;
        this.config = config;
        this.client = config.client;
        if (v.isFunction(config.logger)) {
          this.logger = config.logger;
        }
        this.entities = {};
        this.find = {};
        this.collectionSchema = {};
        this.compositeAttributes = {};
        this.collections = {};
        this.identifiers = {};
        this.transaction = {
          get: (fn) => {
            return txn.createTransaction({
              fn,
              getEntities: () => this.entities,
              method: TransactionMethods.transactGet
            });
          },
          write: (fn) => {
            return txn.createTransaction({
              fn,
              getEntities: () => this.entities,
              method: TransactionMethods.transactWrite
            });
          }
        };
        this._instance = ElectroInstance.service;
        this._instanceType = ElectroInstanceTypes.service;
      }
      _v1MapConstructor(service, config) {
        let entityNames = Object.keys(service);
        let serviceName = this._inferServiceNameFromEntityMap(service);
        this._v1Constructor(serviceName, config);
        for (let name of entityNames) {
          let entity = service[name];
          this.join(name, entity, config);
        }
      }
      constructor(service = "", config = {}) {
        config = c.normalizeConfig(config);
        this.version = ServiceVersions.v1;
        let type = inferConstructorType(service);
        switch (type) {
          case ConstructorTypes.v1Map:
            this._v1MapConstructor(service, config);
            break;
          case ConstructorTypes.beta:
            this._betaConstructor(service, config);
            break;
          case ConstructorTypes.v1:
            this._v1Constructor(service, config);
            break;
          default:
            throw new e.ElectroError(
              e.ErrorCodes.InvalidJoin,
              `Invalid service name: ${JSON.stringify(
                service
              )}. Service name must have length greater than zero`
            );
        }
      }
      _inferServiceNameFromEntityMap(service) {
        let names = Object.keys(service);
        let entity = names.map((name) => service[name]).map((instance) => this._inferJoinEntity(instance)).find((entity2) => entity2 && entity2.model && entity2.model.service);
        if (!entity || !entity.model || !entity.model.service) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidJoin,
            `Invalid service name: Entities/Models provided do not contain property for Service Name`
          );
        }
        return entity.model.service;
      }
      _inferJoinEntity(instance, options2) {
        let entity = {};
        let type = getInstanceType(instance);
        let modelVersion = getModelVersion(instance);
        switch (type) {
          case ElectroInstanceTypes.model:
            entity = new Entity2(instance, options2);
            break;
          case ElectroInstanceTypes.entity:
            entity = instance;
            break;
          default:
            if (modelVersion !== this._modelVersion) {
              throw new e.ElectroError(
                e.ErrorCodes.InvalidJoin,
                "Invalid instance: Valid instances to join include Models and Entity instances."
              );
            } else if (modelVersion === ModelVersions.beta) {
              instance = applyBetaModelOverrides(instance, this._modelOverrides);
            } else {
              throw new e.ElectroError(
                e.ErrorCodes.InvalidJoin,
                `Invalid instance: Valid instances to join include Models and Entity instances.`
              );
            }
            entity = new Entity2(instance, options2);
            break;
        }
        return entity;
      }
      /**
       * Join
       * @param {string} alias
       * @param instance
       * @param config
       * @returns {Service}
       */
      join(...args) {
        let { alias, instance, config, hasAlias } = inferJoinValues(...args);
        let options2 = { ...config, ...this.config };
        let entity = this._inferJoinEntity(instance, options2);
        let name = hasAlias ? alias : entity.getName();
        if (this.service.name.toLowerCase() !== entity.model.service.toLowerCase()) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidJoin,
            `Service name defined on joined instance, ${entity.model.service}, does not match the name of this Service: ${this.service.name}. Verify or update the service name on the Entity/Model to match the name defined on this service.`
          );
        }
        if (this.getTableName()) {
          entity.setTableName(this.getTableName());
        }
        if (options2.client) {
          entity.setClient(options2.client);
        }
        if (options2.logger) {
          entity._addLogger(options2.logger);
        }
        if (options2.listeners) {
          entity.addListeners(options2.listeners);
        }
        if (this._modelVersion === ModelVersions.beta && this.service.version) {
          entity.model.version = this.service.version;
        }
        this.entities[name] = entity;
        for (let collection of this.entities[name].model.collections) {
          this._addCollectionEntity(collection, name, this.entities[name]);
          this.collections[collection] = (...facets) => {
            return this._makeCollectionChain(
              {
                name: collection,
                initialClauses: clauses
              },
              ...facets
            );
          };
        }
        for (const collection in this.collectionSchema) {
          const collectionSchema = this.collectionSchema[collection];
          this.compositeAttributes[collection] = this._collectionSchemaToCompositeAttributes(collectionSchema);
        }
        this.find = { ...this.entities, ...this.collections };
        return this;
      }
      _collectionSchemaToCompositeAttributes(schema) {
        const keys = schema.keys;
        return {
          hasSortKeys: keys.hasSk,
          customFacets: {
            pk: keys.pk.isCustom,
            sk: keys.sk.isCustom
          },
          pk: keys.pk.facets,
          sk: keys.sk.facets,
          all: [
            ...keys.pk.facets.map((name) => {
              return {
                name,
                index: keys.index,
                type: "pk"
              };
            }),
            ...keys.sk.facets.map((name) => {
              return {
                name,
                index: keys.index,
                type: "sk"
              };
            })
          ],
          collection: keys.collection,
          hasSubCollections: schema.hasSubCollections,
          casing: {
            pk: keys.pk.casing,
            sk: keys.sk.casing
          }
        };
      }
      setClient(client2) {
        if (client2 !== void 0) {
          for (let entity of Object.values(this.entities)) {
            entity.setClient(client2);
          }
        }
      }
      cleanseRetrievedData(index = TableIndex, entities, data = {}, config = {}) {
        if (config.data === DataOptions.raw) {
          return data;
        }
        const identifiers = getEntityIdentifiers(entities);
        data.Items = data.Items || [];
        const results = {};
        for (let { alias } of identifiers) {
          results[alias] = [];
        }
        for (let i = 0; i < data.Items.length; i++) {
          const record = data.Items[i];
          if (!record) {
            continue;
          }
          const entityAlias = matchToEntityAlias({
            identifiers,
            record,
            entities: this.entities,
            allowMatchOnKeys: config.ignoreOwnership
          });
          if (!entityAlias) {
            continue;
          }
          let formatted;
          if (config.hydrate) {
            formatted = {
              data: record
              // entities[entityAlias]._formatKeysToItem(index, record),
            };
          } else {
            formatted = entities[entityAlias].formatResponse(
              { Item: record },
              index,
              {
                ...config,
                pager: false,
                parse: void 0
              }
            );
          }
          results[entityAlias].push(formatted.data);
        }
        return results;
      }
      findKeyOwner(lastEvaluatedKey) {
        return Object.values(this.entities)[0];
      }
      expectKeyOwner(lastEvaluatedKey) {
        const owner = this.findKeyOwner(lastEvaluatedKey);
        if (owner === void 0) {
          throw new e.ElectroError(
            e.ErrorCodes.NoOwnerForCursor,
            `Supplied cursor does not resolve to Entity within the Service ${this.service.name}`
          );
        }
        return owner;
      }
      findCursorOwner(cursor) {
        return Object.values(this.entities)[0];
      }
      expectCursorOwner(cursor) {
        const owner = this.findCursorOwner(cursor);
        if (owner === void 0) {
          throw new e.ElectroError(
            e.ErrorCodes.NoOwnerForCursor,
            `Supplied cursor does not resolve to Entity within the Service ${this.service.name}`
          );
        }
        return owner;
      }
      getTableName() {
        return this.service.table;
      }
      setTableName(table2) {
        this.service.table = table2;
        for (let entity of Object.values(this.entities)) {
          entity.setTableName(table2);
        }
      }
      _makeCollectionChain({ name = "", initialClauses = {} }, facets = {}) {
        const { entities, attributes: attributes2, identifiers, indexType, index } = this.collectionSchema[name];
        const compositeAttributes = this.compositeAttributes[name];
        const allEntities = Object.values(entities);
        const entity = allEntities[0];
        let filterBuilder = new FilterFactory(attributes2, FilterOperations);
        let whereBuilder = new WhereFactory(attributes2, FilterOperations);
        let clauses2 = { ...initialClauses };
        clauses2 = filterBuilder.injectFilterClauses(clauses2);
        clauses2 = whereBuilder.injectWhereClauses(clauses2);
        const expression = identifiers.expression || "";
        let options2 = {
          // expressions, // DynamoDB doesnt return what I expect it would when provided with these entity filters
          parse: (options3, data) => {
            if (options3.data === DataOptions.raw) {
              return data;
            }
            return this.cleanseRetrievedData(index, entities, data, options3);
          },
          formatCursor: {
            serialize: (key) => {
              return this.expectKeyOwner(key).serializeCursor(key);
            },
            deserialize: (cursor) => {
              return this.expectCursorOwner(cursor).deserializeCursor(cursor);
            }
          },
          identifiers: {
            names: identifiers.names || {},
            values: identifiers.values || {},
            expression: allEntities.length > 1 ? `(${expression})` : expression
          },
          expressions: {
            names: {},
            values: {},
            expression: ""
          },
          attributes: attributes2,
          entities,
          indexType,
          compositeAttributes,
          hydrator: async (entity2, index2, items, config) => {
            if (entity2 && entities[entity2]) {
              return entities[entity2].hydrate(index2, items, {
                ...config,
                parse: void 0,
                hydrator: void 0,
                _isCollectionQuery: false,
                ignoreOwnership: config._providedIgnoreOwnership
              });
            }
            let entityItemRefs = {};
            for (let i = 0; i < items.length; i++) {
              const item = items[i];
              for (let entityName in entities) {
                entityItemRefs[entityName] = entityItemRefs[entityName] || [];
                const entity3 = entities[entityName];
                if (entity3.ownsKeys(item)) {
                  entityItemRefs[entityName].push({
                    item,
                    itemSlot: i
                  });
                }
              }
            }
            let unprocessed = [];
            let data = new Array(items.length).fill(null);
            for (const entityName in entityItemRefs) {
              const itemRefs = entityItemRefs[entityName];
              const items2 = itemRefs.map((ref) => ref.item);
              const results = await entities[entity2].hydrate(index2, items2, {
                ...config,
                parse: void 0,
                hydrate: false,
                hydrator: void 0,
                _isCollectionQuery: false,
                ignoreOwnership: config._providedIgnoreOwnership
              });
              unprocessed = unprocessed.concat(results.unprocessed);
              if (results.data.length !== itemRefs.length) {
                throw new Error("Temporary: something wrong");
              }
              for (let r = 0; r < itemRefs.length; r++) {
                const itemRef = itemRefs[r];
                const hydrated = results.data[r];
                data[itemRef.itemSlot] = hydrated;
              }
            }
            return {
              data,
              unprocessed
            };
          }
        };
        return entity.collection(name, clauses2, facets, options2);
      }
      _validateIndexCasingMatch(definition = {}, providedIndex = {}) {
        const definitionSk = definition.sk || {};
        const providedSk = providedIndex.sk || {};
        const pkCasingMatch = v.isMatchingCasing(
          definition.pk.casing,
          providedIndex.pk.casing
        );
        const skCasingMatch = v.isMatchingCasing(
          definitionSk.casing,
          providedSk.casing
        );
        return {
          pk: pkCasingMatch,
          sk: skCasingMatch
        };
      }
      _validateCollectionDefinition(definition = {}, providedIndex = {}) {
        let isCustomMatchPK = definition.pk.isCustom === providedIndex.pk.isCustom;
        let isCustomMatchSK = !!(definition.sk && definition.sk.isCustom) === !!(providedIndex.sk && providedIndex.sk.isCustom);
        let indexMatch = definition.index === providedIndex.index;
        let pkFieldMatch = definition.pk.field === providedIndex.pk.field;
        let pkFacetLengthMatch = definition.pk.facets.length === providedIndex.pk.facets.length;
        let scopeMatch = definition.scope === providedIndex.scope;
        let mismatchedFacetLabels = [];
        let collectionDifferences = [];
        let definitionIndexName = u.formatIndexNameForDisplay(definition.index);
        let providedIndexName = u.formatIndexNameForDisplay(providedIndex.index);
        let matchingKeyCasing = this._validateIndexCasingMatch(
          definition,
          providedIndex
        );
        for (let i = 0; i < Math.max(definition.pk.labels.length, providedIndex.pk.labels.length); i++) {
          let definitionFacet = definition.pk.labels[i] && definition.pk.labels[i].name;
          let definitionLabel = definition.pk.labels[i] && definition.pk.labels[i].label;
          let providedFacet = providedIndex.pk.labels[i] && providedIndex.pk.labels[i].name;
          let providedLabel = providedIndex.pk.labels[i] && providedIndex.pk.labels[i].label;
          let noLabels = definitionLabel === definitionFacet && providedLabel === providedFacet;
          if (definitionLabel !== providedLabel) {
            mismatchedFacetLabels.push({
              definitionFacet,
              definitionLabel,
              providedFacet,
              providedLabel,
              kind: "Partition",
              type: noLabels ? "facet" : "label"
            });
            break;
          } else if (definitionFacet !== providedFacet) {
            mismatchedFacetLabels.push({
              definitionFacet,
              definitionLabel,
              providedFacet,
              providedLabel,
              kind: "Partition",
              type: "facet"
            });
            break;
          }
        }
        if (!scopeMatch) {
          collectionDifferences.push(
            `The index scope value provided "${providedIndex.scope || "undefined"}" does not match established index scope value "${definition.scope || "undefined"}" on index "${providedIndexName}". Index scope options must match across all entities participating in a collection`
          );
        }
        if (!isCustomMatchPK) {
          collectionDifferences.push(
            `The usage of key templates the partition key on index ${definitionIndexName} must be consistent across all Entities, some entities provided use template while others do not`
          );
        }
        if (!isCustomMatchSK) {
          collectionDifferences.push(
            `The usage of key templates the sort key on index ${definitionIndexName} must be consistent across all Entities, some entities provided use template while others do not`
          );
        }
        if (definition.type === "clustered") {
          for (let i = 0; i < Math.min(definition.sk.labels.length, providedIndex.sk.labels.length); i++) {
            let definitionFacet = definition.sk.labels[i] && definition.sk.labels[i].name;
            let definitionLabel = definition.sk.labels[i] && definition.sk.labels[i].label;
            let providedFacet = providedIndex.sk.labels[i] && providedIndex.sk.labels[i].name;
            let providedLabel = providedIndex.sk.labels[i] && providedIndex.sk.labels[i].label;
            let noLabels = definitionLabel === definitionFacet && providedLabel === providedFacet;
            if (definitionFacet === providedFacet) {
              if (definitionLabel !== providedLabel) {
                mismatchedFacetLabels.push({
                  definitionFacet,
                  definitionLabel,
                  providedFacet,
                  providedLabel,
                  kind: "Sort",
                  type: noLabels ? "facet" : "label"
                });
              }
            } else {
              break;
            }
          }
        }
        if (!matchingKeyCasing.pk) {
          collectionDifferences.push(
            `The pk property "casing" provided "${providedIndex.pk.casing || KeyCasing.default}" does not match established casing "${definition.pk.casing || KeyCasing.default}" on index "${providedIndexName}". Index casing options must match across all entities participating in a collection`
          );
        }
        if (!matchingKeyCasing.sk) {
          const definedSk = definition.sk || {};
          const providedSk = providedIndex.sk || {};
          collectionDifferences.push(
            `The sk property "casing" provided "${definedSk.casing || KeyCasing.default}" does not match established casing "${providedSk.casing || KeyCasing.default}" on index "${providedIndexName}". Index casing options must match across all entities participating in a collection`
          );
        }
        if (!indexMatch) {
          collectionDifferences.push(
            `Collection defined on provided index "${providedIndexName}" does not match collection established index "${definitionIndexName}". Collections must be defined on the same index across all entities within a service.`
          );
        } else if (!pkFieldMatch) {
          collectionDifferences.push(
            `Partition Key composite attributes provided "${providedIndex.pk.field}" for index "${providedIndexName}" do not match established field "${definition.pk.field}" on established index "${definitionIndexName}"`
          );
        }
        if (!pkFacetLengthMatch) {
          collectionDifferences.push(
            `Partition Key composite attributes provided [${providedIndex.pk.facets.map((val2) => `"${val2}"`).join(
              ", "
            )}] for index "${providedIndexName}" do not match established composite attributes [${definition.pk.facets.map((val2) => `"${val2}"`).join(", ")}] on established index "${definitionIndexName}"`
          );
        } else if (mismatchedFacetLabels.length > 0) {
          for (let mismatch of mismatchedFacetLabels) {
            if (mismatch.type === "facet") {
              collectionDifferences.push(
                `${mismatch.kind} Key composite attributes provided for index "${providedIndexName}" do not match established composite attribute "${mismatch.definitionFacet}" on established index "${definitionIndexName}": "${mismatch.definitionLabel}" != "${mismatch.providedLabel}"; Composite attribute definitions must match between all members of a collection to ensure key structures will resolve to identical Partition Keys. Please ensure these composite attribute definitions are identical for all entities associated with this service.`
              );
            } else {
              collectionDifferences.push(
                `${mismatch.kind} Key composite attributes provided for index "${providedIndexName}" contain conflicting composite attribute labels for established composite attribute "${mismatch.definitionFacet || ""}" on established index "${definitionIndexName}". Established composite attribute "${mismatch.definitionFacet || ""}" on established index "${definitionIndexName}" was defined with label "${mismatch.definitionLabel}" while provided composite attribute "${mismatch.providedFacet || ""}" on provided index "${providedIndexName}" is defined with label "${mismatch.providedLabel}". Composite attribute labels definitions must match between all members of a collection to ensure key structures will resolve to identical Partition Keys. Please ensure these labels definitions are identical for all entities associated with this service.`
              );
            }
          }
        }
        return [!!collectionDifferences.length, collectionDifferences];
      }
      _compareEntityAttributes(entityName, definition = {}, providedAttributes = {}, keys) {
        let results = {
          additions: {},
          invalid: []
        };
        for (let [name, detail] of Object.entries(providedAttributes)) {
          let defined = definition[name];
          if (defined === void 0) {
            results.additions[name] = detail;
          } else if (defined.field !== detail.field) {
            results.invalid.push(
              `The attribute "${name}" with Table Field "${detail.field}" does not match established Table Field "${defined.field}"`
            );
          }
          if (defined && detail && (defined.padding || detail.padding)) {
            const definedPadding = defined.padding || {};
            const detailPadding = detail.padding || {};
            if (keys.pk.facets.includes(name) && (definedPadding.length !== detailPadding.length || definedPadding.char !== detailPadding.char)) {
              results.invalid.push(
                `The attribute "${name}" contains inconsistent padding definitions that impact how keys are formed`
              );
            }
          }
        }
        return [!!results.invalid.length, results];
      }
      _processEntityAttributes(entityName, definition = {}, providedAttributes = {}, keys) {
        let [attributesAreIncompatible, attributeResults] = this._compareEntityAttributes(
          entityName,
          definition,
          providedAttributes,
          keys
        );
        if (attributesAreIncompatible) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidJoin,
            `Inconsistent attribute(s) on the entity "${entityName}". The following attribute(s) are defined with incompatible or conflicting definitions across participating entities: ${attributeResults.invalid.join(
              ", "
            )}. These attribute definitions must match among all members of the collection.`
          );
        } else {
          return {
            ...definition,
            ...attributeResults.additions
          };
        }
      }
      _processEntityKeys(name, definition = {}, providedIndex = {}) {
        if (!Object.keys(definition).length) {
          definition = providedIndex;
        }
        const [invalidDefinition, invalidIndexMessages] = this._validateCollectionDefinition(definition, providedIndex);
        if (invalidDefinition) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidJoin,
            `Validation Error while joining entity, "${name}". ${invalidIndexMessages.join(
              "; "
            )}`
          );
        }
        const sharedSortKeyAttributes = [];
        const sharedSortKeyCompositeAttributeLabels = [];
        const sharedSortKeyLabels = [];
        if (providedIndex.hasSk && definition.hasSk && Array.isArray(definition.sk.labels)) {
          for (let i = 0; i < definition.sk.labels.length; i++) {
            const providedLabels = providedIndex.sk.labels[i];
            const definedLabels = definition.sk.labels[i];
            const namesMatch = providedLabels && providedLabels.name === definedLabels.name;
            const labelsMatch = providedLabels && providedLabels.label === definedLabels.label;
            if (!namesMatch || !labelsMatch) {
              break;
            }
            sharedSortKeyLabels.push({ ...definedLabels });
            sharedSortKeyCompositeAttributeLabels.push({
              ...definition.sk.facetLabels[i]
            });
            sharedSortKeyAttributes.push(definition.sk.facets[i]);
          }
        }
        return {
          ...definition,
          sk: {
            ...definition.sk,
            facets: sharedSortKeyAttributes,
            facetLabels: sharedSortKeyCompositeAttributeLabels,
            labels: sharedSortKeyLabels
          }
        };
      }
      _getEntityIndexFromCollectionName(collection, entity) {
        for (let index of Object.values(entity.model.indexes)) {
          let names = [];
          if (v.isArrayHasLength(index.collection)) {
            names = index.collection;
          } else {
            names.push(index.collection);
          }
          for (let name of names) {
            if (v.isStringHasLength(name) && name === collection) {
              return index;
            }
          }
        }
        return Object.values(entity.model.indexes).find((index) => {
          if (v.isStringHasLength(index.collection)) {
            return index.collection === collection;
          } else if (v.isArrayHasLength(index.collection)) {
            return index.collection.indexOf(collection) > 0;
          }
        });
      }
      _processSubCollections(providedType, existing, provided, entityName, collectionName) {
        let existingSubCollections;
        let providedSubCollections;
        if (v.isArrayHasLength(existing)) {
          existingSubCollections = existing;
        } else {
          existingSubCollections = [existing];
        }
        if (v.isArrayHasLength(provided)) {
          providedSubCollections = provided;
        } else {
          providedSubCollections = [provided];
        }
        if (providedSubCollections.length > 1 && providedType === IndexTypes.clustered) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidJoin,
            `Clustered indexes do not support sub-collections. The sub-collection "${collectionName}", on Entity "${entityName}" must be defined as either an individual collection name or the index must be redefined as an isolated cluster`
          );
        }
        const existingRequiredIndex = existingSubCollections.indexOf(collectionName);
        const providedRequiredIndex = providedSubCollections.indexOf(collectionName);
        if (providedRequiredIndex < 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidJoin,
            `The collection definition for Collection "${collectionName}" does not exist on Entity "${entityName}".`
          );
        }
        if (existingRequiredIndex >= 0 && existingRequiredIndex !== providedRequiredIndex) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidJoin,
            `The collection definition for Collection "${collectionName}", on Entity "${entityName}", does not match the established sub-collection order for this service. The collection name provided in slot ${providedRequiredIndex + 1}, ${providedSubCollections[existingRequiredIndex] === void 0 ? "(not found)" : `"${providedSubCollections[existingRequiredIndex]}"`}, on Entity "${entityName}", does not match the established collection name in slot ${existingRequiredIndex + 1}, "${collectionName}". When using sub-collections, all Entities within a Service must must implement the same order for all preceding sub-collections.`
          );
        }
        let length = Math.max(existingRequiredIndex, providedRequiredIndex);
        for (let i = 0; i <= length; i++) {
          let existingCollection = existingSubCollections[i];
          let providedCollection = providedSubCollections[i];
          if (v.isStringHasLength(existingCollection)) {
            if (existingCollection === providedCollection && providedCollection === collectionName) {
              return i;
            }
            if (existingCollection !== providedCollection) {
              throw new e.ElectroError(
                e.ErrorCodes.InvalidJoin,
                `The collection definition for Collection "${collectionName}", on Entity "${entityName}", does not match the established sub-collection order for this service. The collection name provided in slot ${i + 1}, "${providedCollection}", on Entity "${entityName}", does not match the established collection name in slot ${i + 1}, "${existingCollection}". When using sub-collections, all Entities within a Service must must implement the same order for all preceding sub-collections.`
              );
            }
          } else if (v.isStringHasLength(providedCollection)) {
            if (providedCollection === collectionName) {
              return i;
            }
          }
        }
      }
      _addCollectionEntity(collection = "", name = "", entity = {}) {
        let providedIndex = this._getEntityIndexFromCollectionName(
          collection,
          entity
        );
        this.collectionSchema[collection] = this.collectionSchema[collection] || {
          entities: {},
          keys: {},
          attributes: {},
          identifiers: {
            names: {},
            values: {},
            expression: ""
          },
          index: void 0,
          table: "",
          collection: [],
          indexType: void 0,
          hasSubCollections: void 0
        };
        const providedType = providedIndex.type || IndexTypes.isolated;
        if (this.collectionSchema[collection].indexType === void 0) {
          this.collectionSchema[collection].indexType = providedType;
        } else if (this.collectionSchema[collection].indexType !== providedType) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidJoin,
            `Index type mismatch on collection ${collection}. The entity ${name} defines the index as type ${providedType} while the established type for that index is ${this.collectionSchema[collection].indexType}. Note that when omitted, indexes default to the type "${IndexTypes.isolated}"`
          );
        }
        if (this.collectionSchema[collection].entities[name] !== void 0) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidJoin,
            `Entity with name '${name}' has already been joined to this service.`
          );
        }
        if (this.collectionSchema[collection].table !== "") {
          if (this.collectionSchema[collection].table !== entity.getTableName()) {
            throw new e.ElectroError(
              e.ErrorCodes.InvalidJoin,
              `Entity with name '${name}' is defined to use a different Table than what is defined on other Service Entities and/or the Service itself. Entity '${name}' is defined with table name '${entity.getTableName()}' but the Service has been defined to use table name '${this.collectionSchema[collection].table}'. All Entities in a Service must reference the same DynamoDB table. To ensure all Entities will use the same DynamoDB table, it is possible to apply the property 'table' to the Service constructor's configuration parameter.`
            );
          }
        } else {
          this.collectionSchema[collection].table = entity.getTableName();
        }
        this.collectionSchema[collection].keys = this._processEntityKeys(
          name,
          this.collectionSchema[collection].keys,
          providedIndex
        );
        this.collectionSchema[collection].attributes = this._processEntityAttributes(
          name,
          this.collectionSchema[collection].attributes,
          entity.model.schema.attributes,
          this.collectionSchema[collection].keys
        );
        this.collectionSchema[collection].entities[name] = entity;
        this.collectionSchema[collection].identifiers = this._processEntityIdentifiers(
          this.collectionSchema[collection].identifiers,
          entity.getIdentifierExpressions(name)
        );
        this.collectionSchema[collection].index = this._processEntityCollectionIndex(
          this.collectionSchema[collection].index,
          providedIndex.index,
          name,
          collection
        );
        let collectionIndex = this._processSubCollections(
          providedType,
          this.collectionSchema[collection].collection,
          providedIndex.collection,
          name,
          collection
        );
        this.collectionSchema[collection].collection[collectionIndex] = collection;
        this.collectionSchema[collection].hasSubCollections = this.collectionSchema[collection].hasSubCollections || Array.isArray(providedIndex.collection);
        return this.collectionSchema[collection];
      }
      _processEntityCollectionIndex(existing, provided, name, collection) {
        if (typeof provided !== "string") {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidJoin,
            `Entity with name '${name}' does not have collection ${collection} defined on it's model`
          );
        } else if (existing === void 0) {
          return provided;
        } else if (provided !== existing) {
          throw new e.ElectroError(
            e.ErrorCodes.InvalidJoin,
            `Entity with name '${name}' defines collection ${collection} on index `
          );
        } else {
          return existing;
        }
      }
      _processEntityIdentifiers(existing = {}, { names, values, expression } = {}) {
        let identifiers = {};
        if (names) {
          identifiers.names = Object.assign({}, existing.names, names);
        }
        if (values) {
          identifiers.values = Object.assign({}, existing.values, values);
        }
        if (expression) {
          identifiers.expression = [existing.expression, expression].filter(Boolean).join(" OR ");
        }
        return identifiers;
      }
    };
    module2.exports = {
      Service: Service2
    };
  }
});

// node_modules/electrodb/src/conversions.js
var require_conversions = __commonJS({
  "node_modules/electrodb/src/conversions.js"(exports2, module2) {
    function createConversions(entity) {
      const conversions = {
        fromComposite: {
          toKeys: (composite, options2 = {}) => entity._fromCompositeToKeys({ provided: composite }, options2),
          toCursor: (composite) => entity._fromCompositeToCursor(
            { provided: composite },
            { strict: "all" }
          )
        },
        fromKeys: {
          toCursor: (keys) => entity._fromKeysToCursor({ provided: keys }, {}),
          toComposite: (keys) => entity._fromKeysToComposite({ provided: keys })
        },
        fromCursor: {
          toKeys: (cursor) => entity._fromCursorToKeys({ provided: cursor }),
          toComposite: (cursor) => entity._fromCursorToComposite({ provided: cursor })
        },
        byAccessPattern: {}
      };
      for (let accessPattern in entity.model.indexes) {
        let index = entity.model.indexes[accessPattern].index;
        conversions.byAccessPattern[accessPattern] = {
          fromKeys: {
            toCursor: (keys) => entity._fromKeysToCursorByIndex({ indexName: index, provided: keys }),
            toComposite: (keys) => entity._fromKeysToCompositeByIndex({
              indexName: index,
              provided: keys
            })
          },
          fromCursor: {
            toKeys: (cursor) => entity._fromCursorToKeysByIndex({
              indexName: index,
              provided: cursor
            }),
            toComposite: (cursor) => entity._fromCursorToCompositeByIndex({
              indexName: index,
              provided: cursor
            })
          },
          fromComposite: {
            toCursor: (composite) => entity._fromCompositeToCursorByIndex(
              { indexName: index, provided: composite },
              { strict: "all" }
            ),
            toKeys: (composite, options2 = {}) => entity._fromCompositeToKeysByIndex(
              { indexName: index, provided: composite },
              options2
            )
          }
        };
      }
      return conversions;
    }
    module2.exports = {
      createConversions
    };
  }
});

// node_modules/electrodb/index.js
var require_electrodb = __commonJS({
  "node_modules/electrodb/index.js"(exports2, module2) {
    var { Entity: Entity2 } = require_entity();
    var { Service: Service2 } = require_service();
    var {
      createGetTransaction,
      createWriteTransaction
    } = require_transaction();
    var {
      createCustomAttribute,
      CustomAttributeType,
      createSchema: createSchema2
    } = require_schema();
    var {
      ElectroError,
      ElectroValidationError,
      ElectroUserValidationError,
      ElectroAttributeValidationError
    } = require_errors();
    var { createConversions } = require_conversions();
    var {
      ComparisonTypes
    } = require_types();
    module2.exports = {
      Entity: Entity2,
      Service: Service2,
      ElectroError,
      createSchema: createSchema2,
      ComparisonTypes,
      CustomAttributeType,
      createCustomAttribute,
      ElectroValidationError,
      createGetTransaction,
      createWriteTransaction,
      ElectroUserValidationError,
      ElectroAttributeValidationError,
      createConversions
    };
  }
});

// node_modules/@redis/client/dist/lib/commands/APPEND.js
var require_APPEND = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/APPEND.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, value) {
      return ["APPEND", key, value];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/BITCOUNT.js
var require_BITCOUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BITCOUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, range) {
      const args = ["BITCOUNT", key];
      if (range) {
        args.push(range.start.toString(), range.end.toString());
        if (range.mode) {
          args.push(range.mode);
        }
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/BITFIELD_RO.js
var require_BITFIELD_RO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BITFIELD_RO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, operations) {
      const args = ["BITFIELD_RO", key];
      for (const operation of operations) {
        args.push("GET", operation.encoding, operation.offset.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/BITFIELD.js
var require_BITFIELD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BITFIELD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, operations) {
      const args = ["BITFIELD", key];
      for (const options2 of operations) {
        switch (options2.operation) {
          case "GET":
            args.push("GET", options2.encoding, options2.offset.toString());
            break;
          case "SET":
            args.push("SET", options2.encoding, options2.offset.toString(), options2.value.toString());
            break;
          case "INCRBY":
            args.push("INCRBY", options2.encoding, options2.offset.toString(), options2.increment.toString());
            break;
          case "OVERFLOW":
            args.push("OVERFLOW", options2.behavior);
            break;
        }
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/generic-transformers.js
var require_generic_transformers = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/generic-transformers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformRangeReply = exports2.pushSlotRangesArguments = exports2.pushSortArguments = exports2.transformFunctionListItemReply = exports2.RedisFunctionFlags = exports2.transformCommandReply = exports2.CommandCategories = exports2.CommandFlags = exports2.pushOptionalVerdictArgument = exports2.pushVerdictArgument = exports2.pushVerdictNumberArguments = exports2.pushVerdictArguments = exports2.pushEvalArguments = exports2.evalFirstKeyIndex = exports2.transformPXAT = exports2.transformEXAT = exports2.transformGeoMembersWithReply = exports2.GeoReplyWith = exports2.pushGeoRadiusStoreArguments = exports2.pushGeoRadiusArguments = exports2.pushGeoSearchArguments = exports2.pushGeoCountArgument = exports2.transformLMPopArguments = exports2.transformZMPopArguments = exports2.transformSortedSetWithScoresReply = exports2.transformSortedSetMemberReply = exports2.transformSortedSetMemberNullReply = exports2.transformStreamsMessagesReply = exports2.transformStreamMessagesNullReply = exports2.transformStreamMessagesReply = exports2.transformStreamMessageNullReply = exports2.transformStreamMessageReply = exports2.transformTuplesReply = exports2.transformStringNumberInfinityArgument = exports2.transformNumberInfinityArgument = exports2.transformNumberInfinityNullArrayReply = exports2.transformNumberInfinityNullReply = exports2.transformNumberInfinityReply = exports2.pushScanArguments = exports2.transformBooleanArrayReply = exports2.transformBooleanReply = void 0;
    function transformBooleanReply(reply) {
      return reply === 1;
    }
    exports2.transformBooleanReply = transformBooleanReply;
    function transformBooleanArrayReply(reply) {
      return reply.map(transformBooleanReply);
    }
    exports2.transformBooleanArrayReply = transformBooleanArrayReply;
    function pushScanArguments(args, cursor, options2) {
      args.push(cursor.toString());
      if (options2?.MATCH) {
        args.push("MATCH", options2.MATCH);
      }
      if (options2?.COUNT) {
        args.push("COUNT", options2.COUNT.toString());
      }
      return args;
    }
    exports2.pushScanArguments = pushScanArguments;
    function transformNumberInfinityReply(reply) {
      switch (reply.toString()) {
        case "+inf":
          return Infinity;
        case "-inf":
          return -Infinity;
        default:
          return Number(reply);
      }
    }
    exports2.transformNumberInfinityReply = transformNumberInfinityReply;
    function transformNumberInfinityNullReply(reply) {
      if (reply === null)
        return null;
      return transformNumberInfinityReply(reply);
    }
    exports2.transformNumberInfinityNullReply = transformNumberInfinityNullReply;
    function transformNumberInfinityNullArrayReply(reply) {
      return reply.map(transformNumberInfinityNullReply);
    }
    exports2.transformNumberInfinityNullArrayReply = transformNumberInfinityNullArrayReply;
    function transformNumberInfinityArgument(num) {
      switch (num) {
        case Infinity:
          return "+inf";
        case -Infinity:
          return "-inf";
        default:
          return num.toString();
      }
    }
    exports2.transformNumberInfinityArgument = transformNumberInfinityArgument;
    function transformStringNumberInfinityArgument(num) {
      if (typeof num !== "number")
        return num;
      return transformNumberInfinityArgument(num);
    }
    exports2.transformStringNumberInfinityArgument = transformStringNumberInfinityArgument;
    function transformTuplesReply(reply) {
      const message = /* @__PURE__ */ Object.create(null);
      for (let i = 0; i < reply.length; i += 2) {
        message[reply[i].toString()] = reply[i + 1];
      }
      return message;
    }
    exports2.transformTuplesReply = transformTuplesReply;
    function transformStreamMessageReply([id, message]) {
      return {
        id,
        message: transformTuplesReply(message)
      };
    }
    exports2.transformStreamMessageReply = transformStreamMessageReply;
    function transformStreamMessageNullReply(reply) {
      if (reply === null)
        return null;
      return transformStreamMessageReply(reply);
    }
    exports2.transformStreamMessageNullReply = transformStreamMessageNullReply;
    function transformStreamMessagesReply(reply) {
      return reply.map(transformStreamMessageReply);
    }
    exports2.transformStreamMessagesReply = transformStreamMessagesReply;
    function transformStreamMessagesNullReply(reply) {
      return reply.map(transformStreamMessageNullReply);
    }
    exports2.transformStreamMessagesNullReply = transformStreamMessagesNullReply;
    function transformStreamsMessagesReply(reply) {
      if (reply === null)
        return null;
      return reply.map(([name, rawMessages]) => ({
        name,
        messages: transformStreamMessagesReply(rawMessages)
      }));
    }
    exports2.transformStreamsMessagesReply = transformStreamsMessagesReply;
    function transformSortedSetMemberNullReply(reply) {
      if (!reply.length)
        return null;
      return transformSortedSetMemberReply(reply);
    }
    exports2.transformSortedSetMemberNullReply = transformSortedSetMemberNullReply;
    function transformSortedSetMemberReply(reply) {
      return {
        value: reply[0],
        score: transformNumberInfinityReply(reply[1])
      };
    }
    exports2.transformSortedSetMemberReply = transformSortedSetMemberReply;
    function transformSortedSetWithScoresReply(reply) {
      const members = [];
      for (let i = 0; i < reply.length; i += 2) {
        members.push({
          value: reply[i],
          score: transformNumberInfinityReply(reply[i + 1])
        });
      }
      return members;
    }
    exports2.transformSortedSetWithScoresReply = transformSortedSetWithScoresReply;
    function transformZMPopArguments(args, keys, side, options2) {
      pushVerdictArgument(args, keys);
      args.push(side);
      if (options2?.COUNT) {
        args.push("COUNT", options2.COUNT.toString());
      }
      return args;
    }
    exports2.transformZMPopArguments = transformZMPopArguments;
    function transformLMPopArguments(args, keys, side, options2) {
      pushVerdictArgument(args, keys);
      args.push(side);
      if (options2?.COUNT) {
        args.push("COUNT", options2.COUNT.toString());
      }
      return args;
    }
    exports2.transformLMPopArguments = transformLMPopArguments;
    function pushGeoCountArgument(args, count) {
      if (typeof count === "number") {
        args.push("COUNT", count.toString());
      } else if (count) {
        args.push("COUNT", count.value.toString());
        if (count.ANY) {
          args.push("ANY");
        }
      }
      return args;
    }
    exports2.pushGeoCountArgument = pushGeoCountArgument;
    function pushGeoSearchArguments(args, key, from, by, options2) {
      args.push(key);
      if (typeof from === "string") {
        args.push("FROMMEMBER", from);
      } else {
        args.push("FROMLONLAT", from.longitude.toString(), from.latitude.toString());
      }
      if ("radius" in by) {
        args.push("BYRADIUS", by.radius.toString());
      } else {
        args.push("BYBOX", by.width.toString(), by.height.toString());
      }
      args.push(by.unit);
      if (options2?.SORT) {
        args.push(options2.SORT);
      }
      pushGeoCountArgument(args, options2?.COUNT);
      return args;
    }
    exports2.pushGeoSearchArguments = pushGeoSearchArguments;
    function pushGeoRadiusArguments(args, key, from, radius, unit, options2) {
      args.push(key);
      if (typeof from === "string") {
        args.push(from);
      } else {
        args.push(from.longitude.toString(), from.latitude.toString());
      }
      args.push(radius.toString(), unit);
      if (options2?.SORT) {
        args.push(options2.SORT);
      }
      pushGeoCountArgument(args, options2?.COUNT);
      return args;
    }
    exports2.pushGeoRadiusArguments = pushGeoRadiusArguments;
    function pushGeoRadiusStoreArguments(args, key, from, radius, unit, destination, options2) {
      pushGeoRadiusArguments(args, key, from, radius, unit, options2);
      if (options2?.STOREDIST) {
        args.push("STOREDIST", destination);
      } else {
        args.push("STORE", destination);
      }
      return args;
    }
    exports2.pushGeoRadiusStoreArguments = pushGeoRadiusStoreArguments;
    var GeoReplyWith;
    (function(GeoReplyWith2) {
      GeoReplyWith2["DISTANCE"] = "WITHDIST";
      GeoReplyWith2["HASH"] = "WITHHASH";
      GeoReplyWith2["COORDINATES"] = "WITHCOORD";
    })(GeoReplyWith || (exports2.GeoReplyWith = GeoReplyWith = {}));
    function transformGeoMembersWithReply(reply, replyWith) {
      const replyWithSet = new Set(replyWith);
      let index = 0;
      const distanceIndex = replyWithSet.has(GeoReplyWith.DISTANCE) && ++index, hashIndex = replyWithSet.has(GeoReplyWith.HASH) && ++index, coordinatesIndex = replyWithSet.has(GeoReplyWith.COORDINATES) && ++index;
      return reply.map((member) => {
        const transformedMember = {
          member: member[0]
        };
        if (distanceIndex) {
          transformedMember.distance = member[distanceIndex];
        }
        if (hashIndex) {
          transformedMember.hash = member[hashIndex];
        }
        if (coordinatesIndex) {
          const [longitude, latitude] = member[coordinatesIndex];
          transformedMember.coordinates = {
            longitude,
            latitude
          };
        }
        return transformedMember;
      });
    }
    exports2.transformGeoMembersWithReply = transformGeoMembersWithReply;
    function transformEXAT(EXAT) {
      return (typeof EXAT === "number" ? EXAT : Math.floor(EXAT.getTime() / 1e3)).toString();
    }
    exports2.transformEXAT = transformEXAT;
    function transformPXAT(PXAT) {
      return (typeof PXAT === "number" ? PXAT : PXAT.getTime()).toString();
    }
    exports2.transformPXAT = transformPXAT;
    function evalFirstKeyIndex(options2) {
      return options2?.keys?.[0];
    }
    exports2.evalFirstKeyIndex = evalFirstKeyIndex;
    function pushEvalArguments(args, options2) {
      if (options2?.keys) {
        args.push(options2.keys.length.toString(), ...options2.keys);
      } else {
        args.push("0");
      }
      if (options2?.arguments) {
        args.push(...options2.arguments);
      }
      return args;
    }
    exports2.pushEvalArguments = pushEvalArguments;
    function pushVerdictArguments(args, value) {
      if (Array.isArray(value)) {
        args = args.concat(value);
      } else {
        args.push(value);
      }
      return args;
    }
    exports2.pushVerdictArguments = pushVerdictArguments;
    function pushVerdictNumberArguments(args, value) {
      if (Array.isArray(value)) {
        for (const item of value) {
          args.push(item.toString());
        }
      } else {
        args.push(value.toString());
      }
      return args;
    }
    exports2.pushVerdictNumberArguments = pushVerdictNumberArguments;
    function pushVerdictArgument(args, value) {
      if (Array.isArray(value)) {
        args.push(value.length.toString(), ...value);
      } else {
        args.push("1", value);
      }
      return args;
    }
    exports2.pushVerdictArgument = pushVerdictArgument;
    function pushOptionalVerdictArgument(args, name, value) {
      if (value === void 0)
        return args;
      args.push(name);
      return pushVerdictArgument(args, value);
    }
    exports2.pushOptionalVerdictArgument = pushOptionalVerdictArgument;
    var CommandFlags;
    (function(CommandFlags2) {
      CommandFlags2["WRITE"] = "write";
      CommandFlags2["READONLY"] = "readonly";
      CommandFlags2["DENYOOM"] = "denyoom";
      CommandFlags2["ADMIN"] = "admin";
      CommandFlags2["PUBSUB"] = "pubsub";
      CommandFlags2["NOSCRIPT"] = "noscript";
      CommandFlags2["RANDOM"] = "random";
      CommandFlags2["SORT_FOR_SCRIPT"] = "sort_for_script";
      CommandFlags2["LOADING"] = "loading";
      CommandFlags2["STALE"] = "stale";
      CommandFlags2["SKIP_MONITOR"] = "skip_monitor";
      CommandFlags2["ASKING"] = "asking";
      CommandFlags2["FAST"] = "fast";
      CommandFlags2["MOVABLEKEYS"] = "movablekeys";
    })(CommandFlags || (exports2.CommandFlags = CommandFlags = {}));
    var CommandCategories;
    (function(CommandCategories2) {
      CommandCategories2["KEYSPACE"] = "@keyspace";
      CommandCategories2["READ"] = "@read";
      CommandCategories2["WRITE"] = "@write";
      CommandCategories2["SET"] = "@set";
      CommandCategories2["SORTEDSET"] = "@sortedset";
      CommandCategories2["LIST"] = "@list";
      CommandCategories2["HASH"] = "@hash";
      CommandCategories2["STRING"] = "@string";
      CommandCategories2["BITMAP"] = "@bitmap";
      CommandCategories2["HYPERLOGLOG"] = "@hyperloglog";
      CommandCategories2["GEO"] = "@geo";
      CommandCategories2["STREAM"] = "@stream";
      CommandCategories2["PUBSUB"] = "@pubsub";
      CommandCategories2["ADMIN"] = "@admin";
      CommandCategories2["FAST"] = "@fast";
      CommandCategories2["SLOW"] = "@slow";
      CommandCategories2["BLOCKING"] = "@blocking";
      CommandCategories2["DANGEROUS"] = "@dangerous";
      CommandCategories2["CONNECTION"] = "@connection";
      CommandCategories2["TRANSACTION"] = "@transaction";
      CommandCategories2["SCRIPTING"] = "@scripting";
    })(CommandCategories || (exports2.CommandCategories = CommandCategories = {}));
    function transformCommandReply([name, arity, flags, firstKeyIndex, lastKeyIndex, step, categories]) {
      return {
        name,
        arity,
        flags: new Set(flags),
        firstKeyIndex,
        lastKeyIndex,
        step,
        categories: new Set(categories)
      };
    }
    exports2.transformCommandReply = transformCommandReply;
    var RedisFunctionFlags;
    (function(RedisFunctionFlags2) {
      RedisFunctionFlags2["NO_WRITES"] = "no-writes";
      RedisFunctionFlags2["ALLOW_OOM"] = "allow-oom";
      RedisFunctionFlags2["ALLOW_STALE"] = "allow-stale";
      RedisFunctionFlags2["NO_CLUSTER"] = "no-cluster";
    })(RedisFunctionFlags || (exports2.RedisFunctionFlags = RedisFunctionFlags = {}));
    function transformFunctionListItemReply(reply) {
      return {
        libraryName: reply[1],
        engine: reply[3],
        functions: reply[5].map((fn) => ({
          name: fn[1],
          description: fn[3],
          flags: fn[5]
        }))
      };
    }
    exports2.transformFunctionListItemReply = transformFunctionListItemReply;
    function pushSortArguments(args, options2) {
      if (options2?.BY) {
        args.push("BY", options2.BY);
      }
      if (options2?.LIMIT) {
        args.push("LIMIT", options2.LIMIT.offset.toString(), options2.LIMIT.count.toString());
      }
      if (options2?.GET) {
        for (const pattern of typeof options2.GET === "string" ? [options2.GET] : options2.GET) {
          args.push("GET", pattern);
        }
      }
      if (options2?.DIRECTION) {
        args.push(options2.DIRECTION);
      }
      if (options2?.ALPHA) {
        args.push("ALPHA");
      }
      return args;
    }
    exports2.pushSortArguments = pushSortArguments;
    function pushSlotRangeArguments(args, range) {
      args.push(range.start.toString(), range.end.toString());
    }
    function pushSlotRangesArguments(args, ranges) {
      if (Array.isArray(ranges)) {
        for (const range of ranges) {
          pushSlotRangeArguments(args, range);
        }
      } else {
        pushSlotRangeArguments(args, ranges);
      }
      return args;
    }
    exports2.pushSlotRangesArguments = pushSlotRangesArguments;
    function transformRangeReply([start, end]) {
      return {
        start,
        end
      };
    }
    exports2.transformRangeReply = transformRangeReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/BITOP.js
var require_BITOP = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BITOP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 2;
    function transformArguments(operation, destKey, key) {
      return (0, generic_transformers_1.pushVerdictArguments)(["BITOP", operation, destKey], key);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/BITPOS.js
var require_BITPOS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BITPOS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, bit, start, end, mode) {
      const args = ["BITPOS", key, bit.toString()];
      if (typeof start === "number") {
        args.push(start.toString());
      }
      if (typeof end === "number") {
        args.push(end.toString());
      }
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/BLMOVE.js
var require_BLMOVE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BLMOVE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(source, destination, sourceDirection, destinationDirection, timeout2) {
      return [
        "BLMOVE",
        source,
        destination,
        sourceDirection,
        destinationDirection,
        timeout2.toString()
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LMPOP.js
var require_LMPOP = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LMPOP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 2;
    function transformArguments(keys, side, options2) {
      return (0, generic_transformers_1.transformLMPopArguments)(["LMPOP"], keys, side, options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/BLMPOP.js
var require_BLMPOP = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BLMPOP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 3;
    function transformArguments(timeout2, keys, side, options2) {
      return (0, generic_transformers_1.transformLMPopArguments)(["BLMPOP", timeout2.toString()], keys, side, options2);
    }
    exports2.transformArguments = transformArguments;
    var LMPOP_1 = require_LMPOP();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return LMPOP_1.transformReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/BLPOP.js
var require_BLPOP = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BLPOP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(keys, timeout2) {
      const args = (0, generic_transformers_1.pushVerdictArguments)(["BLPOP"], keys);
      args.push(timeout2.toString());
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      if (reply === null)
        return null;
      return {
        key: reply[0],
        element: reply[1]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/BRPOP.js
var require_BRPOP = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BRPOP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, timeout2) {
      const args = (0, generic_transformers_1.pushVerdictArguments)(["BRPOP"], key);
      args.push(timeout2.toString());
      return args;
    }
    exports2.transformArguments = transformArguments;
    var BLPOP_1 = require_BLPOP();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return BLPOP_1.transformReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/BRPOPLPUSH.js
var require_BRPOPLPUSH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BRPOPLPUSH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(source, destination, timeout2) {
      return ["BRPOPLPUSH", source, destination, timeout2.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZMPOP.js
var require_ZMPOP = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZMPOP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 2;
    function transformArguments(keys, side, options2) {
      return (0, generic_transformers_1.transformZMPopArguments)(["ZMPOP"], keys, side, options2);
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply === null ? null : {
        key: reply[0],
        elements: reply[1].map(generic_transformers_1.transformSortedSetMemberReply)
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/BZMPOP.js
var require_BZMPOP = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BZMPOP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 3;
    function transformArguments(timeout2, keys, side, options2) {
      return (0, generic_transformers_1.transformZMPopArguments)(["BZMPOP", timeout2.toString()], keys, side, options2);
    }
    exports2.transformArguments = transformArguments;
    var ZMPOP_1 = require_ZMPOP();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return ZMPOP_1.transformReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/BZPOPMAX.js
var require_BZPOPMAX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BZPOPMAX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, timeout2) {
      const args = (0, generic_transformers_1.pushVerdictArguments)(["BZPOPMAX"], key);
      args.push(timeout2.toString());
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      if (!reply)
        return null;
      return {
        key: reply[0],
        value: reply[1],
        score: (0, generic_transformers_1.transformNumberInfinityReply)(reply[2])
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/BZPOPMIN.js
var require_BZPOPMIN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BZPOPMIN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, timeout2) {
      const args = (0, generic_transformers_1.pushVerdictArguments)(["BZPOPMIN"], key);
      args.push(timeout2.toString());
      return args;
    }
    exports2.transformArguments = transformArguments;
    var BZPOPMAX_1 = require_BZPOPMAX();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return BZPOPMAX_1.transformReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/COPY.js
var require_COPY = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/COPY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(source, destination, options2) {
      const args = ["COPY", source, destination];
      if (options2?.destinationDb) {
        args.push("DB", options2.destinationDb.toString());
      }
      if (options2?.replace) {
        args.push("REPLACE");
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/DECR.js
var require_DECR = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/DECR.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["DECR", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/DECRBY.js
var require_DECRBY = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/DECRBY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, decrement) {
      return ["DECRBY", key, decrement.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/DEL.js
var require_DEL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/DEL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(keys) {
      return (0, generic_transformers_1.pushVerdictArguments)(["DEL"], keys);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/DUMP.js
var require_DUMP = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/DUMP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["DUMP", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/EVAL_RO.js
var require_EVAL_RO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/EVAL_RO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = generic_transformers_1.evalFirstKeyIndex;
    exports2.IS_READ_ONLY = true;
    function transformArguments(script, options2) {
      return (0, generic_transformers_1.pushEvalArguments)(["EVAL_RO", script], options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/EVAL.js
var require_EVAL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/EVAL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = generic_transformers_1.evalFirstKeyIndex;
    function transformArguments(script, options2) {
      return (0, generic_transformers_1.pushEvalArguments)(["EVAL", script], options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/EVALSHA_RO.js
var require_EVALSHA_RO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/EVALSHA_RO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = generic_transformers_1.evalFirstKeyIndex;
    exports2.IS_READ_ONLY = true;
    function transformArguments(sha1, options2) {
      return (0, generic_transformers_1.pushEvalArguments)(["EVALSHA_RO", sha1], options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/EVALSHA.js
var require_EVALSHA = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/EVALSHA.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = generic_transformers_1.evalFirstKeyIndex;
    function transformArguments(sha1, options2) {
      return (0, generic_transformers_1.pushEvalArguments)(["EVALSHA", sha1], options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/EXISTS.js
var require_EXISTS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/EXISTS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(keys) {
      return (0, generic_transformers_1.pushVerdictArguments)(["EXISTS"], keys);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/EXPIRE.js
var require_EXPIRE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/EXPIRE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, seconds, mode) {
      const args = ["EXPIRE", key, seconds.toString()];
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/EXPIREAT.js
var require_EXPIREAT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/EXPIREAT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, timestamp, mode) {
      const args = [
        "EXPIREAT",
        key,
        (0, generic_transformers_1.transformEXAT)(timestamp)
      ];
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_2 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_2.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/EXPIRETIME.js
var require_EXPIRETIME = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/EXPIRETIME.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["EXPIRETIME", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/FCALL_RO.js
var require_FCALL_RO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FCALL_RO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = generic_transformers_1.evalFirstKeyIndex;
    exports2.IS_READ_ONLY = true;
    function transformArguments(fn, options2) {
      return (0, generic_transformers_1.pushEvalArguments)(["FCALL_RO", fn], options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/FCALL.js
var require_FCALL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FCALL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = generic_transformers_1.evalFirstKeyIndex;
    function transformArguments(fn, options2) {
      return (0, generic_transformers_1.pushEvalArguments)(["FCALL", fn], options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GEOADD.js
var require_GEOADD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEOADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, toAdd, options2) {
      const args = ["GEOADD", key];
      if (options2?.NX) {
        args.push("NX");
      } else if (options2?.XX) {
        args.push("XX");
      }
      if (options2?.CH) {
        args.push("CH");
      }
      for (const { longitude, latitude, member } of Array.isArray(toAdd) ? toAdd : [toAdd]) {
        args.push(longitude.toString(), latitude.toString(), member);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GEODIST.js
var require_GEODIST = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEODIST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, member1, member2, unit) {
      const args = ["GEODIST", key, member1, member2];
      if (unit) {
        args.push(unit);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply === null ? null : Number(reply);
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/GEOHASH.js
var require_GEOHASH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEOHASH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, member) {
      return (0, generic_transformers_1.pushVerdictArguments)(["GEOHASH", key], member);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GEOPOS.js
var require_GEOPOS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEOPOS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, member) {
      return (0, generic_transformers_1.pushVerdictArguments)(["GEOPOS", key], member);
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.map((coordinates) => coordinates === null ? null : {
        longitude: coordinates[0],
        latitude: coordinates[1]
      });
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/GEORADIUS_RO.js
var require_GEORADIUS_RO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEORADIUS_RO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, coordinates, radius, unit, options2) {
      return (0, generic_transformers_1.pushGeoRadiusArguments)(["GEORADIUS_RO"], key, coordinates, radius, unit, options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GEORADIUS_RO_WITH.js
var require_GEORADIUS_RO_WITH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEORADIUS_RO_WITH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var GEORADIUS_RO_1 = require_GEORADIUS_RO();
    var GEORADIUS_RO_2 = require_GEORADIUS_RO();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return GEORADIUS_RO_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return GEORADIUS_RO_2.IS_READ_ONLY;
    } });
    function transformArguments(key, coordinates, radius, unit, replyWith, options2) {
      const args = (0, GEORADIUS_RO_1.transformArguments)(key, coordinates, radius, unit, options2);
      args.push(...replyWith);
      args.preserve = replyWith;
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformGeoMembersWithReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/GEORADIUS.js
var require_GEORADIUS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEORADIUS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, coordinates, radius, unit, options2) {
      return (0, generic_transformers_1.pushGeoRadiusArguments)(["GEORADIUS"], key, coordinates, radius, unit, options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GEORADIUS_WITH.js
var require_GEORADIUS_WITH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEORADIUS_WITH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var GEORADIUS_1 = require_GEORADIUS();
    var GEORADIUS_2 = require_GEORADIUS();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return GEORADIUS_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return GEORADIUS_2.IS_READ_ONLY;
    } });
    function transformArguments(key, coordinates, radius, unit, replyWith, options2) {
      const args = (0, GEORADIUS_1.transformArguments)(key, coordinates, radius, unit, options2);
      args.push(...replyWith);
      args.preserve = replyWith;
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformGeoMembersWithReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/GEORADIUSBYMEMBER_RO.js
var require_GEORADIUSBYMEMBER_RO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEORADIUSBYMEMBER_RO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, member, radius, unit, options2) {
      return (0, generic_transformers_1.pushGeoRadiusArguments)(["GEORADIUSBYMEMBER_RO"], key, member, radius, unit, options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GEORADIUSBYMEMBER_RO_WITH.js
var require_GEORADIUSBYMEMBER_RO_WITH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEORADIUSBYMEMBER_RO_WITH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var GEORADIUSBYMEMBER_RO_1 = require_GEORADIUSBYMEMBER_RO();
    var GEORADIUSBYMEMBER_RO_2 = require_GEORADIUSBYMEMBER_RO();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return GEORADIUSBYMEMBER_RO_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return GEORADIUSBYMEMBER_RO_2.IS_READ_ONLY;
    } });
    function transformArguments(key, member, radius, unit, replyWith, options2) {
      const args = (0, GEORADIUSBYMEMBER_RO_1.transformArguments)(key, member, radius, unit, options2);
      args.push(...replyWith);
      args.preserve = replyWith;
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformGeoMembersWithReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/GEORADIUSBYMEMBER.js
var require_GEORADIUSBYMEMBER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEORADIUSBYMEMBER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, member, radius, unit, options2) {
      return (0, generic_transformers_1.pushGeoRadiusArguments)(["GEORADIUSBYMEMBER"], key, member, radius, unit, options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GEORADIUSBYMEMBER_WITH.js
var require_GEORADIUSBYMEMBER_WITH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEORADIUSBYMEMBER_WITH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var GEORADIUSBYMEMBER_1 = require_GEORADIUSBYMEMBER();
    var GEORADIUSBYMEMBER_2 = require_GEORADIUSBYMEMBER();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return GEORADIUSBYMEMBER_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return GEORADIUSBYMEMBER_2.IS_READ_ONLY;
    } });
    function transformArguments(key, member, radius, unit, replyWith, options2) {
      const args = (0, GEORADIUSBYMEMBER_1.transformArguments)(key, member, radius, unit, options2);
      args.push(...replyWith);
      args.preserve = replyWith;
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformGeoMembersWithReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/GEORADIUSBYMEMBERSTORE.js
var require_GEORADIUSBYMEMBERSTORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEORADIUSBYMEMBERSTORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    var GEORADIUSBYMEMBER_1 = require_GEORADIUSBYMEMBER();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return GEORADIUSBYMEMBER_1.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return GEORADIUSBYMEMBER_1.IS_READ_ONLY;
    } });
    function transformArguments(key, member, radius, unit, destination, options2) {
      return (0, generic_transformers_1.pushGeoRadiusStoreArguments)(["GEORADIUSBYMEMBER"], key, member, radius, unit, destination, options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GEORADIUSSTORE.js
var require_GEORADIUSSTORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEORADIUSSTORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    var GEORADIUS_1 = require_GEORADIUS();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return GEORADIUS_1.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return GEORADIUS_1.IS_READ_ONLY;
    } });
    function transformArguments(key, coordinates, radius, unit, destination, options2) {
      return (0, generic_transformers_1.pushGeoRadiusStoreArguments)(["GEORADIUS"], key, coordinates, radius, unit, destination, options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GEOSEARCH.js
var require_GEOSEARCH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEOSEARCH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, from, by, options2) {
      return (0, generic_transformers_1.pushGeoSearchArguments)(["GEOSEARCH"], key, from, by, options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GEOSEARCH_WITH.js
var require_GEOSEARCH_WITH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEOSEARCH_WITH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var GEOSEARCH_1 = require_GEOSEARCH();
    var GEOSEARCH_2 = require_GEOSEARCH();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return GEOSEARCH_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return GEOSEARCH_2.IS_READ_ONLY;
    } });
    function transformArguments(key, from, by, replyWith, options2) {
      const args = (0, GEOSEARCH_1.transformArguments)(key, from, by, options2);
      args.push(...replyWith);
      args.preserve = replyWith;
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformGeoMembersWithReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/GEOSEARCHSTORE.js
var require_GEOSEARCHSTORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GEOSEARCHSTORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    var GEOSEARCH_1 = require_GEOSEARCH();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return GEOSEARCH_1.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return GEOSEARCH_1.IS_READ_ONLY;
    } });
    function transformArguments(destination, source, from, by, options2) {
      const args = (0, generic_transformers_1.pushGeoSearchArguments)(["GEOSEARCHSTORE", destination], source, from, by, options2);
      if (options2?.STOREDIST) {
        args.push("STOREDIST");
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      if (typeof reply !== "number") {
        throw new TypeError(`https://github.com/redis/redis/issues/9261`);
      }
      return reply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/GET.js
var require_GET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["GET", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GETBIT.js
var require_GETBIT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GETBIT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, offset) {
      return ["GETBIT", key, offset.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GETDEL.js
var require_GETDEL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GETDEL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["GETDEL", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GETEX.js
var require_GETEX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GETEX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, mode) {
      const args = ["GETEX", key];
      if ("EX" in mode) {
        args.push("EX", mode.EX.toString());
      } else if ("PX" in mode) {
        args.push("PX", mode.PX.toString());
      } else if ("EXAT" in mode) {
        args.push("EXAT", (0, generic_transformers_1.transformEXAT)(mode.EXAT));
      } else if ("PXAT" in mode) {
        args.push("PXAT", (0, generic_transformers_1.transformPXAT)(mode.PXAT));
      } else {
        args.push("PERSIST");
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GETRANGE.js
var require_GETRANGE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GETRANGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, start, end) {
      return ["GETRANGE", key, start.toString(), end.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/GETSET.js
var require_GETSET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/GETSET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, value) {
      return ["GETSET", key, value];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HDEL.js
var require_HDEL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HDEL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, field) {
      return (0, generic_transformers_1.pushVerdictArguments)(["HDEL", key], field);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HEXISTS.js
var require_HEXISTS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HEXISTS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, field) {
      return ["HEXISTS", key, field];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/HEXPIRE.js
var require_HEXPIRE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HEXPIRE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = exports2.HASH_EXPIRATION = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.HASH_EXPIRATION = {
      /** @property {number} */
      /** The field does not exist */
      FIELD_NOT_EXISTS: -2,
      /** @property {number} */
      /** Specified NX | XX | GT | LT condition not met */
      CONDITION_NOT_MET: 0,
      /** @property {number} */
      /** Expiration time was set or updated */
      UPDATED: 1,
      /** @property {number} */
      /** Field deleted because the specified expiration time is in the past */
      DELETED: 2
    };
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, fields, seconds, mode) {
      const args = ["HEXPIRE", key, seconds.toString()];
      if (mode) {
        args.push(mode);
      }
      args.push("FIELDS");
      return (0, generic_transformers_1.pushVerdictArgument)(args, fields);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HEXPIREAT.js
var require_HEXPIREAT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HEXPIREAT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, fields, timestamp, mode) {
      const args = [
        "HEXPIREAT",
        key,
        (0, generic_transformers_1.transformEXAT)(timestamp)
      ];
      if (mode) {
        args.push(mode);
      }
      args.push("FIELDS");
      return (0, generic_transformers_1.pushVerdictArgument)(args, fields);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HEXPIRETIME.js
var require_HEXPIRETIME = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HEXPIRETIME.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = exports2.HASH_EXPIRATION_TIME = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.HASH_EXPIRATION_TIME = {
      /** @property {number} */
      /** The field does not exist */
      FIELD_NOT_EXISTS: -2,
      /** @property {number} */
      /** The field exists but has no associated expire */
      NO_EXPIRATION: -1
    };
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, fields) {
      return (0, generic_transformers_1.pushVerdictArgument)(["HEXPIRETIME", key, "FIELDS"], fields);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HGET.js
var require_HGET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HGET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, field) {
      return ["HGET", key, field];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HGETALL.js
var require_HGETALL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HGETALL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.TRANSFORM_LEGACY_REPLY = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    exports2.TRANSFORM_LEGACY_REPLY = true;
    function transformArguments(key) {
      return ["HGETALL", key];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformTuplesReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/HINCRBY.js
var require_HINCRBY = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HINCRBY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, field, increment) {
      return ["HINCRBY", key, field, increment.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HINCRBYFLOAT.js
var require_HINCRBYFLOAT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HINCRBYFLOAT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, field, increment) {
      return ["HINCRBYFLOAT", key, field, increment.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HKEYS.js
var require_HKEYS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HKEYS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["HKEYS", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HLEN.js
var require_HLEN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HLEN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["HLEN", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HMGET.js
var require_HMGET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HMGET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, fields) {
      return (0, generic_transformers_1.pushVerdictArguments)(["HMGET", key], fields);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HPERSIST.js
var require_HPERSIST = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HPERSIST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, fields) {
      return (0, generic_transformers_1.pushVerdictArgument)(["HPERSIST", key, "FIELDS"], fields);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HPEXPIRE.js
var require_HPEXPIRE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HPEXPIRE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, fields, ms, mode) {
      const args = ["HPEXPIRE", key, ms.toString()];
      if (mode) {
        args.push(mode);
      }
      args.push("FIELDS");
      return (0, generic_transformers_1.pushVerdictArgument)(args, fields);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HPEXPIREAT.js
var require_HPEXPIREAT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HPEXPIREAT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, fields, timestamp, mode) {
      const args = ["HPEXPIREAT", key, (0, generic_transformers_1.transformPXAT)(timestamp)];
      if (mode) {
        args.push(mode);
      }
      args.push("FIELDS");
      return (0, generic_transformers_1.pushVerdictArgument)(args, fields);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HPEXPIRETIME.js
var require_HPEXPIRETIME = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HPEXPIRETIME.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, fields) {
      return (0, generic_transformers_1.pushVerdictArgument)(["HPEXPIRETIME", key, "FIELDS"], fields);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HPTTL.js
var require_HPTTL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HPTTL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, fields) {
      return (0, generic_transformers_1.pushVerdictArgument)(["HPTTL", key, "FIELDS"], fields);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HRANDFIELD.js
var require_HRANDFIELD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HRANDFIELD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["HRANDFIELD", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HRANDFIELD_COUNT.js
var require_HRANDFIELD_COUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HRANDFIELD_COUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var HRANDFIELD_1 = require_HRANDFIELD();
    var HRANDFIELD_2 = require_HRANDFIELD();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return HRANDFIELD_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return HRANDFIELD_2.IS_READ_ONLY;
    } });
    function transformArguments(key, count) {
      return [
        ...(0, HRANDFIELD_1.transformArguments)(key),
        count.toString()
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HRANDFIELD_COUNT_WITHVALUES.js
var require_HRANDFIELD_COUNT_WITHVALUES = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HRANDFIELD_COUNT_WITHVALUES.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var HRANDFIELD_COUNT_1 = require_HRANDFIELD_COUNT();
    var HRANDFIELD_COUNT_2 = require_HRANDFIELD_COUNT();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return HRANDFIELD_COUNT_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return HRANDFIELD_COUNT_2.IS_READ_ONLY;
    } });
    function transformArguments(key, count) {
      return [
        ...(0, HRANDFIELD_COUNT_1.transformArguments)(key, count),
        "WITHVALUES"
      ];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformTuplesReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/HSCAN.js
var require_HSCAN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HSCAN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, cursor, options2) {
      return (0, generic_transformers_1.pushScanArguments)([
        "HSCAN",
        key
      ], cursor, options2);
    }
    exports2.transformArguments = transformArguments;
    function transformReply([cursor, rawTuples]) {
      const parsedTuples = [];
      for (let i = 0; i < rawTuples.length; i += 2) {
        parsedTuples.push({
          field: rawTuples[i],
          value: rawTuples[i + 1]
        });
      }
      return {
        cursor: Number(cursor),
        tuples: parsedTuples
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/HSCAN_NOVALUES.js
var require_HSCAN_NOVALUES = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HSCAN_NOVALUES.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var HSCAN_1 = require_HSCAN();
    var HSCAN_2 = require_HSCAN();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return HSCAN_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return HSCAN_2.IS_READ_ONLY;
    } });
    function transformArguments(key, cursor, options2) {
      const args = (0, HSCAN_1.transformArguments)(key, cursor, options2);
      args.push("NOVALUES");
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply([cursor, rawData]) {
      return {
        cursor: Number(cursor),
        keys: rawData
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/HSET.js
var require_HSET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HSET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(...[key, value, fieldValue]) {
      const args = ["HSET", key];
      if (typeof value === "string" || typeof value === "number" || Buffer.isBuffer(value)) {
        args.push(convertValue(value), convertValue(fieldValue));
      } else if (value instanceof Map) {
        pushMap(args, value);
      } else if (Array.isArray(value)) {
        pushTuples(args, value);
      } else {
        pushObject(args, value);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function pushMap(args, map) {
      for (const [key, value] of map.entries()) {
        args.push(convertValue(key), convertValue(value));
      }
    }
    function pushTuples(args, tuples) {
      for (const tuple of tuples) {
        if (Array.isArray(tuple)) {
          pushTuples(args, tuple);
          continue;
        }
        args.push(convertValue(tuple));
      }
    }
    function pushObject(args, object) {
      for (const key of Object.keys(object)) {
        args.push(convertValue(key), convertValue(object[key]));
      }
    }
    function convertValue(value) {
      return typeof value === "number" ? value.toString() : value;
    }
  }
});

// node_modules/@redis/client/dist/lib/commands/HSETNX.js
var require_HSETNX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HSETNX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, field, value) {
      return ["HSETNX", key, field, value];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/HSTRLEN.js
var require_HSTRLEN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HSTRLEN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, field) {
      return ["HSTRLEN", key, field];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HTTL.js
var require_HTTL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HTTL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, fields) {
      return (0, generic_transformers_1.pushVerdictArgument)(["HTTL", key, "FIELDS"], fields);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/HVALS.js
var require_HVALS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HVALS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["HVALS", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/INCR.js
var require_INCR = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/INCR.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["INCR", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/INCRBY.js
var require_INCRBY = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/INCRBY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, increment) {
      return ["INCRBY", key, increment.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/INCRBYFLOAT.js
var require_INCRBYFLOAT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/INCRBYFLOAT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, increment) {
      return ["INCRBYFLOAT", key, increment.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LCS.js
var require_LCS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LCS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key1, key2) {
      return [
        "LCS",
        key1,
        key2
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LCS_IDX_WITHMATCHLEN.js
var require_LCS_IDX_WITHMATCHLEN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LCS_IDX_WITHMATCHLEN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    var LCS_1 = require_LCS();
    var LCS_2 = require_LCS();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return LCS_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return LCS_2.IS_READ_ONLY;
    } });
    function transformArguments(key1, key2) {
      const args = (0, LCS_1.transformArguments)(key1, key2);
      args.push("IDX", "WITHMATCHLEN");
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        matches: reply[1].map(([key1, key2, length]) => ({
          key1: (0, generic_transformers_1.transformRangeReply)(key1),
          key2: (0, generic_transformers_1.transformRangeReply)(key2),
          length
        })),
        length: reply[3]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/LCS_IDX.js
var require_LCS_IDX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LCS_IDX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    var LCS_1 = require_LCS();
    var LCS_2 = require_LCS();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return LCS_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return LCS_2.IS_READ_ONLY;
    } });
    function transformArguments(key1, key2) {
      const args = (0, LCS_1.transformArguments)(key1, key2);
      args.push("IDX");
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        matches: reply[1].map(([key1, key2]) => ({
          key1: (0, generic_transformers_1.transformRangeReply)(key1),
          key2: (0, generic_transformers_1.transformRangeReply)(key2)
        })),
        length: reply[3]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/LCS_LEN.js
var require_LCS_LEN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LCS_LEN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var LCS_1 = require_LCS();
    var LCS_2 = require_LCS();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return LCS_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return LCS_2.IS_READ_ONLY;
    } });
    function transformArguments(key1, key2) {
      const args = (0, LCS_1.transformArguments)(key1, key2);
      args.push("LEN");
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LINDEX.js
var require_LINDEX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LINDEX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, index) {
      return ["LINDEX", key, index.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LINSERT.js
var require_LINSERT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LINSERT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, position, pivot, element) {
      return [
        "LINSERT",
        key,
        position,
        pivot,
        element
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LLEN.js
var require_LLEN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LLEN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["LLEN", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LMOVE.js
var require_LMOVE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LMOVE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(source, destination, sourceSide, destinationSide) {
      return [
        "LMOVE",
        source,
        destination,
        sourceSide,
        destinationSide
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LPOP_COUNT.js
var require_LPOP_COUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LPOP_COUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, count) {
      return ["LPOP", key, count.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LPOP.js
var require_LPOP = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LPOP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["LPOP", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LPOS.js
var require_LPOS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LPOS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, element, options2) {
      const args = ["LPOS", key, element];
      if (typeof options2?.RANK === "number") {
        args.push("RANK", options2.RANK.toString());
      }
      if (typeof options2?.MAXLEN === "number") {
        args.push("MAXLEN", options2.MAXLEN.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LPOS_COUNT.js
var require_LPOS_COUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LPOS_COUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var LPOS_1 = require_LPOS();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return LPOS_1.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return LPOS_1.IS_READ_ONLY;
    } });
    function transformArguments(key, element, count, options2) {
      const args = ["LPOS", key, element];
      if (typeof options2?.RANK === "number") {
        args.push("RANK", options2.RANK.toString());
      }
      args.push("COUNT", count.toString());
      if (typeof options2?.MAXLEN === "number") {
        args.push("MAXLEN", options2.MAXLEN.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LPUSH.js
var require_LPUSH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LPUSH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, elements) {
      return (0, generic_transformers_1.pushVerdictArguments)(["LPUSH", key], elements);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LPUSHX.js
var require_LPUSHX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LPUSHX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, element) {
      return (0, generic_transformers_1.pushVerdictArguments)(["LPUSHX", key], element);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LRANGE.js
var require_LRANGE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LRANGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, start, stop) {
      return [
        "LRANGE",
        key,
        start.toString(),
        stop.toString()
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LREM.js
var require_LREM = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LREM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, count, element) {
      return [
        "LREM",
        key,
        count.toString(),
        element
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LSET.js
var require_LSET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LSET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, index, element) {
      return [
        "LSET",
        key,
        index.toString(),
        element
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LTRIM.js
var require_LTRIM = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LTRIM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, start, stop) {
      return [
        "LTRIM",
        key,
        start.toString(),
        stop.toString()
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/MGET.js
var require_MGET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/MGET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(keys) {
      return ["MGET", ...keys];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/MIGRATE.js
var require_MIGRATE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/MIGRATE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(host, port, key, destinationDb, timeout2, options2) {
      const args = ["MIGRATE", host, port.toString()], isKeyArray = Array.isArray(key);
      if (isKeyArray) {
        args.push("");
      } else {
        args.push(key);
      }
      args.push(destinationDb.toString(), timeout2.toString());
      if (options2?.COPY) {
        args.push("COPY");
      }
      if (options2?.REPLACE) {
        args.push("REPLACE");
      }
      if (options2?.AUTH) {
        if (options2.AUTH.username) {
          args.push("AUTH2", options2.AUTH.username, options2.AUTH.password);
        } else {
          args.push("AUTH", options2.AUTH.password);
        }
      }
      if (isKeyArray) {
        args.push("KEYS", ...key);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/MSET.js
var require_MSET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/MSET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(toSet) {
      const args = ["MSET"];
      if (Array.isArray(toSet)) {
        args.push(...toSet.flat());
      } else {
        for (const key of Object.keys(toSet)) {
          args.push(key, toSet[key]);
        }
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/MSETNX.js
var require_MSETNX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/MSETNX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(toSet) {
      const args = ["MSETNX"];
      if (Array.isArray(toSet)) {
        args.push(...toSet.flat());
      } else {
        for (const key of Object.keys(toSet)) {
          args.push(key, toSet[key]);
        }
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/OBJECT_ENCODING.js
var require_OBJECT_ENCODING = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/OBJECT_ENCODING.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 2;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["OBJECT", "ENCODING", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/OBJECT_FREQ.js
var require_OBJECT_FREQ = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/OBJECT_FREQ.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 2;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["OBJECT", "FREQ", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/OBJECT_IDLETIME.js
var require_OBJECT_IDLETIME = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/OBJECT_IDLETIME.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 2;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["OBJECT", "IDLETIME", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/OBJECT_REFCOUNT.js
var require_OBJECT_REFCOUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/OBJECT_REFCOUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 2;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["OBJECT", "REFCOUNT", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/PERSIST.js
var require_PERSIST = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PERSIST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["PERSIST", key];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/PEXPIRE.js
var require_PEXPIRE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PEXPIRE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, milliseconds, mode) {
      const args = ["PEXPIRE", key, milliseconds.toString()];
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/PEXPIREAT.js
var require_PEXPIREAT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PEXPIREAT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, millisecondsTimestamp, mode) {
      const args = [
        "PEXPIREAT",
        key,
        (0, generic_transformers_1.transformPXAT)(millisecondsTimestamp)
      ];
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_2 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_2.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/PEXPIRETIME.js
var require_PEXPIRETIME = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PEXPIRETIME.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["PEXPIRETIME", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/PFADD.js
var require_PFADD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PFADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, element) {
      return (0, generic_transformers_1.pushVerdictArguments)(["PFADD", key], element);
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_2 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_2.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/PFCOUNT.js
var require_PFCOUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PFCOUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return (0, generic_transformers_1.pushVerdictArguments)(["PFCOUNT"], key);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/PFMERGE.js
var require_PFMERGE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PFMERGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(destination, source) {
      return (0, generic_transformers_1.pushVerdictArguments)(["PFMERGE", destination], source);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/PSETEX.js
var require_PSETEX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PSETEX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, milliseconds, value) {
      return [
        "PSETEX",
        key,
        milliseconds.toString(),
        value
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/PTTL.js
var require_PTTL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PTTL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["PTTL", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/PUBLISH.js
var require_PUBLISH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PUBLISH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments(channel, message) {
      return ["PUBLISH", channel, message];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/RENAME.js
var require_RENAME = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/RENAME.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, newKey) {
      return ["RENAME", key, newKey];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/RENAMENX.js
var require_RENAMENX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/RENAMENX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, newKey) {
      return ["RENAMENX", key, newKey];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/RESTORE.js
var require_RESTORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/RESTORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, ttl, serializedValue, options2) {
      const args = ["RESTORE", key, ttl.toString(), serializedValue];
      if (options2?.REPLACE) {
        args.push("REPLACE");
      }
      if (options2?.ABSTTL) {
        args.push("ABSTTL");
      }
      if (options2?.IDLETIME) {
        args.push("IDLETIME", options2.IDLETIME.toString());
      }
      if (options2?.FREQ) {
        args.push("FREQ", options2.FREQ.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/RPOP_COUNT.js
var require_RPOP_COUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/RPOP_COUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, count) {
      return ["RPOP", key, count.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/RPOP.js
var require_RPOP = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/RPOP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["RPOP", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/RPOPLPUSH.js
var require_RPOPLPUSH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/RPOPLPUSH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(source, destination) {
      return ["RPOPLPUSH", source, destination];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/RPUSH.js
var require_RPUSH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/RPUSH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, element) {
      return (0, generic_transformers_1.pushVerdictArguments)(["RPUSH", key], element);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/RPUSHX.js
var require_RPUSHX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/RPUSHX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, element) {
      return (0, generic_transformers_1.pushVerdictArguments)(["RPUSHX", key], element);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SADD.js
var require_SADD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, members) {
      return (0, generic_transformers_1.pushVerdictArguments)(["SADD", key], members);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SCARD.js
var require_SCARD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SCARD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["SCARD", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SDIFF.js
var require_SDIFF = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SDIFF.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(keys) {
      return (0, generic_transformers_1.pushVerdictArguments)(["SDIFF"], keys);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SDIFFSTORE.js
var require_SDIFFSTORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SDIFFSTORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(destination, keys) {
      return (0, generic_transformers_1.pushVerdictArguments)(["SDIFFSTORE", destination], keys);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SET.js
var require_SET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, value, options2) {
      const args = [
        "SET",
        key,
        typeof value === "number" ? value.toString() : value
      ];
      if (options2?.EX !== void 0) {
        args.push("EX", options2.EX.toString());
      } else if (options2?.PX !== void 0) {
        args.push("PX", options2.PX.toString());
      } else if (options2?.EXAT !== void 0) {
        args.push("EXAT", options2.EXAT.toString());
      } else if (options2?.PXAT !== void 0) {
        args.push("PXAT", options2.PXAT.toString());
      } else if (options2?.KEEPTTL) {
        args.push("KEEPTTL");
      }
      if (options2?.NX) {
        args.push("NX");
      } else if (options2?.XX) {
        args.push("XX");
      }
      if (options2?.GET) {
        args.push("GET");
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SETBIT.js
var require_SETBIT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SETBIT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, offset, value) {
      return ["SETBIT", key, offset.toString(), value.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SETEX.js
var require_SETEX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SETEX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, seconds, value) {
      return [
        "SETEX",
        key,
        seconds.toString(),
        value
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SETNX.js
var require_SETNX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SETNX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, value) {
      return ["SETNX", key, value];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/SETRANGE.js
var require_SETRANGE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SETRANGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, offset, value) {
      return ["SETRANGE", key, offset.toString(), value];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SINTER.js
var require_SINTER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SINTER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(keys) {
      return (0, generic_transformers_1.pushVerdictArguments)(["SINTER"], keys);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SINTERCARD.js
var require_SINTERCARD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SINTERCARD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 2;
    exports2.IS_READ_ONLY = true;
    function transformArguments(keys, limit) {
      const args = (0, generic_transformers_1.pushVerdictArgument)(["SINTERCARD"], keys);
      if (limit) {
        args.push("LIMIT", limit.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SINTERSTORE.js
var require_SINTERSTORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SINTERSTORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(destination, keys) {
      return (0, generic_transformers_1.pushVerdictArguments)(["SINTERSTORE", destination], keys);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SISMEMBER.js
var require_SISMEMBER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SISMEMBER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, member) {
      return ["SISMEMBER", key, member];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/SMEMBERS.js
var require_SMEMBERS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SMEMBERS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["SMEMBERS", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SMISMEMBER.js
var require_SMISMEMBER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SMISMEMBER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, members) {
      return ["SMISMEMBER", key, ...members];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanArrayReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/SMOVE.js
var require_SMOVE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SMOVE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(source, destination, member) {
      return ["SMOVE", source, destination, member];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/SORT_RO.js
var require_SORT_RO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SORT_RO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, options2) {
      return (0, generic_transformers_1.pushSortArguments)(["SORT_RO", key], options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SORT.js
var require_SORT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SORT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, options2) {
      return (0, generic_transformers_1.pushSortArguments)(["SORT", key], options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SORT_STORE.js
var require_SORT_STORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SORT_STORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var SORT_1 = require_SORT();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(source, destination, options2) {
      const args = (0, SORT_1.transformArguments)(source, options2);
      args.push("STORE", destination);
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SPOP.js
var require_SPOP = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SPOP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, count) {
      const args = ["SPOP", key];
      if (typeof count === "number") {
        args.push(count.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SPUBLISH.js
var require_SPUBLISH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SPUBLISH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(channel, message) {
      return ["SPUBLISH", channel, message];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SRANDMEMBER.js
var require_SRANDMEMBER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SRANDMEMBER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["SRANDMEMBER", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SRANDMEMBER_COUNT.js
var require_SRANDMEMBER_COUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SRANDMEMBER_COUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var SRANDMEMBER_1 = require_SRANDMEMBER();
    var SRANDMEMBER_2 = require_SRANDMEMBER();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return SRANDMEMBER_2.FIRST_KEY_INDEX;
    } });
    function transformArguments(key, count) {
      return [
        ...(0, SRANDMEMBER_1.transformArguments)(key),
        count.toString()
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SREM.js
var require_SREM = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SREM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, members) {
      return (0, generic_transformers_1.pushVerdictArguments)(["SREM", key], members);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SSCAN.js
var require_SSCAN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SSCAN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, cursor, options2) {
      return (0, generic_transformers_1.pushScanArguments)([
        "SSCAN",
        key
      ], cursor, options2);
    }
    exports2.transformArguments = transformArguments;
    function transformReply([cursor, members]) {
      return {
        cursor: Number(cursor),
        members
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/STRLEN.js
var require_STRLEN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/STRLEN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["STRLEN", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SUNION.js
var require_SUNION = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SUNION.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(keys) {
      return (0, generic_transformers_1.pushVerdictArguments)(["SUNION"], keys);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SUNIONSTORE.js
var require_SUNIONSTORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SUNIONSTORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(destination, keys) {
      return (0, generic_transformers_1.pushVerdictArguments)(["SUNIONSTORE", destination], keys);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/TOUCH.js
var require_TOUCH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/TOUCH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return (0, generic_transformers_1.pushVerdictArguments)(["TOUCH"], key);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/TTL.js
var require_TTL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/TTL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["TTL", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/TYPE.js
var require_TYPE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/TYPE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["TYPE", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/UNLINK.js
var require_UNLINK = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/UNLINK.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return (0, generic_transformers_1.pushVerdictArguments)(["UNLINK"], key);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/WATCH.js
var require_WATCH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/WATCH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return (0, generic_transformers_1.pushVerdictArguments)(["WATCH"], key);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/XACK.js
var require_XACK = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XACK.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, group, id) {
      return (0, generic_transformers_1.pushVerdictArguments)(["XACK", key, group], id);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/XADD.js
var require_XADD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, id, message, options2) {
      const args = ["XADD", key];
      if (options2?.NOMKSTREAM) {
        args.push("NOMKSTREAM");
      }
      if (options2?.TRIM) {
        if (options2.TRIM.strategy) {
          args.push(options2.TRIM.strategy);
        }
        if (options2.TRIM.strategyModifier) {
          args.push(options2.TRIM.strategyModifier);
        }
        args.push(options2.TRIM.threshold.toString());
        if (options2.TRIM.limit) {
          args.push("LIMIT", options2.TRIM.limit.toString());
        }
      }
      args.push(id);
      for (const [key2, value] of Object.entries(message)) {
        args.push(key2, value);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/XAUTOCLAIM.js
var require_XAUTOCLAIM = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XAUTOCLAIM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, group, consumer, minIdleTime, start, options2) {
      const args = ["XAUTOCLAIM", key, group, consumer, minIdleTime.toString(), start];
      if (options2?.COUNT) {
        args.push("COUNT", options2.COUNT.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        nextId: reply[0],
        messages: (0, generic_transformers_1.transformStreamMessagesNullReply)(reply[1])
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/XAUTOCLAIM_JUSTID.js
var require_XAUTOCLAIM_JUSTID = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XAUTOCLAIM_JUSTID.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var XAUTOCLAIM_1 = require_XAUTOCLAIM();
    var XAUTOCLAIM_2 = require_XAUTOCLAIM();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return XAUTOCLAIM_2.FIRST_KEY_INDEX;
    } });
    function transformArguments(...args) {
      return [
        ...(0, XAUTOCLAIM_1.transformArguments)(...args),
        "JUSTID"
      ];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        nextId: reply[0],
        messages: reply[1]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/XCLAIM.js
var require_XCLAIM = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XCLAIM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, group, consumer, minIdleTime, id, options2) {
      const args = (0, generic_transformers_1.pushVerdictArguments)(["XCLAIM", key, group, consumer, minIdleTime.toString()], id);
      if (options2?.IDLE) {
        args.push("IDLE", options2.IDLE.toString());
      }
      if (options2?.TIME) {
        args.push("TIME", (typeof options2.TIME === "number" ? options2.TIME : options2.TIME.getTime()).toString());
      }
      if (options2?.RETRYCOUNT) {
        args.push("RETRYCOUNT", options2.RETRYCOUNT.toString());
      }
      if (options2?.FORCE) {
        args.push("FORCE");
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_2 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_2.transformStreamMessagesNullReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/XCLAIM_JUSTID.js
var require_XCLAIM_JUSTID = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XCLAIM_JUSTID.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var XCLAIM_1 = require_XCLAIM();
    var XCLAIM_2 = require_XCLAIM();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return XCLAIM_2.FIRST_KEY_INDEX;
    } });
    function transformArguments(...args) {
      return [
        ...(0, XCLAIM_1.transformArguments)(...args),
        "JUSTID"
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/XDEL.js
var require_XDEL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XDEL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, id) {
      return (0, generic_transformers_1.pushVerdictArguments)(["XDEL", key], id);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/XGROUP_CREATE.js
var require_XGROUP_CREATE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XGROUP_CREATE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 2;
    function transformArguments(key, group, id, options2) {
      const args = ["XGROUP", "CREATE", key, group, id];
      if (options2?.MKSTREAM) {
        args.push("MKSTREAM");
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/XGROUP_CREATECONSUMER.js
var require_XGROUP_CREATECONSUMER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XGROUP_CREATECONSUMER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 2;
    function transformArguments(key, group, consumer) {
      return ["XGROUP", "CREATECONSUMER", key, group, consumer];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/XGROUP_DELCONSUMER.js
var require_XGROUP_DELCONSUMER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XGROUP_DELCONSUMER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 2;
    function transformArguments(key, group, consumer) {
      return ["XGROUP", "DELCONSUMER", key, group, consumer];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/XGROUP_DESTROY.js
var require_XGROUP_DESTROY = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XGROUP_DESTROY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 2;
    function transformArguments(key, group) {
      return ["XGROUP", "DESTROY", key, group];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/XGROUP_SETID.js
var require_XGROUP_SETID = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XGROUP_SETID.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 2;
    function transformArguments(key, group, id) {
      return ["XGROUP", "SETID", key, group, id];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/XINFO_CONSUMERS.js
var require_XINFO_CONSUMERS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XINFO_CONSUMERS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 2;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, group) {
      return ["XINFO", "CONSUMERS", key, group];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(rawReply) {
      return rawReply.map((consumer) => ({
        name: consumer[1],
        pending: consumer[3],
        idle: consumer[5],
        inactive: consumer[7]
      }));
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/XINFO_GROUPS.js
var require_XINFO_GROUPS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XINFO_GROUPS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 2;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["XINFO", "GROUPS", key];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(rawReply) {
      return rawReply.map((group) => ({
        name: group[1],
        consumers: group[3],
        pending: group[5],
        lastDeliveredId: group[7]
      }));
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/XINFO_STREAM.js
var require_XINFO_STREAM = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XINFO_STREAM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 2;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["XINFO", "STREAM", key];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(rawReply) {
      const parsedReply = {};
      for (let i = 0; i < rawReply.length; i += 2) {
        switch (rawReply[i]) {
          case "length":
            parsedReply.length = rawReply[i + 1];
            break;
          case "radix-tree-keys":
            parsedReply.radixTreeKeys = rawReply[i + 1];
            break;
          case "radix-tree-nodes":
            parsedReply.radixTreeNodes = rawReply[i + 1];
            break;
          case "groups":
            parsedReply.groups = rawReply[i + 1];
            break;
          case "last-generated-id":
            parsedReply.lastGeneratedId = rawReply[i + 1];
            break;
          case "first-entry":
            parsedReply.firstEntry = rawReply[i + 1] ? {
              id: rawReply[i + 1][0],
              message: (0, generic_transformers_1.transformTuplesReply)(rawReply[i + 1][1])
            } : null;
            break;
          case "last-entry":
            parsedReply.lastEntry = rawReply[i + 1] ? {
              id: rawReply[i + 1][0],
              message: (0, generic_transformers_1.transformTuplesReply)(rawReply[i + 1][1])
            } : null;
            break;
        }
      }
      return parsedReply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/XLEN.js
var require_XLEN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XLEN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["XLEN", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/XPENDING_RANGE.js
var require_XPENDING_RANGE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XPENDING_RANGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, group, start, end, count, options2) {
      const args = ["XPENDING", key, group];
      if (options2?.IDLE) {
        args.push("IDLE", options2.IDLE.toString());
      }
      args.push(start, end, count.toString());
      if (options2?.consumer) {
        args.push(options2.consumer);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.map(([id, owner, millisecondsSinceLastDelivery, deliveriesCounter]) => ({
        id,
        owner,
        millisecondsSinceLastDelivery,
        deliveriesCounter
      }));
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/XPENDING.js
var require_XPENDING = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XPENDING.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, group) {
      return ["XPENDING", key, group];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        pending: reply[0],
        firstId: reply[1],
        lastId: reply[2],
        consumers: reply[3] === null ? null : reply[3].map(([name, deliveriesCounter]) => ({
          name,
          deliveriesCounter: Number(deliveriesCounter)
        }))
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/XRANGE.js
var require_XRANGE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XRANGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, start, end, options2) {
      const args = ["XRANGE", key, start, end];
      if (options2?.COUNT) {
        args.push("COUNT", options2.COUNT.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformStreamMessagesReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/XREAD.js
var require_XREAD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XREAD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var FIRST_KEY_INDEX = (streams) => {
      return Array.isArray(streams) ? streams[0].key : streams.key;
    };
    exports2.FIRST_KEY_INDEX = FIRST_KEY_INDEX;
    exports2.IS_READ_ONLY = true;
    function transformArguments(streams, options2) {
      const args = ["XREAD"];
      if (options2?.COUNT) {
        args.push("COUNT", options2.COUNT.toString());
      }
      if (typeof options2?.BLOCK === "number") {
        args.push("BLOCK", options2.BLOCK.toString());
      }
      args.push("STREAMS");
      const streamsArray = Array.isArray(streams) ? streams : [streams], argsLength = args.length;
      for (let i = 0; i < streamsArray.length; i++) {
        const stream = streamsArray[i];
        args[argsLength + i] = stream.key;
        args[argsLength + streamsArray.length + i] = stream.id;
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformStreamsMessagesReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/XREADGROUP.js
var require_XREADGROUP = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XREADGROUP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var FIRST_KEY_INDEX = (_group, _consumer, streams) => {
      return Array.isArray(streams) ? streams[0].key : streams.key;
    };
    exports2.FIRST_KEY_INDEX = FIRST_KEY_INDEX;
    exports2.IS_READ_ONLY = true;
    function transformArguments(group, consumer, streams, options2) {
      const args = ["XREADGROUP", "GROUP", group, consumer];
      if (options2?.COUNT) {
        args.push("COUNT", options2.COUNT.toString());
      }
      if (typeof options2?.BLOCK === "number") {
        args.push("BLOCK", options2.BLOCK.toString());
      }
      if (options2?.NOACK) {
        args.push("NOACK");
      }
      args.push("STREAMS");
      const streamsArray = Array.isArray(streams) ? streams : [streams], argsLength = args.length;
      for (let i = 0; i < streamsArray.length; i++) {
        const stream = streamsArray[i];
        args[argsLength + i] = stream.key;
        args[argsLength + streamsArray.length + i] = stream.id;
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformStreamsMessagesReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/XREVRANGE.js
var require_XREVRANGE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XREVRANGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, start, end, options2) {
      const args = ["XREVRANGE", key, start, end];
      if (options2?.COUNT) {
        args.push("COUNT", options2.COUNT.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformStreamMessagesReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/XSETID.js
var require_XSETID = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XSETID.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, lastId, options2) {
      const args = ["XSETID", key, lastId];
      if (options2?.ENTRIESADDED) {
        args.push("ENTRIESADDED", options2.ENTRIESADDED.toString());
      }
      if (options2?.MAXDELETEDID) {
        args.push("MAXDELETEDID", options2.MAXDELETEDID);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/XTRIM.js
var require_XTRIM = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/XTRIM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, strategy, threshold, options2) {
      const args = ["XTRIM", key, strategy];
      if (options2?.strategyModifier) {
        args.push(options2.strategyModifier);
      }
      args.push(threshold.toString());
      if (options2?.LIMIT) {
        args.push("LIMIT", options2.LIMIT.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZADD.js
var require_ZADD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, members, options2) {
      const args = ["ZADD", key];
      if (options2?.NX) {
        args.push("NX");
      } else {
        if (options2?.XX) {
          args.push("XX");
        }
        if (options2?.GT) {
          args.push("GT");
        } else if (options2?.LT) {
          args.push("LT");
        }
      }
      if (options2?.CH) {
        args.push("CH");
      }
      if (options2?.INCR) {
        args.push("INCR");
      }
      for (const { score, value } of Array.isArray(members) ? members : [members]) {
        args.push((0, generic_transformers_1.transformNumberInfinityArgument)(score), value);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_2 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_2.transformNumberInfinityReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZCARD.js
var require_ZCARD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZCARD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["ZCARD", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZCOUNT.js
var require_ZCOUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZCOUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, min, max) {
      return [
        "ZCOUNT",
        key,
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(min),
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(max)
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZDIFF.js
var require_ZDIFF = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZDIFF.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 2;
    exports2.IS_READ_ONLY = true;
    function transformArguments(keys) {
      return (0, generic_transformers_1.pushVerdictArgument)(["ZDIFF"], keys);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZDIFF_WITHSCORES.js
var require_ZDIFF_WITHSCORES = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZDIFF_WITHSCORES.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var ZDIFF_1 = require_ZDIFF();
    var ZDIFF_2 = require_ZDIFF();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return ZDIFF_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return ZDIFF_2.IS_READ_ONLY;
    } });
    function transformArguments(...args) {
      return [
        ...(0, ZDIFF_1.transformArguments)(...args),
        "WITHSCORES"
      ];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformSortedSetWithScoresReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZDIFFSTORE.js
var require_ZDIFFSTORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZDIFFSTORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(destination, keys) {
      return (0, generic_transformers_1.pushVerdictArgument)(["ZDIFFSTORE", destination], keys);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZINCRBY.js
var require_ZINCRBY = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZINCRBY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, increment, member) {
      return [
        "ZINCRBY",
        key,
        (0, generic_transformers_1.transformNumberInfinityArgument)(increment),
        member
      ];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_2 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_2.transformNumberInfinityReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZINTER.js
var require_ZINTER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZINTER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 2;
    exports2.IS_READ_ONLY = true;
    function transformArguments(keys, options2) {
      const args = (0, generic_transformers_1.pushVerdictArgument)(["ZINTER"], keys);
      if (options2?.WEIGHTS) {
        args.push("WEIGHTS", ...options2.WEIGHTS.map((weight) => weight.toString()));
      }
      if (options2?.AGGREGATE) {
        args.push("AGGREGATE", options2.AGGREGATE);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZINTER_WITHSCORES.js
var require_ZINTER_WITHSCORES = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZINTER_WITHSCORES.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var ZINTER_1 = require_ZINTER();
    var ZINTER_2 = require_ZINTER();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return ZINTER_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return ZINTER_2.IS_READ_ONLY;
    } });
    function transformArguments(...args) {
      return [
        ...(0, ZINTER_1.transformArguments)(...args),
        "WITHSCORES"
      ];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformSortedSetWithScoresReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZINTERCARD.js
var require_ZINTERCARD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZINTERCARD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 2;
    exports2.IS_READ_ONLY = true;
    function transformArguments(keys, limit) {
      const args = (0, generic_transformers_1.pushVerdictArgument)(["ZINTERCARD"], keys);
      if (limit) {
        args.push("LIMIT", limit.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZINTERSTORE.js
var require_ZINTERSTORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZINTERSTORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(destination, keys, options2) {
      const args = (0, generic_transformers_1.pushVerdictArgument)(["ZINTERSTORE", destination], keys);
      if (options2?.WEIGHTS) {
        args.push("WEIGHTS", ...options2.WEIGHTS.map((weight) => weight.toString()));
      }
      if (options2?.AGGREGATE) {
        args.push("AGGREGATE", options2.AGGREGATE);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZLEXCOUNT.js
var require_ZLEXCOUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZLEXCOUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, min, max) {
      return [
        "ZLEXCOUNT",
        key,
        min,
        max
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZMSCORE.js
var require_ZMSCORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZMSCORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, member) {
      return (0, generic_transformers_1.pushVerdictArguments)(["ZMSCORE", key], member);
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_2 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_2.transformNumberInfinityNullArrayReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZPOPMAX.js
var require_ZPOPMAX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZPOPMAX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return [
        "ZPOPMAX",
        key
      ];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformSortedSetMemberNullReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZPOPMAX_COUNT.js
var require_ZPOPMAX_COUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZPOPMAX_COUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var ZPOPMAX_1 = require_ZPOPMAX();
    var ZPOPMAX_2 = require_ZPOPMAX();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return ZPOPMAX_2.FIRST_KEY_INDEX;
    } });
    function transformArguments(key, count) {
      return [
        ...(0, ZPOPMAX_1.transformArguments)(key),
        count.toString()
      ];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformSortedSetWithScoresReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZPOPMIN.js
var require_ZPOPMIN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZPOPMIN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return [
        "ZPOPMIN",
        key
      ];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformSortedSetMemberNullReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZPOPMIN_COUNT.js
var require_ZPOPMIN_COUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZPOPMIN_COUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var ZPOPMIN_1 = require_ZPOPMIN();
    var ZPOPMIN_2 = require_ZPOPMIN();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return ZPOPMIN_2.FIRST_KEY_INDEX;
    } });
    function transformArguments(key, count) {
      return [
        ...(0, ZPOPMIN_1.transformArguments)(key),
        count.toString()
      ];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformSortedSetWithScoresReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZRANDMEMBER.js
var require_ZRANDMEMBER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZRANDMEMBER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["ZRANDMEMBER", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZRANDMEMBER_COUNT.js
var require_ZRANDMEMBER_COUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZRANDMEMBER_COUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var ZRANDMEMBER_1 = require_ZRANDMEMBER();
    var ZRANDMEMBER_2 = require_ZRANDMEMBER();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return ZRANDMEMBER_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return ZRANDMEMBER_2.IS_READ_ONLY;
    } });
    function transformArguments(key, count) {
      return [
        ...(0, ZRANDMEMBER_1.transformArguments)(key),
        count.toString()
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZRANDMEMBER_COUNT_WITHSCORES.js
var require_ZRANDMEMBER_COUNT_WITHSCORES = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZRANDMEMBER_COUNT_WITHSCORES.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var ZRANDMEMBER_COUNT_1 = require_ZRANDMEMBER_COUNT();
    var ZRANDMEMBER_COUNT_2 = require_ZRANDMEMBER_COUNT();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return ZRANDMEMBER_COUNT_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return ZRANDMEMBER_COUNT_2.IS_READ_ONLY;
    } });
    function transformArguments(...args) {
      return [
        ...(0, ZRANDMEMBER_COUNT_1.transformArguments)(...args),
        "WITHSCORES"
      ];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformSortedSetWithScoresReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZRANGE.js
var require_ZRANGE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZRANGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, min, max, options2) {
      const args = [
        "ZRANGE",
        key,
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(min),
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(max)
      ];
      switch (options2?.BY) {
        case "SCORE":
          args.push("BYSCORE");
          break;
        case "LEX":
          args.push("BYLEX");
          break;
      }
      if (options2?.REV) {
        args.push("REV");
      }
      if (options2?.LIMIT) {
        args.push("LIMIT", options2.LIMIT.offset.toString(), options2.LIMIT.count.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZRANGE_WITHSCORES.js
var require_ZRANGE_WITHSCORES = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZRANGE_WITHSCORES.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var ZRANGE_1 = require_ZRANGE();
    var ZRANGE_2 = require_ZRANGE();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return ZRANGE_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return ZRANGE_2.IS_READ_ONLY;
    } });
    function transformArguments(...args) {
      return [
        ...(0, ZRANGE_1.transformArguments)(...args),
        "WITHSCORES"
      ];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformSortedSetWithScoresReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZRANGEBYLEX.js
var require_ZRANGEBYLEX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZRANGEBYLEX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, min, max, options2) {
      const args = [
        "ZRANGEBYLEX",
        key,
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(min),
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(max)
      ];
      if (options2?.LIMIT) {
        args.push("LIMIT", options2.LIMIT.offset.toString(), options2.LIMIT.count.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZRANGEBYSCORE.js
var require_ZRANGEBYSCORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZRANGEBYSCORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, min, max, options2) {
      const args = [
        "ZRANGEBYSCORE",
        key,
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(min),
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(max)
      ];
      if (options2?.LIMIT) {
        args.push("LIMIT", options2.LIMIT.offset.toString(), options2.LIMIT.count.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZRANGEBYSCORE_WITHSCORES.js
var require_ZRANGEBYSCORE_WITHSCORES = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZRANGEBYSCORE_WITHSCORES.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var ZRANGEBYSCORE_1 = require_ZRANGEBYSCORE();
    var ZRANGEBYSCORE_2 = require_ZRANGEBYSCORE();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return ZRANGEBYSCORE_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return ZRANGEBYSCORE_2.IS_READ_ONLY;
    } });
    function transformArguments(key, min, max, options2) {
      return [
        ...(0, ZRANGEBYSCORE_1.transformArguments)(key, min, max, options2),
        "WITHSCORES"
      ];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformSortedSetWithScoresReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZRANGESTORE.js
var require_ZRANGESTORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZRANGESTORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(dst, src, min, max, options2) {
      const args = [
        "ZRANGESTORE",
        dst,
        src,
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(min),
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(max)
      ];
      switch (options2?.BY) {
        case "SCORE":
          args.push("BYSCORE");
          break;
        case "LEX":
          args.push("BYLEX");
          break;
      }
      if (options2?.REV) {
        args.push("REV");
      }
      if (options2?.LIMIT) {
        args.push("LIMIT", options2.LIMIT.offset.toString(), options2.LIMIT.count.toString());
      }
      if (options2?.WITHSCORES) {
        args.push("WITHSCORES");
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      if (typeof reply !== "number") {
        throw new TypeError(`Upgrade to Redis 6.2.5 and up (https://github.com/redis/redis/pull/9089)`);
      }
      return reply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZRANK.js
var require_ZRANK = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZRANK.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, member) {
      return ["ZRANK", key, member];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZREM.js
var require_ZREM = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZREM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, member) {
      return (0, generic_transformers_1.pushVerdictArguments)(["ZREM", key], member);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZREMRANGEBYLEX.js
var require_ZREMRANGEBYLEX = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZREMRANGEBYLEX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, min, max) {
      return [
        "ZREMRANGEBYLEX",
        key,
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(min),
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(max)
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZREMRANGEBYRANK.js
var require_ZREMRANGEBYRANK = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZREMRANGEBYRANK.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, start, stop) {
      return ["ZREMRANGEBYRANK", key, start.toString(), stop.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZREMRANGEBYSCORE.js
var require_ZREMRANGEBYSCORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZREMRANGEBYSCORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, min, max) {
      return [
        "ZREMRANGEBYSCORE",
        key,
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(min),
        (0, generic_transformers_1.transformStringNumberInfinityArgument)(max)
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZREVRANK.js
var require_ZREVRANK = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZREVRANK.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, member) {
      return ["ZREVRANK", key, member];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZSCAN.js
var require_ZSCAN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZSCAN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, cursor, options2) {
      return (0, generic_transformers_1.pushScanArguments)([
        "ZSCAN",
        key
      ], cursor, options2);
    }
    exports2.transformArguments = transformArguments;
    function transformReply([cursor, rawMembers]) {
      const parsedMembers = [];
      for (let i = 0; i < rawMembers.length; i += 2) {
        parsedMembers.push({
          value: rawMembers[i],
          score: (0, generic_transformers_1.transformNumberInfinityReply)(rawMembers[i + 1])
        });
      }
      return {
        cursor: Number(cursor),
        members: parsedMembers
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZSCORE.js
var require_ZSCORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZSCORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, member) {
      return ["ZSCORE", key, member];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformNumberInfinityNullReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZUNION.js
var require_ZUNION = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZUNION.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 2;
    exports2.IS_READ_ONLY = true;
    function transformArguments(keys, options2) {
      const args = (0, generic_transformers_1.pushVerdictArgument)(["ZUNION"], keys);
      if (options2?.WEIGHTS) {
        args.push("WEIGHTS", ...options2.WEIGHTS.map((weight) => weight.toString()));
      }
      if (options2?.AGGREGATE) {
        args.push("AGGREGATE", options2.AGGREGATE);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ZUNION_WITHSCORES.js
var require_ZUNION_WITHSCORES = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZUNION_WITHSCORES.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var ZUNION_1 = require_ZUNION();
    var ZUNION_2 = require_ZUNION();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return ZUNION_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return ZUNION_2.IS_READ_ONLY;
    } });
    function transformArguments(...args) {
      return [
        ...(0, ZUNION_1.transformArguments)(...args),
        "WITHSCORES"
      ];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformSortedSetWithScoresReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/ZUNIONSTORE.js
var require_ZUNIONSTORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ZUNIONSTORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(destination, keys, options2) {
      const args = (0, generic_transformers_1.pushVerdictArgument)(["ZUNIONSTORE", destination], keys);
      if (options2?.WEIGHTS) {
        args.push("WEIGHTS", ...options2.WEIGHTS.map((weight) => weight.toString()));
      }
      if (options2?.AGGREGATE) {
        args.push("AGGREGATE", options2.AGGREGATE);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/cluster/commands.js
var require_commands = __commonJS({
  "node_modules/@redis/client/dist/lib/cluster/commands.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var APPEND = require_APPEND();
    var BITCOUNT = require_BITCOUNT();
    var BITFIELD_RO = require_BITFIELD_RO();
    var BITFIELD = require_BITFIELD();
    var BITOP = require_BITOP();
    var BITPOS = require_BITPOS();
    var BLMOVE = require_BLMOVE();
    var BLMPOP = require_BLMPOP();
    var BLPOP = require_BLPOP();
    var BRPOP = require_BRPOP();
    var BRPOPLPUSH = require_BRPOPLPUSH();
    var BZMPOP = require_BZMPOP();
    var BZPOPMAX = require_BZPOPMAX();
    var BZPOPMIN = require_BZPOPMIN();
    var COPY = require_COPY();
    var DECR = require_DECR();
    var DECRBY = require_DECRBY();
    var DEL = require_DEL();
    var DUMP = require_DUMP();
    var EVAL_RO = require_EVAL_RO();
    var EVAL = require_EVAL();
    var EVALSHA_RO = require_EVALSHA_RO();
    var EVALSHA = require_EVALSHA();
    var EXISTS = require_EXISTS();
    var EXPIRE = require_EXPIRE();
    var EXPIREAT = require_EXPIREAT();
    var EXPIRETIME = require_EXPIRETIME();
    var FCALL_RO = require_FCALL_RO();
    var FCALL = require_FCALL();
    var GEOADD = require_GEOADD();
    var GEODIST = require_GEODIST();
    var GEOHASH = require_GEOHASH();
    var GEOPOS = require_GEOPOS();
    var GEORADIUS_RO_WITH = require_GEORADIUS_RO_WITH();
    var GEORADIUS_RO = require_GEORADIUS_RO();
    var GEORADIUS_WITH = require_GEORADIUS_WITH();
    var GEORADIUS = require_GEORADIUS();
    var GEORADIUSBYMEMBER_RO_WITH = require_GEORADIUSBYMEMBER_RO_WITH();
    var GEORADIUSBYMEMBER_RO = require_GEORADIUSBYMEMBER_RO();
    var GEORADIUSBYMEMBER_WITH = require_GEORADIUSBYMEMBER_WITH();
    var GEORADIUSBYMEMBER = require_GEORADIUSBYMEMBER();
    var GEORADIUSBYMEMBERSTORE = require_GEORADIUSBYMEMBERSTORE();
    var GEORADIUSSTORE = require_GEORADIUSSTORE();
    var GEOSEARCH_WITH = require_GEOSEARCH_WITH();
    var GEOSEARCH = require_GEOSEARCH();
    var GEOSEARCHSTORE = require_GEOSEARCHSTORE();
    var GET = require_GET();
    var GETBIT = require_GETBIT();
    var GETDEL = require_GETDEL();
    var GETEX = require_GETEX();
    var GETRANGE = require_GETRANGE();
    var GETSET = require_GETSET();
    var HDEL = require_HDEL();
    var HEXISTS = require_HEXISTS();
    var HEXPIRE = require_HEXPIRE();
    var HEXPIREAT = require_HEXPIREAT();
    var HEXPIRETIME = require_HEXPIRETIME();
    var HGET = require_HGET();
    var HGETALL = require_HGETALL();
    var HINCRBY = require_HINCRBY();
    var HINCRBYFLOAT = require_HINCRBYFLOAT();
    var HKEYS = require_HKEYS();
    var HLEN = require_HLEN();
    var HMGET = require_HMGET();
    var HPERSIST = require_HPERSIST();
    var HPEXPIRE = require_HPEXPIRE();
    var HPEXPIREAT = require_HPEXPIREAT();
    var HPEXPIRETIME = require_HPEXPIRETIME();
    var HPTTL = require_HPTTL();
    var HRANDFIELD_COUNT_WITHVALUES = require_HRANDFIELD_COUNT_WITHVALUES();
    var HRANDFIELD_COUNT = require_HRANDFIELD_COUNT();
    var HRANDFIELD = require_HRANDFIELD();
    var HSCAN = require_HSCAN();
    var HSCAN_NOVALUES = require_HSCAN_NOVALUES();
    var HSET = require_HSET();
    var HSETNX = require_HSETNX();
    var HSTRLEN = require_HSTRLEN();
    var HTTL = require_HTTL();
    var HVALS = require_HVALS();
    var INCR = require_INCR();
    var INCRBY = require_INCRBY();
    var INCRBYFLOAT = require_INCRBYFLOAT();
    var LCS_IDX_WITHMATCHLEN = require_LCS_IDX_WITHMATCHLEN();
    var LCS_IDX = require_LCS_IDX();
    var LCS_LEN = require_LCS_LEN();
    var LCS = require_LCS();
    var LINDEX = require_LINDEX();
    var LINSERT = require_LINSERT();
    var LLEN = require_LLEN();
    var LMOVE = require_LMOVE();
    var LMPOP = require_LMPOP();
    var LPOP_COUNT = require_LPOP_COUNT();
    var LPOP = require_LPOP();
    var LPOS_COUNT = require_LPOS_COUNT();
    var LPOS = require_LPOS();
    var LPUSH = require_LPUSH();
    var LPUSHX = require_LPUSHX();
    var LRANGE = require_LRANGE();
    var LREM = require_LREM();
    var LSET = require_LSET();
    var LTRIM = require_LTRIM();
    var MGET = require_MGET();
    var MIGRATE = require_MIGRATE();
    var MSET = require_MSET();
    var MSETNX = require_MSETNX();
    var OBJECT_ENCODING = require_OBJECT_ENCODING();
    var OBJECT_FREQ = require_OBJECT_FREQ();
    var OBJECT_IDLETIME = require_OBJECT_IDLETIME();
    var OBJECT_REFCOUNT = require_OBJECT_REFCOUNT();
    var PERSIST = require_PERSIST();
    var PEXPIRE = require_PEXPIRE();
    var PEXPIREAT = require_PEXPIREAT();
    var PEXPIRETIME = require_PEXPIRETIME();
    var PFADD = require_PFADD();
    var PFCOUNT = require_PFCOUNT();
    var PFMERGE = require_PFMERGE();
    var PSETEX = require_PSETEX();
    var PTTL = require_PTTL();
    var PUBLISH = require_PUBLISH();
    var RENAME = require_RENAME();
    var RENAMENX = require_RENAMENX();
    var RESTORE = require_RESTORE();
    var RPOP_COUNT = require_RPOP_COUNT();
    var RPOP = require_RPOP();
    var RPOPLPUSH = require_RPOPLPUSH();
    var RPUSH = require_RPUSH();
    var RPUSHX = require_RPUSHX();
    var SADD = require_SADD();
    var SCARD = require_SCARD();
    var SDIFF = require_SDIFF();
    var SDIFFSTORE = require_SDIFFSTORE();
    var SET = require_SET();
    var SETBIT = require_SETBIT();
    var SETEX = require_SETEX();
    var SETNX = require_SETNX();
    var SETRANGE = require_SETRANGE();
    var SINTER = require_SINTER();
    var SINTERCARD = require_SINTERCARD();
    var SINTERSTORE = require_SINTERSTORE();
    var SISMEMBER = require_SISMEMBER();
    var SMEMBERS = require_SMEMBERS();
    var SMISMEMBER = require_SMISMEMBER();
    var SMOVE = require_SMOVE();
    var SORT_RO = require_SORT_RO();
    var SORT_STORE = require_SORT_STORE();
    var SORT = require_SORT();
    var SPOP = require_SPOP();
    var SPUBLISH = require_SPUBLISH();
    var SRANDMEMBER_COUNT = require_SRANDMEMBER_COUNT();
    var SRANDMEMBER = require_SRANDMEMBER();
    var SREM = require_SREM();
    var SSCAN = require_SSCAN();
    var STRLEN = require_STRLEN();
    var SUNION = require_SUNION();
    var SUNIONSTORE = require_SUNIONSTORE();
    var TOUCH = require_TOUCH();
    var TTL = require_TTL();
    var TYPE = require_TYPE();
    var UNLINK = require_UNLINK();
    var WATCH = require_WATCH();
    var XACK = require_XACK();
    var XADD = require_XADD();
    var XAUTOCLAIM_JUSTID = require_XAUTOCLAIM_JUSTID();
    var XAUTOCLAIM = require_XAUTOCLAIM();
    var XCLAIM_JUSTID = require_XCLAIM_JUSTID();
    var XCLAIM = require_XCLAIM();
    var XDEL = require_XDEL();
    var XGROUP_CREATE = require_XGROUP_CREATE();
    var XGROUP_CREATECONSUMER = require_XGROUP_CREATECONSUMER();
    var XGROUP_DELCONSUMER = require_XGROUP_DELCONSUMER();
    var XGROUP_DESTROY = require_XGROUP_DESTROY();
    var XGROUP_SETID = require_XGROUP_SETID();
    var XINFO_CONSUMERS = require_XINFO_CONSUMERS();
    var XINFO_GROUPS = require_XINFO_GROUPS();
    var XINFO_STREAM = require_XINFO_STREAM();
    var XLEN = require_XLEN();
    var XPENDING_RANGE = require_XPENDING_RANGE();
    var XPENDING = require_XPENDING();
    var XRANGE = require_XRANGE();
    var XREAD = require_XREAD();
    var XREADGROUP = require_XREADGROUP();
    var XREVRANGE = require_XREVRANGE();
    var XSETID = require_XSETID();
    var XTRIM = require_XTRIM();
    var ZADD = require_ZADD();
    var ZCARD = require_ZCARD();
    var ZCOUNT = require_ZCOUNT();
    var ZDIFF_WITHSCORES = require_ZDIFF_WITHSCORES();
    var ZDIFF = require_ZDIFF();
    var ZDIFFSTORE = require_ZDIFFSTORE();
    var ZINCRBY = require_ZINCRBY();
    var ZINTER_WITHSCORES = require_ZINTER_WITHSCORES();
    var ZINTER = require_ZINTER();
    var ZINTERCARD = require_ZINTERCARD();
    var ZINTERSTORE = require_ZINTERSTORE();
    var ZLEXCOUNT = require_ZLEXCOUNT();
    var ZMPOP = require_ZMPOP();
    var ZMSCORE = require_ZMSCORE();
    var ZPOPMAX_COUNT = require_ZPOPMAX_COUNT();
    var ZPOPMAX = require_ZPOPMAX();
    var ZPOPMIN_COUNT = require_ZPOPMIN_COUNT();
    var ZPOPMIN = require_ZPOPMIN();
    var ZRANDMEMBER_COUNT_WITHSCORES = require_ZRANDMEMBER_COUNT_WITHSCORES();
    var ZRANDMEMBER_COUNT = require_ZRANDMEMBER_COUNT();
    var ZRANDMEMBER = require_ZRANDMEMBER();
    var ZRANGE_WITHSCORES = require_ZRANGE_WITHSCORES();
    var ZRANGE = require_ZRANGE();
    var ZRANGEBYLEX = require_ZRANGEBYLEX();
    var ZRANGEBYSCORE_WITHSCORES = require_ZRANGEBYSCORE_WITHSCORES();
    var ZRANGEBYSCORE = require_ZRANGEBYSCORE();
    var ZRANGESTORE = require_ZRANGESTORE();
    var ZRANK = require_ZRANK();
    var ZREM = require_ZREM();
    var ZREMRANGEBYLEX = require_ZREMRANGEBYLEX();
    var ZREMRANGEBYRANK = require_ZREMRANGEBYRANK();
    var ZREMRANGEBYSCORE = require_ZREMRANGEBYSCORE();
    var ZREVRANK = require_ZREVRANK();
    var ZSCAN = require_ZSCAN();
    var ZSCORE = require_ZSCORE();
    var ZUNION_WITHSCORES = require_ZUNION_WITHSCORES();
    var ZUNION = require_ZUNION();
    var ZUNIONSTORE = require_ZUNIONSTORE();
    exports2.default = {
      APPEND,
      append: APPEND,
      BITCOUNT,
      bitCount: BITCOUNT,
      BITFIELD_RO,
      bitFieldRo: BITFIELD_RO,
      BITFIELD,
      bitField: BITFIELD,
      BITOP,
      bitOp: BITOP,
      BITPOS,
      bitPos: BITPOS,
      BLMOVE,
      blMove: BLMOVE,
      BLMPOP,
      blmPop: BLMPOP,
      BLPOP,
      blPop: BLPOP,
      BRPOP,
      brPop: BRPOP,
      BRPOPLPUSH,
      brPopLPush: BRPOPLPUSH,
      BZMPOP,
      bzmPop: BZMPOP,
      BZPOPMAX,
      bzPopMax: BZPOPMAX,
      BZPOPMIN,
      bzPopMin: BZPOPMIN,
      COPY,
      copy: COPY,
      DECR,
      decr: DECR,
      DECRBY,
      decrBy: DECRBY,
      DEL,
      del: DEL,
      DUMP,
      dump: DUMP,
      EVAL_RO,
      evalRo: EVAL_RO,
      EVAL,
      eval: EVAL,
      EVALSHA,
      evalSha: EVALSHA,
      EVALSHA_RO,
      evalShaRo: EVALSHA_RO,
      EXISTS,
      exists: EXISTS,
      EXPIRE,
      expire: EXPIRE,
      EXPIREAT,
      expireAt: EXPIREAT,
      EXPIRETIME,
      expireTime: EXPIRETIME,
      FCALL_RO,
      fCallRo: FCALL_RO,
      FCALL,
      fCall: FCALL,
      GEOADD,
      geoAdd: GEOADD,
      GEODIST,
      geoDist: GEODIST,
      GEOHASH,
      geoHash: GEOHASH,
      GEOPOS,
      geoPos: GEOPOS,
      GEORADIUS_RO_WITH,
      geoRadiusRoWith: GEORADIUS_RO_WITH,
      GEORADIUS_RO,
      geoRadiusRo: GEORADIUS_RO,
      GEORADIUS_WITH,
      geoRadiusWith: GEORADIUS_WITH,
      GEORADIUS,
      geoRadius: GEORADIUS,
      GEORADIUSBYMEMBER_RO_WITH,
      geoRadiusByMemberRoWith: GEORADIUSBYMEMBER_RO_WITH,
      GEORADIUSBYMEMBER_RO,
      geoRadiusByMemberRo: GEORADIUSBYMEMBER_RO,
      GEORADIUSBYMEMBER_WITH,
      geoRadiusByMemberWith: GEORADIUSBYMEMBER_WITH,
      GEORADIUSBYMEMBER,
      geoRadiusByMember: GEORADIUSBYMEMBER,
      GEORADIUSBYMEMBERSTORE,
      geoRadiusByMemberStore: GEORADIUSBYMEMBERSTORE,
      GEORADIUSSTORE,
      geoRadiusStore: GEORADIUSSTORE,
      GEOSEARCH_WITH,
      geoSearchWith: GEOSEARCH_WITH,
      GEOSEARCH,
      geoSearch: GEOSEARCH,
      GEOSEARCHSTORE,
      geoSearchStore: GEOSEARCHSTORE,
      GET,
      get: GET,
      GETBIT,
      getBit: GETBIT,
      GETDEL,
      getDel: GETDEL,
      GETEX,
      getEx: GETEX,
      GETRANGE,
      getRange: GETRANGE,
      GETSET,
      getSet: GETSET,
      HDEL,
      hDel: HDEL,
      HEXISTS,
      hExists: HEXISTS,
      HEXPIRE,
      hExpire: HEXPIRE,
      HEXPIREAT,
      hExpireAt: HEXPIREAT,
      HEXPIRETIME,
      hExpireTime: HEXPIRETIME,
      HGET,
      hGet: HGET,
      HGETALL,
      hGetAll: HGETALL,
      HINCRBY,
      hIncrBy: HINCRBY,
      HINCRBYFLOAT,
      hIncrByFloat: HINCRBYFLOAT,
      HKEYS,
      hKeys: HKEYS,
      HLEN,
      hLen: HLEN,
      HMGET,
      hmGet: HMGET,
      HPERSIST,
      hPersist: HPERSIST,
      HPEXPIRE,
      hpExpire: HPEXPIRE,
      HPEXPIREAT,
      hpExpireAt: HPEXPIREAT,
      HPEXPIRETIME,
      hpExpireTime: HPEXPIRETIME,
      HPTTL,
      hpTTL: HPTTL,
      HRANDFIELD_COUNT_WITHVALUES,
      hRandFieldCountWithValues: HRANDFIELD_COUNT_WITHVALUES,
      HRANDFIELD_COUNT,
      hRandFieldCount: HRANDFIELD_COUNT,
      HRANDFIELD,
      hRandField: HRANDFIELD,
      HSCAN,
      hScan: HSCAN,
      HSCAN_NOVALUES,
      hScanNoValues: HSCAN_NOVALUES,
      HSET,
      hSet: HSET,
      HSETNX,
      hSetNX: HSETNX,
      HSTRLEN,
      hStrLen: HSTRLEN,
      HTTL,
      hTTL: HTTL,
      HVALS,
      hVals: HVALS,
      INCR,
      incr: INCR,
      INCRBY,
      incrBy: INCRBY,
      INCRBYFLOAT,
      incrByFloat: INCRBYFLOAT,
      LCS_IDX_WITHMATCHLEN,
      lcsIdxWithMatchLen: LCS_IDX_WITHMATCHLEN,
      LCS_IDX,
      lcsIdx: LCS_IDX,
      LCS_LEN,
      lcsLen: LCS_LEN,
      LCS,
      lcs: LCS,
      LINDEX,
      lIndex: LINDEX,
      LINSERT,
      lInsert: LINSERT,
      LLEN,
      lLen: LLEN,
      LMOVE,
      lMove: LMOVE,
      LMPOP,
      lmPop: LMPOP,
      LPOP_COUNT,
      lPopCount: LPOP_COUNT,
      LPOP,
      lPop: LPOP,
      LPOS_COUNT,
      lPosCount: LPOS_COUNT,
      LPOS,
      lPos: LPOS,
      LPUSH,
      lPush: LPUSH,
      LPUSHX,
      lPushX: LPUSHX,
      LRANGE,
      lRange: LRANGE,
      LREM,
      lRem: LREM,
      LSET,
      lSet: LSET,
      LTRIM,
      lTrim: LTRIM,
      MGET,
      mGet: MGET,
      MIGRATE,
      migrate: MIGRATE,
      MSET,
      mSet: MSET,
      MSETNX,
      mSetNX: MSETNX,
      OBJECT_ENCODING,
      objectEncoding: OBJECT_ENCODING,
      OBJECT_FREQ,
      objectFreq: OBJECT_FREQ,
      OBJECT_IDLETIME,
      objectIdleTime: OBJECT_IDLETIME,
      OBJECT_REFCOUNT,
      objectRefCount: OBJECT_REFCOUNT,
      PERSIST,
      persist: PERSIST,
      PEXPIRE,
      pExpire: PEXPIRE,
      PEXPIREAT,
      pExpireAt: PEXPIREAT,
      PEXPIRETIME,
      pExpireTime: PEXPIRETIME,
      PFADD,
      pfAdd: PFADD,
      PFCOUNT,
      pfCount: PFCOUNT,
      PFMERGE,
      pfMerge: PFMERGE,
      PSETEX,
      pSetEx: PSETEX,
      PTTL,
      pTTL: PTTL,
      PUBLISH,
      publish: PUBLISH,
      RENAME,
      rename: RENAME,
      RENAMENX,
      renameNX: RENAMENX,
      RESTORE,
      restore: RESTORE,
      RPOP_COUNT,
      rPopCount: RPOP_COUNT,
      RPOP,
      rPop: RPOP,
      RPOPLPUSH,
      rPopLPush: RPOPLPUSH,
      RPUSH,
      rPush: RPUSH,
      RPUSHX,
      rPushX: RPUSHX,
      SADD,
      sAdd: SADD,
      SCARD,
      sCard: SCARD,
      SDIFF,
      sDiff: SDIFF,
      SDIFFSTORE,
      sDiffStore: SDIFFSTORE,
      SINTER,
      sInter: SINTER,
      SINTERCARD,
      sInterCard: SINTERCARD,
      SINTERSTORE,
      sInterStore: SINTERSTORE,
      SET,
      set: SET,
      SETBIT,
      setBit: SETBIT,
      SETEX,
      setEx: SETEX,
      SETNX,
      setNX: SETNX,
      SETRANGE,
      setRange: SETRANGE,
      SISMEMBER,
      sIsMember: SISMEMBER,
      SMEMBERS,
      sMembers: SMEMBERS,
      SMISMEMBER,
      smIsMember: SMISMEMBER,
      SMOVE,
      sMove: SMOVE,
      SORT_RO,
      sortRo: SORT_RO,
      SORT_STORE,
      sortStore: SORT_STORE,
      SORT,
      sort: SORT,
      SPOP,
      sPop: SPOP,
      SPUBLISH,
      sPublish: SPUBLISH,
      SRANDMEMBER_COUNT,
      sRandMemberCount: SRANDMEMBER_COUNT,
      SRANDMEMBER,
      sRandMember: SRANDMEMBER,
      SREM,
      sRem: SREM,
      SSCAN,
      sScan: SSCAN,
      STRLEN,
      strLen: STRLEN,
      SUNION,
      sUnion: SUNION,
      SUNIONSTORE,
      sUnionStore: SUNIONSTORE,
      TOUCH,
      touch: TOUCH,
      TTL,
      ttl: TTL,
      TYPE,
      type: TYPE,
      UNLINK,
      unlink: UNLINK,
      WATCH,
      watch: WATCH,
      XACK,
      xAck: XACK,
      XADD,
      xAdd: XADD,
      XAUTOCLAIM_JUSTID,
      xAutoClaimJustId: XAUTOCLAIM_JUSTID,
      XAUTOCLAIM,
      xAutoClaim: XAUTOCLAIM,
      XCLAIM,
      xClaim: XCLAIM,
      XCLAIM_JUSTID,
      xClaimJustId: XCLAIM_JUSTID,
      XDEL,
      xDel: XDEL,
      XGROUP_CREATE,
      xGroupCreate: XGROUP_CREATE,
      XGROUP_CREATECONSUMER,
      xGroupCreateConsumer: XGROUP_CREATECONSUMER,
      XGROUP_DELCONSUMER,
      xGroupDelConsumer: XGROUP_DELCONSUMER,
      XGROUP_DESTROY,
      xGroupDestroy: XGROUP_DESTROY,
      XGROUP_SETID,
      xGroupSetId: XGROUP_SETID,
      XINFO_CONSUMERS,
      xInfoConsumers: XINFO_CONSUMERS,
      XINFO_GROUPS,
      xInfoGroups: XINFO_GROUPS,
      XINFO_STREAM,
      xInfoStream: XINFO_STREAM,
      XLEN,
      xLen: XLEN,
      XPENDING_RANGE,
      xPendingRange: XPENDING_RANGE,
      XPENDING,
      xPending: XPENDING,
      XRANGE,
      xRange: XRANGE,
      XREAD,
      xRead: XREAD,
      XREADGROUP,
      xReadGroup: XREADGROUP,
      XREVRANGE,
      xRevRange: XREVRANGE,
      XSETID,
      xSetId: XSETID,
      XTRIM,
      xTrim: XTRIM,
      ZADD,
      zAdd: ZADD,
      ZCARD,
      zCard: ZCARD,
      ZCOUNT,
      zCount: ZCOUNT,
      ZDIFF_WITHSCORES,
      zDiffWithScores: ZDIFF_WITHSCORES,
      ZDIFF,
      zDiff: ZDIFF,
      ZDIFFSTORE,
      zDiffStore: ZDIFFSTORE,
      ZINCRBY,
      zIncrBy: ZINCRBY,
      ZINTER_WITHSCORES,
      zInterWithScores: ZINTER_WITHSCORES,
      ZINTER,
      zInter: ZINTER,
      ZINTERCARD,
      zInterCard: ZINTERCARD,
      ZINTERSTORE,
      zInterStore: ZINTERSTORE,
      ZLEXCOUNT,
      zLexCount: ZLEXCOUNT,
      ZMPOP,
      zmPop: ZMPOP,
      ZMSCORE,
      zmScore: ZMSCORE,
      ZPOPMAX_COUNT,
      zPopMaxCount: ZPOPMAX_COUNT,
      ZPOPMAX,
      zPopMax: ZPOPMAX,
      ZPOPMIN_COUNT,
      zPopMinCount: ZPOPMIN_COUNT,
      ZPOPMIN,
      zPopMin: ZPOPMIN,
      ZRANDMEMBER_COUNT_WITHSCORES,
      zRandMemberCountWithScores: ZRANDMEMBER_COUNT_WITHSCORES,
      ZRANDMEMBER_COUNT,
      zRandMemberCount: ZRANDMEMBER_COUNT,
      ZRANDMEMBER,
      zRandMember: ZRANDMEMBER,
      ZRANGE_WITHSCORES,
      zRangeWithScores: ZRANGE_WITHSCORES,
      ZRANGE,
      zRange: ZRANGE,
      ZRANGEBYLEX,
      zRangeByLex: ZRANGEBYLEX,
      ZRANGEBYSCORE_WITHSCORES,
      zRangeByScoreWithScores: ZRANGEBYSCORE_WITHSCORES,
      ZRANGEBYSCORE,
      zRangeByScore: ZRANGEBYSCORE,
      ZRANGESTORE,
      zRangeStore: ZRANGESTORE,
      ZRANK,
      zRank: ZRANK,
      ZREM,
      zRem: ZREM,
      ZREMRANGEBYLEX,
      zRemRangeByLex: ZREMRANGEBYLEX,
      ZREMRANGEBYRANK,
      zRemRangeByRank: ZREMRANGEBYRANK,
      ZREMRANGEBYSCORE,
      zRemRangeByScore: ZREMRANGEBYSCORE,
      ZREVRANK,
      zRevRank: ZREVRANK,
      ZSCAN,
      zScan: ZSCAN,
      ZSCORE,
      zScore: ZSCORE,
      ZUNION_WITHSCORES,
      zUnionWithScores: ZUNION_WITHSCORES,
      ZUNION,
      zUnion: ZUNION,
      ZUNIONSTORE,
      zUnionStore: ZUNIONSTORE
    };
  }
});

// node_modules/@redis/client/dist/lib/commands/ACL_CAT.js
var require_ACL_CAT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ACL_CAT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(categoryName) {
      const args = ["ACL", "CAT"];
      if (categoryName) {
        args.push(categoryName);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ACL_DELUSER.js
var require_ACL_DELUSER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ACL_DELUSER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    var generic_transformers_1 = require_generic_transformers();
    function transformArguments(username) {
      return (0, generic_transformers_1.pushVerdictArguments)(["ACL", "DELUSER"], username);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ACL_DRYRUN.js
var require_ACL_DRYRUN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ACL_DRYRUN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments(username, command) {
      return [
        "ACL",
        "DRYRUN",
        username,
        ...command
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ACL_GENPASS.js
var require_ACL_GENPASS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ACL_GENPASS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(bits) {
      const args = ["ACL", "GENPASS"];
      if (bits) {
        args.push(bits.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ACL_GETUSER.js
var require_ACL_GETUSER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ACL_GETUSER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments(username) {
      return ["ACL", "GETUSER", username];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        flags: reply[1],
        passwords: reply[3],
        commands: reply[5],
        keys: reply[7],
        channels: reply[9],
        selectors: reply[11]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/ACL_LIST.js
var require_ACL_LIST = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ACL_LIST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["ACL", "LIST"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ACL_LOAD.js
var require_ACL_LOAD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ACL_LOAD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["ACL", "LOAD"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ACL_LOG_RESET.js
var require_ACL_LOG_RESET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ACL_LOG_RESET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["ACL", "LOG", "RESET"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ACL_LOG.js
var require_ACL_LOG = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ACL_LOG.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments(count) {
      const args = ["ACL", "LOG"];
      if (count) {
        args.push(count.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.map((log) => ({
        count: log[1],
        reason: log[3],
        context: log[5],
        object: log[7],
        username: log[9],
        ageSeconds: Number(log[11]),
        clientInfo: log[13]
      }));
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/ACL_SAVE.js
var require_ACL_SAVE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ACL_SAVE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["ACL", "SAVE"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ACL_SETUSER.js
var require_ACL_SETUSER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ACL_SETUSER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    var generic_transformers_1 = require_generic_transformers();
    function transformArguments(username, rule) {
      return (0, generic_transformers_1.pushVerdictArguments)(["ACL", "SETUSER", username], rule);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ACL_USERS.js
var require_ACL_USERS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ACL_USERS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["ACL", "USERS"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ACL_WHOAMI.js
var require_ACL_WHOAMI = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ACL_WHOAMI.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["ACL", "WHOAMI"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ASKING.js
var require_ASKING = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ASKING.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["ASKING"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/AUTH.js
var require_AUTH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/AUTH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments({ username, password }) {
      if (!username) {
        return ["AUTH", password];
      }
      return ["AUTH", username, password];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/BGREWRITEAOF.js
var require_BGREWRITEAOF = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BGREWRITEAOF.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["BGREWRITEAOF"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/BGSAVE.js
var require_BGSAVE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/BGSAVE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(options2) {
      const args = ["BGSAVE"];
      if (options2?.SCHEDULE) {
        args.push("SCHEDULE");
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_CACHING.js
var require_CLIENT_CACHING = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_CACHING.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(value) {
      return [
        "CLIENT",
        "CACHING",
        value ? "YES" : "NO"
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_GETNAME.js
var require_CLIENT_GETNAME = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_GETNAME.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CLIENT", "GETNAME"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_GETREDIR.js
var require_CLIENT_GETREDIR = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_GETREDIR.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CLIENT", "GETREDIR"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_ID.js
var require_CLIENT_ID = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_ID.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments() {
      return ["CLIENT", "ID"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_KILL.js
var require_CLIENT_KILL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_KILL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.ClientKillFilters = void 0;
    var ClientKillFilters;
    (function(ClientKillFilters2) {
      ClientKillFilters2["ADDRESS"] = "ADDR";
      ClientKillFilters2["LOCAL_ADDRESS"] = "LADDR";
      ClientKillFilters2["ID"] = "ID";
      ClientKillFilters2["TYPE"] = "TYPE";
      ClientKillFilters2["USER"] = "USER";
      ClientKillFilters2["SKIP_ME"] = "SKIPME";
      ClientKillFilters2["MAXAGE"] = "MAXAGE";
    })(ClientKillFilters || (exports2.ClientKillFilters = ClientKillFilters = {}));
    function transformArguments(filters) {
      const args = ["CLIENT", "KILL"];
      if (Array.isArray(filters)) {
        for (const filter of filters) {
          pushFilter(args, filter);
        }
      } else {
        pushFilter(args, filters);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function pushFilter(args, filter) {
      if (filter === ClientKillFilters.SKIP_ME) {
        args.push("SKIPME");
        return;
      }
      args.push(filter.filter);
      switch (filter.filter) {
        case ClientKillFilters.ADDRESS:
          args.push(filter.address);
          break;
        case ClientKillFilters.LOCAL_ADDRESS:
          args.push(filter.localAddress);
          break;
        case ClientKillFilters.ID:
          args.push(typeof filter.id === "number" ? filter.id.toString() : filter.id);
          break;
        case ClientKillFilters.TYPE:
          args.push(filter.type);
          break;
        case ClientKillFilters.USER:
          args.push(filter.username);
          break;
        case ClientKillFilters.SKIP_ME:
          args.push(filter.skipMe ? "yes" : "no");
          break;
        case ClientKillFilters.MAXAGE:
          args.push(filter.maxAge.toString());
          break;
      }
    }
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_INFO.js
var require_CLIENT_INFO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_INFO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments() {
      return ["CLIENT", "INFO"];
    }
    exports2.transformArguments = transformArguments;
    var CLIENT_INFO_REGEX = /([^\s=]+)=([^\s]*)/g;
    function transformReply(rawReply) {
      const map = {};
      for (const item of rawReply.matchAll(CLIENT_INFO_REGEX)) {
        map[item[1]] = item[2];
      }
      const reply = {
        id: Number(map.id),
        addr: map.addr,
        fd: Number(map.fd),
        name: map.name,
        age: Number(map.age),
        idle: Number(map.idle),
        flags: map.flags,
        db: Number(map.db),
        sub: Number(map.sub),
        psub: Number(map.psub),
        multi: Number(map.multi),
        qbuf: Number(map.qbuf),
        qbufFree: Number(map["qbuf-free"]),
        argvMem: Number(map["argv-mem"]),
        obl: Number(map.obl),
        oll: Number(map.oll),
        omem: Number(map.omem),
        totMem: Number(map["tot-mem"]),
        events: map.events,
        cmd: map.cmd,
        user: map.user,
        libName: map["lib-name"],
        libVer: map["lib-ver"]
      };
      if (map.laddr !== void 0) {
        reply.laddr = map.laddr;
      }
      if (map.redir !== void 0) {
        reply.redir = Number(map.redir);
      }
      if (map.ssub !== void 0) {
        reply.ssub = Number(map.ssub);
      }
      if (map["multi-mem"] !== void 0) {
        reply.multiMem = Number(map["multi-mem"]);
      }
      if (map.resp !== void 0) {
        reply.resp = Number(map.resp);
      }
      return reply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_LIST.js
var require_CLIENT_LIST = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_LIST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var generic_transformers_1 = require_generic_transformers();
    var CLIENT_INFO_1 = require_CLIENT_INFO();
    exports2.IS_READ_ONLY = true;
    function transformArguments(filter) {
      let args = ["CLIENT", "LIST"];
      if (filter) {
        if (filter.TYPE !== void 0) {
          args.push("TYPE", filter.TYPE);
        } else {
          args.push("ID");
          args = (0, generic_transformers_1.pushVerdictArguments)(args, filter.ID);
        }
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(rawReply) {
      const split = rawReply.split("\n"), length = split.length - 1, reply = [];
      for (let i = 0; i < length; i++) {
        reply.push((0, CLIENT_INFO_1.transformReply)(split[i]));
      }
      return reply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_NO-EVICT.js
var require_CLIENT_NO_EVICT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_NO-EVICT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(value) {
      return [
        "CLIENT",
        "NO-EVICT",
        value ? "ON" : "OFF"
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_NO-TOUCH.js
var require_CLIENT_NO_TOUCH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_NO-TOUCH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(value) {
      return [
        "CLIENT",
        "NO-TOUCH",
        value ? "ON" : "OFF"
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_PAUSE.js
var require_CLIENT_PAUSE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_PAUSE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(timeout2, mode) {
      const args = [
        "CLIENT",
        "PAUSE",
        timeout2.toString()
      ];
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_SETNAME.js
var require_CLIENT_SETNAME = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_SETNAME.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(name) {
      return ["CLIENT", "SETNAME", name];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_TRACKING.js
var require_CLIENT_TRACKING = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_TRACKING.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(mode, options2) {
      const args = [
        "CLIENT",
        "TRACKING",
        mode ? "ON" : "OFF"
      ];
      if (mode) {
        if (options2?.REDIRECT) {
          args.push("REDIRECT", options2.REDIRECT.toString());
        }
        if (isBroadcast(options2)) {
          args.push("BCAST");
          if (options2?.PREFIX) {
            if (Array.isArray(options2.PREFIX)) {
              for (const prefix of options2.PREFIX) {
                args.push("PREFIX", prefix);
              }
            } else {
              args.push("PREFIX", options2.PREFIX);
            }
          }
        } else if (isOptIn(options2)) {
          args.push("OPTIN");
        } else if (isOptOut(options2)) {
          args.push("OPTOUT");
        }
        if (options2?.NOLOOP) {
          args.push("NOLOOP");
        }
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function isBroadcast(options2) {
      return options2?.BCAST === true;
    }
    function isOptIn(options2) {
      return options2?.OPTIN === true;
    }
    function isOptOut(options2) {
      return options2?.OPTOUT === true;
    }
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_TRACKINGINFO.js
var require_CLIENT_TRACKINGINFO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_TRACKINGINFO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CLIENT", "TRACKINGINFO"];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        flags: new Set(reply[1]),
        redirect: reply[3],
        prefixes: reply[5]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLIENT_UNPAUSE.js
var require_CLIENT_UNPAUSE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLIENT_UNPAUSE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CLIENT", "UNPAUSE"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_ADDSLOTS.js
var require_CLUSTER_ADDSLOTS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_ADDSLOTS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    var generic_transformers_1 = require_generic_transformers();
    function transformArguments(slots) {
      return (0, generic_transformers_1.pushVerdictNumberArguments)(["CLUSTER", "ADDSLOTS"], slots);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_ADDSLOTSRANGE.js
var require_CLUSTER_ADDSLOTSRANGE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_ADDSLOTSRANGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    var generic_transformers_1 = require_generic_transformers();
    function transformArguments(ranges) {
      return (0, generic_transformers_1.pushSlotRangesArguments)(["CLUSTER", "ADDSLOTSRANGE"], ranges);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_BUMPEPOCH.js
var require_CLUSTER_BUMPEPOCH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_BUMPEPOCH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CLUSTER", "BUMPEPOCH"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_COUNT-FAILURE-REPORTS.js
var require_CLUSTER_COUNT_FAILURE_REPORTS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_COUNT-FAILURE-REPORTS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(nodeId) {
      return ["CLUSTER", "COUNT-FAILURE-REPORTS", nodeId];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_COUNTKEYSINSLOT.js
var require_CLUSTER_COUNTKEYSINSLOT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_COUNTKEYSINSLOT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(slot) {
      return ["CLUSTER", "COUNTKEYSINSLOT", slot.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_DELSLOTS.js
var require_CLUSTER_DELSLOTS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_DELSLOTS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    var generic_transformers_1 = require_generic_transformers();
    function transformArguments(slots) {
      return (0, generic_transformers_1.pushVerdictNumberArguments)(["CLUSTER", "DELSLOTS"], slots);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_DELSLOTSRANGE.js
var require_CLUSTER_DELSLOTSRANGE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_DELSLOTSRANGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    var generic_transformers_1 = require_generic_transformers();
    function transformArguments(ranges) {
      return (0, generic_transformers_1.pushSlotRangesArguments)(["CLUSTER", "DELSLOTSRANGE"], ranges);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_FAILOVER.js
var require_CLUSTER_FAILOVER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_FAILOVER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FailoverModes = void 0;
    var FailoverModes;
    (function(FailoverModes2) {
      FailoverModes2["FORCE"] = "FORCE";
      FailoverModes2["TAKEOVER"] = "TAKEOVER";
    })(FailoverModes || (exports2.FailoverModes = FailoverModes = {}));
    function transformArguments(mode) {
      const args = ["CLUSTER", "FAILOVER"];
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_FLUSHSLOTS.js
var require_CLUSTER_FLUSHSLOTS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_FLUSHSLOTS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CLUSTER", "FLUSHSLOTS"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_FORGET.js
var require_CLUSTER_FORGET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_FORGET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(nodeId) {
      return ["CLUSTER", "FORGET", nodeId];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_GETKEYSINSLOT.js
var require_CLUSTER_GETKEYSINSLOT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_GETKEYSINSLOT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(slot, count) {
      return ["CLUSTER", "GETKEYSINSLOT", slot.toString(), count.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_INFO.js
var require_CLUSTER_INFO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_INFO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extractLineValue = exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CLUSTER", "INFO"];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      const lines = reply.split("\r\n");
      return {
        state: extractLineValue(lines[0]),
        slots: {
          assigned: Number(extractLineValue(lines[1])),
          ok: Number(extractLineValue(lines[2])),
          pfail: Number(extractLineValue(lines[3])),
          fail: Number(extractLineValue(lines[4]))
        },
        knownNodes: Number(extractLineValue(lines[5])),
        size: Number(extractLineValue(lines[6])),
        currentEpoch: Number(extractLineValue(lines[7])),
        myEpoch: Number(extractLineValue(lines[8])),
        stats: {
          messagesSent: Number(extractLineValue(lines[9])),
          messagesReceived: Number(extractLineValue(lines[10]))
        }
      };
    }
    exports2.transformReply = transformReply;
    function extractLineValue(line) {
      return line.substring(line.indexOf(":") + 1);
    }
    exports2.extractLineValue = extractLineValue;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_KEYSLOT.js
var require_CLUSTER_KEYSLOT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_KEYSLOT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(key) {
      return ["CLUSTER", "KEYSLOT", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_LINKS.js
var require_CLUSTER_LINKS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_LINKS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CLUSTER", "LINKS"];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.map((peerLink) => ({
        direction: peerLink[1],
        node: peerLink[3],
        createTime: Number(peerLink[5]),
        events: peerLink[7],
        sendBufferAllocated: Number(peerLink[9]),
        sendBufferUsed: Number(peerLink[11])
      }));
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_MEET.js
var require_CLUSTER_MEET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_MEET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(ip, port) {
      return ["CLUSTER", "MEET", ip, port.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_MYID.js
var require_CLUSTER_MYID = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_MYID.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CLUSTER", "MYID"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_MYSHARDID.js
var require_CLUSTER_MYSHARDID = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_MYSHARDID.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments() {
      return ["CLUSTER", "MYSHARDID"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_NODES.js
var require_CLUSTER_NODES = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_NODES.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.RedisClusterNodeLinkStates = exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CLUSTER", "NODES"];
    }
    exports2.transformArguments = transformArguments;
    var RedisClusterNodeLinkStates;
    (function(RedisClusterNodeLinkStates2) {
      RedisClusterNodeLinkStates2["CONNECTED"] = "connected";
      RedisClusterNodeLinkStates2["DISCONNECTED"] = "disconnected";
    })(RedisClusterNodeLinkStates || (exports2.RedisClusterNodeLinkStates = RedisClusterNodeLinkStates = {}));
    function transformReply(reply) {
      const lines = reply.split("\n");
      lines.pop();
      const mastersMap = /* @__PURE__ */ new Map(), replicasMap = /* @__PURE__ */ new Map();
      for (const line of lines) {
        const [id, address, flags, masterId, pingSent, pongRecv, configEpoch, linkState, ...slots] = line.split(" "), node = {
          id,
          address,
          ...transformNodeAddress(address),
          flags: flags.split(","),
          pingSent: Number(pingSent),
          pongRecv: Number(pongRecv),
          configEpoch: Number(configEpoch),
          linkState
        };
        if (masterId === "-") {
          let replicas = replicasMap.get(id);
          if (!replicas) {
            replicas = [];
            replicasMap.set(id, replicas);
          }
          mastersMap.set(id, {
            ...node,
            slots: slots.map((slot) => {
              const [fromString, toString] = slot.split("-", 2), from = Number(fromString);
              return {
                from,
                to: toString ? Number(toString) : from
              };
            }),
            replicas
          });
        } else {
          const replicas = replicasMap.get(masterId);
          if (!replicas) {
            replicasMap.set(masterId, [node]);
          } else {
            replicas.push(node);
          }
        }
      }
      return [...mastersMap.values()];
    }
    exports2.transformReply = transformReply;
    function transformNodeAddress(address) {
      const indexOfColon = address.lastIndexOf(":"), indexOfAt = address.indexOf("@", indexOfColon), host = address.substring(0, indexOfColon);
      if (indexOfAt === -1) {
        return {
          host,
          port: Number(address.substring(indexOfColon + 1)),
          cport: null
        };
      }
      return {
        host: address.substring(0, indexOfColon),
        port: Number(address.substring(indexOfColon + 1, indexOfAt)),
        cport: Number(address.substring(indexOfAt + 1))
      };
    }
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_REPLICAS.js
var require_CLUSTER_REPLICAS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_REPLICAS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments(nodeId) {
      return ["CLUSTER", "REPLICAS", nodeId];
    }
    exports2.transformArguments = transformArguments;
    var CLUSTER_NODES_1 = require_CLUSTER_NODES();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return CLUSTER_NODES_1.transformReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_REPLICATE.js
var require_CLUSTER_REPLICATE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_REPLICATE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(nodeId) {
      return ["CLUSTER", "REPLICATE", nodeId];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_RESET.js
var require_CLUSTER_RESET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_RESET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(mode) {
      const args = ["CLUSTER", "RESET"];
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_SAVECONFIG.js
var require_CLUSTER_SAVECONFIG = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_SAVECONFIG.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CLUSTER", "SAVECONFIG"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_SET-CONFIG-EPOCH.js
var require_CLUSTER_SET_CONFIG_EPOCH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_SET-CONFIG-EPOCH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(configEpoch) {
      return ["CLUSTER", "SET-CONFIG-EPOCH", configEpoch.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_SETSLOT.js
var require_CLUSTER_SETSLOT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_SETSLOT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.ClusterSlotStates = void 0;
    var ClusterSlotStates;
    (function(ClusterSlotStates2) {
      ClusterSlotStates2["IMPORTING"] = "IMPORTING";
      ClusterSlotStates2["MIGRATING"] = "MIGRATING";
      ClusterSlotStates2["STABLE"] = "STABLE";
      ClusterSlotStates2["NODE"] = "NODE";
    })(ClusterSlotStates || (exports2.ClusterSlotStates = ClusterSlotStates = {}));
    function transformArguments(slot, state, nodeId) {
      const args = ["CLUSTER", "SETSLOT", slot.toString(), state];
      if (nodeId) {
        args.push(nodeId);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CLUSTER_SLOTS.js
var require_CLUSTER_SLOTS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CLUSTER_SLOTS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CLUSTER", "SLOTS"];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.map(([from, to, master, ...replicas]) => {
        return {
          from,
          to,
          master: transformNode(master),
          replicas: replicas.map(transformNode)
        };
      });
    }
    exports2.transformReply = transformReply;
    function transformNode([ip, port, id]) {
      return {
        ip,
        port,
        id
      };
    }
  }
});

// node_modules/@redis/client/dist/lib/commands/COMMAND_COUNT.js
var require_COMMAND_COUNT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/COMMAND_COUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments() {
      return ["COMMAND", "COUNT"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/COMMAND_GETKEYS.js
var require_COMMAND_GETKEYS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/COMMAND_GETKEYS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments(args) {
      return ["COMMAND", "GETKEYS", ...args];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/COMMAND_GETKEYSANDFLAGS.js
var require_COMMAND_GETKEYSANDFLAGS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/COMMAND_GETKEYSANDFLAGS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments(args) {
      return ["COMMAND", "GETKEYSANDFLAGS", ...args];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.map(([key, flags]) => ({
        key,
        flags
      }));
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/COMMAND_INFO.js
var require_COMMAND_INFO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/COMMAND_INFO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.IS_READ_ONLY = true;
    function transformArguments(commands) {
      return ["COMMAND", "INFO", ...commands];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.map((command) => command ? (0, generic_transformers_1.transformCommandReply)(command) : null);
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/COMMAND_LIST.js
var require_COMMAND_LIST = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/COMMAND_LIST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FilterBy = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    var FilterBy;
    (function(FilterBy2) {
      FilterBy2["MODULE"] = "MODULE";
      FilterBy2["ACLCAT"] = "ACLCAT";
      FilterBy2["PATTERN"] = "PATTERN";
    })(FilterBy || (exports2.FilterBy = FilterBy = {}));
    function transformArguments(filter) {
      const args = ["COMMAND", "LIST"];
      if (filter) {
        args.push("FILTERBY", filter.filterBy, filter.value);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/COMMAND.js
var require_COMMAND = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/COMMAND.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.IS_READ_ONLY = true;
    function transformArguments() {
      return ["COMMAND"];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.map(generic_transformers_1.transformCommandReply);
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/CONFIG_GET.js
var require_CONFIG_GET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CONFIG_GET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments(parameter) {
      return ["CONFIG", "GET", parameter];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformTuplesReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/CONFIG_RESETSTAT.js
var require_CONFIG_RESETSTAT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CONFIG_RESETSTAT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CONFIG", "RESETSTAT"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CONFIG_REWRITE.js
var require_CONFIG_REWRITE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CONFIG_REWRITE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["CONFIG", "REWRITE"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/CONFIG_SET.js
var require_CONFIG_SET = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/CONFIG_SET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(...[parameterOrConfig, value]) {
      const args = ["CONFIG", "SET"];
      if (typeof parameterOrConfig === "string") {
        args.push(parameterOrConfig, value);
      } else {
        for (const [key, value2] of Object.entries(parameterOrConfig)) {
          args.push(key, value2);
        }
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/DBSIZE.js
var require_DBSIZE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/DBSIZE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments() {
      return ["DBSIZE"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/DISCARD.js
var require_DISCARD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/DISCARD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["DISCARD"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ECHO.js
var require_ECHO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ECHO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments(message) {
      return ["ECHO", message];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/FAILOVER.js
var require_FAILOVER = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FAILOVER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(options2) {
      const args = ["FAILOVER"];
      if (options2?.TO) {
        args.push("TO", options2.TO.host, options2.TO.port.toString());
        if (options2.TO.FORCE) {
          args.push("FORCE");
        }
      }
      if (options2?.ABORT) {
        args.push("ABORT");
      }
      if (options2?.TIMEOUT) {
        args.push("TIMEOUT", options2.TIMEOUT.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/FLUSHALL.js
var require_FLUSHALL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FLUSHALL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.RedisFlushModes = void 0;
    var RedisFlushModes;
    (function(RedisFlushModes2) {
      RedisFlushModes2["ASYNC"] = "ASYNC";
      RedisFlushModes2["SYNC"] = "SYNC";
    })(RedisFlushModes || (exports2.RedisFlushModes = RedisFlushModes = {}));
    function transformArguments(mode) {
      const args = ["FLUSHALL"];
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/FLUSHDB.js
var require_FLUSHDB = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FLUSHDB.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(mode) {
      const args = ["FLUSHDB"];
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/FUNCTION_DELETE.js
var require_FUNCTION_DELETE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FUNCTION_DELETE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(library) {
      return ["FUNCTION", "DELETE", library];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/FUNCTION_DUMP.js
var require_FUNCTION_DUMP = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FUNCTION_DUMP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["FUNCTION", "DUMP"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/FUNCTION_FLUSH.js
var require_FUNCTION_FLUSH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FUNCTION_FLUSH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(mode) {
      const args = ["FUNCTION", "FLUSH"];
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/FUNCTION_KILL.js
var require_FUNCTION_KILL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FUNCTION_KILL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["FUNCTION", "KILL"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/FUNCTION_LIST.js
var require_FUNCTION_LIST = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FUNCTION_LIST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    var generic_transformers_1 = require_generic_transformers();
    function transformArguments(pattern) {
      const args = ["FUNCTION", "LIST"];
      if (pattern) {
        args.push(pattern);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.map(generic_transformers_1.transformFunctionListItemReply);
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/FUNCTION_LIST_WITHCODE.js
var require_FUNCTION_LIST_WITHCODE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FUNCTION_LIST_WITHCODE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    var FUNCTION_LIST_1 = require_FUNCTION_LIST();
    var generic_transformers_1 = require_generic_transformers();
    function transformArguments(pattern) {
      const args = (0, FUNCTION_LIST_1.transformArguments)(pattern);
      args.push("WITHCODE");
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.map((library) => ({
        ...(0, generic_transformers_1.transformFunctionListItemReply)(library),
        libraryCode: library[7]
      }));
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/FUNCTION_LOAD.js
var require_FUNCTION_LOAD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FUNCTION_LOAD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(code, options2) {
      const args = ["FUNCTION", "LOAD"];
      if (options2?.REPLACE) {
        args.push("REPLACE");
      }
      args.push(code);
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/FUNCTION_RESTORE.js
var require_FUNCTION_RESTORE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FUNCTION_RESTORE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(dump, mode) {
      const args = ["FUNCTION", "RESTORE", dump];
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/FUNCTION_STATS.js
var require_FUNCTION_STATS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/FUNCTION_STATS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments() {
      return ["FUNCTION", "STATS"];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      const engines = /* @__PURE__ */ Object.create(null);
      for (let i = 0; i < reply[3].length; i++) {
        engines[reply[3][i]] = {
          librariesCount: reply[3][++i][1],
          functionsCount: reply[3][i][3]
        };
      }
      return {
        runningScript: reply[1] === null ? null : {
          name: reply[1][1],
          command: reply[1][3],
          durationMs: reply[1][5]
        },
        engines
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/HELLO.js
var require_HELLO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/HELLO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments(options2) {
      const args = ["HELLO"];
      if (options2) {
        args.push(options2.protover.toString());
        if (options2.auth) {
          args.push("AUTH", options2.auth.username, options2.auth.password);
        }
        if (options2.clientName) {
          args.push("SETNAME", options2.clientName);
        }
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        server: reply[1],
        version: reply[3],
        proto: reply[5],
        id: reply[7],
        mode: reply[9],
        role: reply[11],
        modules: reply[13]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/INFO.js
var require_INFO = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/INFO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments(section) {
      const args = ["INFO"];
      if (section) {
        args.push(section);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/KEYS.js
var require_KEYS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/KEYS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(pattern) {
      return ["KEYS", pattern];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LASTSAVE.js
var require_LASTSAVE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LASTSAVE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments() {
      return ["LASTSAVE"];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return new Date(reply);
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/LATENCY_DOCTOR.js
var require_LATENCY_DOCTOR = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LATENCY_DOCTOR.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["LATENCY", "DOCTOR"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LATENCY_GRAPH.js
var require_LATENCY_GRAPH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LATENCY_GRAPH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(event) {
      return ["LATENCY", "GRAPH", event];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LATENCY_HISTORY.js
var require_LATENCY_HISTORY = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LATENCY_HISTORY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(event) {
      return ["LATENCY", "HISTORY", event];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LATENCY_LATEST.js
var require_LATENCY_LATEST = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LATENCY_LATEST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["LATENCY", "LATEST"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/LOLWUT.js
var require_LOLWUT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/LOLWUT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments(version, ...optionalArguments) {
      const args = ["LOLWUT"];
      if (version) {
        args.push("VERSION", version.toString(), ...optionalArguments.map(String));
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/MEMORY_DOCTOR.js
var require_MEMORY_DOCTOR = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/MEMORY_DOCTOR.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["MEMORY", "DOCTOR"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/MEMORY_MALLOC-STATS.js
var require_MEMORY_MALLOC_STATS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/MEMORY_MALLOC-STATS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["MEMORY", "MALLOC-STATS"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/MEMORY_PURGE.js
var require_MEMORY_PURGE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/MEMORY_PURGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["MEMORY", "PURGE"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/MEMORY_STATS.js
var require_MEMORY_STATS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/MEMORY_STATS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments() {
      return ["MEMORY", "STATS"];
    }
    exports2.transformArguments = transformArguments;
    var FIELDS_MAPPING = {
      "peak.allocated": "peakAllocated",
      "total.allocated": "totalAllocated",
      "startup.allocated": "startupAllocated",
      "replication.backlog": "replicationBacklog",
      "clients.slaves": "clientsReplicas",
      "clients.normal": "clientsNormal",
      "aof.buffer": "aofBuffer",
      "lua.caches": "luaCaches",
      "overhead.total": "overheadTotal",
      "keys.count": "keysCount",
      "keys.bytes-per-key": "keysBytesPerKey",
      "dataset.bytes": "datasetBytes",
      "dataset.percentage": "datasetPercentage",
      "peak.percentage": "peakPercentage",
      "allocator.allocated": "allocatorAllocated",
      "allocator.active": "allocatorActive",
      "allocator.resident": "allocatorResident",
      "allocator-fragmentation.ratio": "allocatorFragmentationRatio",
      "allocator-fragmentation.bytes": "allocatorFragmentationBytes",
      "allocator-rss.ratio": "allocatorRssRatio",
      "allocator-rss.bytes": "allocatorRssBytes",
      "rss-overhead.ratio": "rssOverheadRatio",
      "rss-overhead.bytes": "rssOverheadBytes",
      "fragmentation": "fragmentation",
      "fragmentation.bytes": "fragmentationBytes"
    };
    var DB_FIELDS_MAPPING = {
      "overhead.hashtable.main": "overheadHashtableMain",
      "overhead.hashtable.expires": "overheadHashtableExpires"
    };
    function transformReply(rawReply) {
      const reply = {
        db: {}
      };
      for (let i = 0; i < rawReply.length; i += 2) {
        const key = rawReply[i];
        if (key.startsWith("db.")) {
          const dbTuples = rawReply[i + 1], db = {};
          for (let j = 0; j < dbTuples.length; j += 2) {
            db[DB_FIELDS_MAPPING[dbTuples[j]]] = dbTuples[j + 1];
          }
          reply.db[key.substring(3)] = db;
          continue;
        }
        reply[FIELDS_MAPPING[key]] = Number(rawReply[i + 1]);
      }
      return reply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/MEMORY_USAGE.js
var require_MEMORY_USAGE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/MEMORY_USAGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, options2) {
      const args = ["MEMORY", "USAGE", key];
      if (options2?.SAMPLES) {
        args.push("SAMPLES", options2.SAMPLES.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/MODULE_LIST.js
var require_MODULE_LIST = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/MODULE_LIST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["MODULE", "LIST"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/MODULE_LOAD.js
var require_MODULE_LOAD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/MODULE_LOAD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(path, moduleArgs) {
      const args = ["MODULE", "LOAD", path];
      if (moduleArgs) {
        args.push(...moduleArgs);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/MODULE_UNLOAD.js
var require_MODULE_UNLOAD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/MODULE_UNLOAD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(name) {
      return ["MODULE", "UNLOAD", name];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/MOVE.js
var require_MOVE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/MOVE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, db) {
      return ["MOVE", key, db.toString()];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/PING.js
var require_PING = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PING.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(message) {
      const args = ["PING"];
      if (message) {
        args.push(message);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/PUBSUB_CHANNELS.js
var require_PUBSUB_CHANNELS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PUBSUB_CHANNELS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments(pattern) {
      const args = ["PUBSUB", "CHANNELS"];
      if (pattern) {
        args.push(pattern);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/PUBSUB_NUMPAT.js
var require_PUBSUB_NUMPAT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PUBSUB_NUMPAT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments() {
      return ["PUBSUB", "NUMPAT"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/PUBSUB_NUMSUB.js
var require_PUBSUB_NUMSUB = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PUBSUB_NUMSUB.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.IS_READ_ONLY = true;
    function transformArguments(channels) {
      const args = ["PUBSUB", "NUMSUB"];
      if (channels)
        return (0, generic_transformers_1.pushVerdictArguments)(args, channels);
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(rawReply) {
      const transformedReply = /* @__PURE__ */ Object.create(null);
      for (let i = 0; i < rawReply.length; i += 2) {
        transformedReply[rawReply[i]] = rawReply[i + 1];
      }
      return transformedReply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/PUBSUB_SHARDCHANNELS.js
var require_PUBSUB_SHARDCHANNELS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PUBSUB_SHARDCHANNELS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments(pattern) {
      const args = ["PUBSUB", "SHARDCHANNELS"];
      if (pattern)
        args.push(pattern);
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/PUBSUB_SHARDNUMSUB.js
var require_PUBSUB_SHARDNUMSUB = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/PUBSUB_SHARDNUMSUB.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.IS_READ_ONLY = true;
    function transformArguments(channels) {
      const args = ["PUBSUB", "SHARDNUMSUB"];
      if (channels)
        return (0, generic_transformers_1.pushVerdictArguments)(args, channels);
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(rawReply) {
      const transformedReply = /* @__PURE__ */ Object.create(null);
      for (let i = 0; i < rawReply.length; i += 2) {
        transformedReply[rawReply[i]] = rawReply[i + 1];
      }
      return transformedReply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/RANDOMKEY.js
var require_RANDOMKEY = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/RANDOMKEY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments() {
      return ["RANDOMKEY"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/READONLY.js
var require_READONLY = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/READONLY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["READONLY"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/READWRITE.js
var require_READWRITE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/READWRITE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["READWRITE"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/REPLICAOF.js
var require_REPLICAOF = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/REPLICAOF.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(host, port) {
      return ["REPLICAOF", host, port.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/RESTORE-ASKING.js
var require_RESTORE_ASKING = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/RESTORE-ASKING.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["RESTORE-ASKING"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/ROLE.js
var require_ROLE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/ROLE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments() {
      return ["ROLE"];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      switch (reply[0]) {
        case "master":
          return {
            role: "master",
            replicationOffest: reply[1],
            replicas: reply[2].map(([ip, port, replicationOffest]) => ({
              ip,
              port: Number(port),
              replicationOffest: Number(replicationOffest)
            }))
          };
        case "slave":
          return {
            role: "slave",
            master: {
              ip: reply[1],
              port: reply[2]
            },
            state: reply[3],
            dataReceived: reply[4]
          };
        case "sentinel":
          return {
            role: "sentinel",
            masterNames: reply[1]
          };
      }
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/SAVE.js
var require_SAVE = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SAVE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["SAVE"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SCAN.js
var require_SCAN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SCAN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.IS_READ_ONLY = true;
    function transformArguments(cursor, options2) {
      const args = (0, generic_transformers_1.pushScanArguments)(["SCAN"], cursor, options2);
      if (options2?.TYPE) {
        args.push("TYPE", options2.TYPE);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply([cursor, keys]) {
      return {
        cursor: Number(cursor),
        keys
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/SCRIPT_DEBUG.js
var require_SCRIPT_DEBUG = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SCRIPT_DEBUG.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(mode) {
      return ["SCRIPT", "DEBUG", mode];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SCRIPT_EXISTS.js
var require_SCRIPT_EXISTS = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SCRIPT_EXISTS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    var generic_transformers_1 = require_generic_transformers();
    function transformArguments(sha1) {
      return (0, generic_transformers_1.pushVerdictArguments)(["SCRIPT", "EXISTS"], sha1);
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_2 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_2.transformBooleanArrayReply;
    } });
  }
});

// node_modules/@redis/client/dist/lib/commands/SCRIPT_FLUSH.js
var require_SCRIPT_FLUSH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SCRIPT_FLUSH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(mode) {
      const args = ["SCRIPT", "FLUSH"];
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SCRIPT_KILL.js
var require_SCRIPT_KILL = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SCRIPT_KILL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["SCRIPT", "KILL"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SCRIPT_LOAD.js
var require_SCRIPT_LOAD = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SCRIPT_LOAD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(script) {
      return ["SCRIPT", "LOAD", script];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SHUTDOWN.js
var require_SHUTDOWN = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SHUTDOWN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(mode) {
      const args = ["SHUTDOWN"];
      if (mode) {
        args.push(mode);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/SWAPDB.js
var require_SWAPDB = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/SWAPDB.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(index1, index2) {
      return ["SWAPDB", index1.toString(), index2.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/TIME.js
var require_TIME = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/TIME.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments() {
      return ["TIME"];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      const seconds = Number(reply[0]), microseconds = Number(reply[1]), d = new Date(seconds * 1e3 + microseconds / 1e3);
      d.microseconds = microseconds;
      return d;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/client/dist/lib/commands/UNWATCH.js
var require_UNWATCH = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/UNWATCH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["UNWATCH"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/commands/WAIT.js
var require_WAIT = __commonJS({
  "node_modules/@redis/client/dist/lib/commands/WAIT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(numberOfReplicas, timeout2) {
      return ["WAIT", numberOfReplicas.toString(), timeout2.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/client/dist/lib/client/commands.js
var require_commands2 = __commonJS({
  "node_modules/@redis/client/dist/lib/client/commands.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var commands_1 = require_commands();
    var ACL_CAT = require_ACL_CAT();
    var ACL_DELUSER = require_ACL_DELUSER();
    var ACL_DRYRUN = require_ACL_DRYRUN();
    var ACL_GENPASS = require_ACL_GENPASS();
    var ACL_GETUSER = require_ACL_GETUSER();
    var ACL_LIST = require_ACL_LIST();
    var ACL_LOAD = require_ACL_LOAD();
    var ACL_LOG_RESET = require_ACL_LOG_RESET();
    var ACL_LOG = require_ACL_LOG();
    var ACL_SAVE = require_ACL_SAVE();
    var ACL_SETUSER = require_ACL_SETUSER();
    var ACL_USERS = require_ACL_USERS();
    var ACL_WHOAMI = require_ACL_WHOAMI();
    var ASKING = require_ASKING();
    var AUTH = require_AUTH();
    var BGREWRITEAOF = require_BGREWRITEAOF();
    var BGSAVE = require_BGSAVE();
    var CLIENT_CACHING = require_CLIENT_CACHING();
    var CLIENT_GETNAME = require_CLIENT_GETNAME();
    var CLIENT_GETREDIR = require_CLIENT_GETREDIR();
    var CLIENT_ID = require_CLIENT_ID();
    var CLIENT_KILL = require_CLIENT_KILL();
    var CLIENT_LIST = require_CLIENT_LIST();
    var CLIENT_NO_EVICT = require_CLIENT_NO_EVICT();
    var CLIENT_NO_TOUCH = require_CLIENT_NO_TOUCH();
    var CLIENT_PAUSE = require_CLIENT_PAUSE();
    var CLIENT_SETNAME = require_CLIENT_SETNAME();
    var CLIENT_TRACKING = require_CLIENT_TRACKING();
    var CLIENT_TRACKINGINFO = require_CLIENT_TRACKINGINFO();
    var CLIENT_UNPAUSE = require_CLIENT_UNPAUSE();
    var CLIENT_INFO = require_CLIENT_INFO();
    var CLUSTER_ADDSLOTS = require_CLUSTER_ADDSLOTS();
    var CLUSTER_ADDSLOTSRANGE = require_CLUSTER_ADDSLOTSRANGE();
    var CLUSTER_BUMPEPOCH = require_CLUSTER_BUMPEPOCH();
    var CLUSTER_COUNT_FAILURE_REPORTS = require_CLUSTER_COUNT_FAILURE_REPORTS();
    var CLUSTER_COUNTKEYSINSLOT = require_CLUSTER_COUNTKEYSINSLOT();
    var CLUSTER_DELSLOTS = require_CLUSTER_DELSLOTS();
    var CLUSTER_DELSLOTSRANGE = require_CLUSTER_DELSLOTSRANGE();
    var CLUSTER_FAILOVER = require_CLUSTER_FAILOVER();
    var CLUSTER_FLUSHSLOTS = require_CLUSTER_FLUSHSLOTS();
    var CLUSTER_FORGET = require_CLUSTER_FORGET();
    var CLUSTER_GETKEYSINSLOT = require_CLUSTER_GETKEYSINSLOT();
    var CLUSTER_INFO = require_CLUSTER_INFO();
    var CLUSTER_KEYSLOT = require_CLUSTER_KEYSLOT();
    var CLUSTER_LINKS = require_CLUSTER_LINKS();
    var CLUSTER_MEET = require_CLUSTER_MEET();
    var CLUSTER_MYID = require_CLUSTER_MYID();
    var CLUSTER_MYSHARDID = require_CLUSTER_MYSHARDID();
    var CLUSTER_NODES = require_CLUSTER_NODES();
    var CLUSTER_REPLICAS = require_CLUSTER_REPLICAS();
    var CLUSTER_REPLICATE = require_CLUSTER_REPLICATE();
    var CLUSTER_RESET = require_CLUSTER_RESET();
    var CLUSTER_SAVECONFIG = require_CLUSTER_SAVECONFIG();
    var CLUSTER_SET_CONFIG_EPOCH = require_CLUSTER_SET_CONFIG_EPOCH();
    var CLUSTER_SETSLOT = require_CLUSTER_SETSLOT();
    var CLUSTER_SLOTS = require_CLUSTER_SLOTS();
    var COMMAND_COUNT = require_COMMAND_COUNT();
    var COMMAND_GETKEYS = require_COMMAND_GETKEYS();
    var COMMAND_GETKEYSANDFLAGS = require_COMMAND_GETKEYSANDFLAGS();
    var COMMAND_INFO = require_COMMAND_INFO();
    var COMMAND_LIST = require_COMMAND_LIST();
    var COMMAND = require_COMMAND();
    var CONFIG_GET = require_CONFIG_GET();
    var CONFIG_RESETASTAT = require_CONFIG_RESETSTAT();
    var CONFIG_REWRITE = require_CONFIG_REWRITE();
    var CONFIG_SET = require_CONFIG_SET();
    var DBSIZE = require_DBSIZE();
    var DISCARD = require_DISCARD();
    var ECHO = require_ECHO();
    var FAILOVER = require_FAILOVER();
    var FLUSHALL = require_FLUSHALL();
    var FLUSHDB = require_FLUSHDB();
    var FUNCTION_DELETE = require_FUNCTION_DELETE();
    var FUNCTION_DUMP = require_FUNCTION_DUMP();
    var FUNCTION_FLUSH = require_FUNCTION_FLUSH();
    var FUNCTION_KILL = require_FUNCTION_KILL();
    var FUNCTION_LIST_WITHCODE = require_FUNCTION_LIST_WITHCODE();
    var FUNCTION_LIST = require_FUNCTION_LIST();
    var FUNCTION_LOAD = require_FUNCTION_LOAD();
    var FUNCTION_RESTORE = require_FUNCTION_RESTORE();
    var FUNCTION_STATS = require_FUNCTION_STATS();
    var HELLO = require_HELLO();
    var INFO = require_INFO();
    var KEYS = require_KEYS();
    var LASTSAVE = require_LASTSAVE();
    var LATENCY_DOCTOR = require_LATENCY_DOCTOR();
    var LATENCY_GRAPH = require_LATENCY_GRAPH();
    var LATENCY_HISTORY = require_LATENCY_HISTORY();
    var LATENCY_LATEST = require_LATENCY_LATEST();
    var LOLWUT = require_LOLWUT();
    var MEMORY_DOCTOR = require_MEMORY_DOCTOR();
    var MEMORY_MALLOC_STATS = require_MEMORY_MALLOC_STATS();
    var MEMORY_PURGE = require_MEMORY_PURGE();
    var MEMORY_STATS = require_MEMORY_STATS();
    var MEMORY_USAGE = require_MEMORY_USAGE();
    var MODULE_LIST = require_MODULE_LIST();
    var MODULE_LOAD = require_MODULE_LOAD();
    var MODULE_UNLOAD = require_MODULE_UNLOAD();
    var MOVE = require_MOVE();
    var PING = require_PING();
    var PUBSUB_CHANNELS = require_PUBSUB_CHANNELS();
    var PUBSUB_NUMPAT = require_PUBSUB_NUMPAT();
    var PUBSUB_NUMSUB = require_PUBSUB_NUMSUB();
    var PUBSUB_SHARDCHANNELS = require_PUBSUB_SHARDCHANNELS();
    var PUBSUB_SHARDNUMSUB = require_PUBSUB_SHARDNUMSUB();
    var RANDOMKEY = require_RANDOMKEY();
    var READONLY = require_READONLY();
    var READWRITE = require_READWRITE();
    var REPLICAOF = require_REPLICAOF();
    var RESTORE_ASKING = require_RESTORE_ASKING();
    var ROLE = require_ROLE();
    var SAVE = require_SAVE();
    var SCAN = require_SCAN();
    var SCRIPT_DEBUG = require_SCRIPT_DEBUG();
    var SCRIPT_EXISTS = require_SCRIPT_EXISTS();
    var SCRIPT_FLUSH = require_SCRIPT_FLUSH();
    var SCRIPT_KILL = require_SCRIPT_KILL();
    var SCRIPT_LOAD = require_SCRIPT_LOAD();
    var SHUTDOWN = require_SHUTDOWN();
    var SWAPDB = require_SWAPDB();
    var TIME = require_TIME();
    var UNWATCH = require_UNWATCH();
    var WAIT = require_WAIT();
    exports2.default = {
      ...commands_1.default,
      ACL_CAT,
      aclCat: ACL_CAT,
      ACL_DELUSER,
      aclDelUser: ACL_DELUSER,
      ACL_DRYRUN,
      aclDryRun: ACL_DRYRUN,
      ACL_GENPASS,
      aclGenPass: ACL_GENPASS,
      ACL_GETUSER,
      aclGetUser: ACL_GETUSER,
      ACL_LIST,
      aclList: ACL_LIST,
      ACL_LOAD,
      aclLoad: ACL_LOAD,
      ACL_LOG_RESET,
      aclLogReset: ACL_LOG_RESET,
      ACL_LOG,
      aclLog: ACL_LOG,
      ACL_SAVE,
      aclSave: ACL_SAVE,
      ACL_SETUSER,
      aclSetUser: ACL_SETUSER,
      ACL_USERS,
      aclUsers: ACL_USERS,
      ACL_WHOAMI,
      aclWhoAmI: ACL_WHOAMI,
      ASKING,
      asking: ASKING,
      AUTH,
      auth: AUTH,
      BGREWRITEAOF,
      bgRewriteAof: BGREWRITEAOF,
      BGSAVE,
      bgSave: BGSAVE,
      CLIENT_CACHING,
      clientCaching: CLIENT_CACHING,
      CLIENT_GETNAME,
      clientGetName: CLIENT_GETNAME,
      CLIENT_GETREDIR,
      clientGetRedir: CLIENT_GETREDIR,
      CLIENT_ID,
      clientId: CLIENT_ID,
      CLIENT_KILL,
      clientKill: CLIENT_KILL,
      "CLIENT_NO-EVICT": CLIENT_NO_EVICT,
      clientNoEvict: CLIENT_NO_EVICT,
      "CLIENT_NO-TOUCH": CLIENT_NO_TOUCH,
      clientNoTouch: CLIENT_NO_TOUCH,
      CLIENT_LIST,
      clientList: CLIENT_LIST,
      CLIENT_PAUSE,
      clientPause: CLIENT_PAUSE,
      CLIENT_SETNAME,
      clientSetName: CLIENT_SETNAME,
      CLIENT_TRACKING,
      clientTracking: CLIENT_TRACKING,
      CLIENT_TRACKINGINFO,
      clientTrackingInfo: CLIENT_TRACKINGINFO,
      CLIENT_UNPAUSE,
      clientUnpause: CLIENT_UNPAUSE,
      CLIENT_INFO,
      clientInfo: CLIENT_INFO,
      CLUSTER_ADDSLOTS,
      clusterAddSlots: CLUSTER_ADDSLOTS,
      CLUSTER_ADDSLOTSRANGE,
      clusterAddSlotsRange: CLUSTER_ADDSLOTSRANGE,
      CLUSTER_BUMPEPOCH,
      clusterBumpEpoch: CLUSTER_BUMPEPOCH,
      CLUSTER_COUNT_FAILURE_REPORTS,
      clusterCountFailureReports: CLUSTER_COUNT_FAILURE_REPORTS,
      CLUSTER_COUNTKEYSINSLOT,
      clusterCountKeysInSlot: CLUSTER_COUNTKEYSINSLOT,
      CLUSTER_DELSLOTS,
      clusterDelSlots: CLUSTER_DELSLOTS,
      CLUSTER_DELSLOTSRANGE,
      clusterDelSlotsRange: CLUSTER_DELSLOTSRANGE,
      CLUSTER_FAILOVER,
      clusterFailover: CLUSTER_FAILOVER,
      CLUSTER_FLUSHSLOTS,
      clusterFlushSlots: CLUSTER_FLUSHSLOTS,
      CLUSTER_FORGET,
      clusterForget: CLUSTER_FORGET,
      CLUSTER_GETKEYSINSLOT,
      clusterGetKeysInSlot: CLUSTER_GETKEYSINSLOT,
      CLUSTER_INFO,
      clusterInfo: CLUSTER_INFO,
      CLUSTER_KEYSLOT,
      clusterKeySlot: CLUSTER_KEYSLOT,
      CLUSTER_LINKS,
      clusterLinks: CLUSTER_LINKS,
      CLUSTER_MEET,
      clusterMeet: CLUSTER_MEET,
      CLUSTER_MYID,
      clusterMyId: CLUSTER_MYID,
      CLUSTER_MYSHARDID,
      clusterMyShardId: CLUSTER_MYSHARDID,
      CLUSTER_NODES,
      clusterNodes: CLUSTER_NODES,
      CLUSTER_REPLICAS,
      clusterReplicas: CLUSTER_REPLICAS,
      CLUSTER_REPLICATE,
      clusterReplicate: CLUSTER_REPLICATE,
      CLUSTER_RESET,
      clusterReset: CLUSTER_RESET,
      CLUSTER_SAVECONFIG,
      clusterSaveConfig: CLUSTER_SAVECONFIG,
      CLUSTER_SET_CONFIG_EPOCH,
      clusterSetConfigEpoch: CLUSTER_SET_CONFIG_EPOCH,
      CLUSTER_SETSLOT,
      clusterSetSlot: CLUSTER_SETSLOT,
      CLUSTER_SLOTS,
      clusterSlots: CLUSTER_SLOTS,
      COMMAND_COUNT,
      commandCount: COMMAND_COUNT,
      COMMAND_GETKEYS,
      commandGetKeys: COMMAND_GETKEYS,
      COMMAND_GETKEYSANDFLAGS,
      commandGetKeysAndFlags: COMMAND_GETKEYSANDFLAGS,
      COMMAND_INFO,
      commandInfo: COMMAND_INFO,
      COMMAND_LIST,
      commandList: COMMAND_LIST,
      COMMAND,
      command: COMMAND,
      CONFIG_GET,
      configGet: CONFIG_GET,
      CONFIG_RESETASTAT,
      configResetStat: CONFIG_RESETASTAT,
      CONFIG_REWRITE,
      configRewrite: CONFIG_REWRITE,
      CONFIG_SET,
      configSet: CONFIG_SET,
      DBSIZE,
      dbSize: DBSIZE,
      DISCARD,
      discard: DISCARD,
      ECHO,
      echo: ECHO,
      FAILOVER,
      failover: FAILOVER,
      FLUSHALL,
      flushAll: FLUSHALL,
      FLUSHDB,
      flushDb: FLUSHDB,
      FUNCTION_DELETE,
      functionDelete: FUNCTION_DELETE,
      FUNCTION_DUMP,
      functionDump: FUNCTION_DUMP,
      FUNCTION_FLUSH,
      functionFlush: FUNCTION_FLUSH,
      FUNCTION_KILL,
      functionKill: FUNCTION_KILL,
      FUNCTION_LIST_WITHCODE,
      functionListWithCode: FUNCTION_LIST_WITHCODE,
      FUNCTION_LIST,
      functionList: FUNCTION_LIST,
      FUNCTION_LOAD,
      functionLoad: FUNCTION_LOAD,
      FUNCTION_RESTORE,
      functionRestore: FUNCTION_RESTORE,
      FUNCTION_STATS,
      functionStats: FUNCTION_STATS,
      HELLO,
      hello: HELLO,
      INFO,
      info: INFO,
      KEYS,
      keys: KEYS,
      LASTSAVE,
      lastSave: LASTSAVE,
      LATENCY_DOCTOR,
      latencyDoctor: LATENCY_DOCTOR,
      LATENCY_GRAPH,
      latencyGraph: LATENCY_GRAPH,
      LATENCY_HISTORY,
      latencyHistory: LATENCY_HISTORY,
      LATENCY_LATEST,
      latencyLatest: LATENCY_LATEST,
      LOLWUT,
      lolwut: LOLWUT,
      MEMORY_DOCTOR,
      memoryDoctor: MEMORY_DOCTOR,
      "MEMORY_MALLOC-STATS": MEMORY_MALLOC_STATS,
      memoryMallocStats: MEMORY_MALLOC_STATS,
      MEMORY_PURGE,
      memoryPurge: MEMORY_PURGE,
      MEMORY_STATS,
      memoryStats: MEMORY_STATS,
      MEMORY_USAGE,
      memoryUsage: MEMORY_USAGE,
      MODULE_LIST,
      moduleList: MODULE_LIST,
      MODULE_LOAD,
      moduleLoad: MODULE_LOAD,
      MODULE_UNLOAD,
      moduleUnload: MODULE_UNLOAD,
      MOVE,
      move: MOVE,
      PING,
      ping: PING,
      PUBSUB_CHANNELS,
      pubSubChannels: PUBSUB_CHANNELS,
      PUBSUB_NUMPAT,
      pubSubNumPat: PUBSUB_NUMPAT,
      PUBSUB_NUMSUB,
      pubSubNumSub: PUBSUB_NUMSUB,
      PUBSUB_SHARDCHANNELS,
      pubSubShardChannels: PUBSUB_SHARDCHANNELS,
      PUBSUB_SHARDNUMSUB,
      pubSubShardNumSub: PUBSUB_SHARDNUMSUB,
      RANDOMKEY,
      randomKey: RANDOMKEY,
      READONLY,
      readonly: READONLY,
      READWRITE,
      readwrite: READWRITE,
      REPLICAOF,
      replicaOf: REPLICAOF,
      "RESTORE-ASKING": RESTORE_ASKING,
      restoreAsking: RESTORE_ASKING,
      ROLE,
      role: ROLE,
      SAVE,
      save: SAVE,
      SCAN,
      scan: SCAN,
      SCRIPT_DEBUG,
      scriptDebug: SCRIPT_DEBUG,
      SCRIPT_EXISTS,
      scriptExists: SCRIPT_EXISTS,
      SCRIPT_FLUSH,
      scriptFlush: SCRIPT_FLUSH,
      SCRIPT_KILL,
      scriptKill: SCRIPT_KILL,
      SCRIPT_LOAD,
      scriptLoad: SCRIPT_LOAD,
      SHUTDOWN,
      shutdown: SHUTDOWN,
      SWAPDB,
      swapDb: SWAPDB,
      TIME,
      time: TIME,
      UNWATCH,
      unwatch: UNWATCH,
      WAIT,
      wait: WAIT
    };
  }
});

// node_modules/@redis/client/dist/lib/errors.js
var require_errors2 = __commonJS({
  "node_modules/@redis/client/dist/lib/errors.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MultiErrorReply = exports2.ErrorReply = exports2.ReconnectStrategyError = exports2.RootNodesUnavailableError = exports2.SocketClosedUnexpectedlyError = exports2.DisconnectsClientError = exports2.ClientOfflineError = exports2.ClientClosedError = exports2.ConnectionTimeoutError = exports2.WatchError = exports2.AbortError = void 0;
    var AbortError = class extends Error {
      constructor() {
        super("The command was aborted");
      }
    };
    exports2.AbortError = AbortError;
    var WatchError = class extends Error {
      constructor() {
        super("One (or more) of the watched keys has been changed");
      }
    };
    exports2.WatchError = WatchError;
    var ConnectionTimeoutError = class extends Error {
      constructor() {
        super("Connection timeout");
      }
    };
    exports2.ConnectionTimeoutError = ConnectionTimeoutError;
    var ClientClosedError = class extends Error {
      constructor() {
        super("The client is closed");
      }
    };
    exports2.ClientClosedError = ClientClosedError;
    var ClientOfflineError = class extends Error {
      constructor() {
        super("The client is offline");
      }
    };
    exports2.ClientOfflineError = ClientOfflineError;
    var DisconnectsClientError = class extends Error {
      constructor() {
        super("Disconnects client");
      }
    };
    exports2.DisconnectsClientError = DisconnectsClientError;
    var SocketClosedUnexpectedlyError = class extends Error {
      constructor() {
        super("Socket closed unexpectedly");
      }
    };
    exports2.SocketClosedUnexpectedlyError = SocketClosedUnexpectedlyError;
    var RootNodesUnavailableError = class extends Error {
      constructor() {
        super("All the root nodes are unavailable");
      }
    };
    exports2.RootNodesUnavailableError = RootNodesUnavailableError;
    var ReconnectStrategyError = class extends Error {
      constructor(originalError, socketError) {
        super(originalError.message);
        Object.defineProperty(this, "originalError", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "socketError", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.originalError = originalError;
        this.socketError = socketError;
      }
    };
    exports2.ReconnectStrategyError = ReconnectStrategyError;
    var ErrorReply = class extends Error {
      constructor(message) {
        super(message);
        this.stack = void 0;
      }
    };
    exports2.ErrorReply = ErrorReply;
    var MultiErrorReply = class extends ErrorReply {
      constructor(replies, errorIndexes) {
        super(`${errorIndexes.length} commands failed, see .replies and .errorIndexes for more information`);
        Object.defineProperty(this, "replies", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "errorIndexes", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.replies = replies;
        this.errorIndexes = errorIndexes;
      }
      *errors() {
        for (const index of this.errorIndexes) {
          yield this.replies[index];
        }
      }
    };
    exports2.MultiErrorReply = MultiErrorReply;
  }
});

// node_modules/@redis/client/dist/lib/utils.js
var require_utils = __commonJS({
  "node_modules/@redis/client/dist/lib/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.promiseTimeout = void 0;
    function promiseTimeout(ms) {
      return new Promise((resolve) => setTimeout(resolve, ms));
    }
    exports2.promiseTimeout = promiseTimeout;
  }
});

// node_modules/@redis/client/dist/lib/client/socket.js
var require_socket = __commonJS({
  "node_modules/@redis/client/dist/lib/client/socket.js"(exports2) {
    "use strict";
    var __classPrivateFieldGet = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var _RedisSocket_instances;
    var _a;
    var _RedisSocket_initiateOptions;
    var _RedisSocket_isTlsSocket;
    var _RedisSocket_initiator;
    var _RedisSocket_options;
    var _RedisSocket_socket;
    var _RedisSocket_isOpen;
    var _RedisSocket_isReady;
    var _RedisSocket_writableNeedDrain;
    var _RedisSocket_isSocketUnrefed;
    var _RedisSocket_reconnectStrategy;
    var _RedisSocket_shouldReconnect;
    var _RedisSocket_connect;
    var _RedisSocket_createSocket;
    var _RedisSocket_createNetSocket;
    var _RedisSocket_createTlsSocket;
    var _RedisSocket_onSocketError;
    var _RedisSocket_disconnect;
    var _RedisSocket_isCorked;
    Object.defineProperty(exports2, "__esModule", { value: true });
    var events_1 = require("events");
    var net = require("net");
    var tls = require("tls");
    var errors_1 = require_errors2();
    var utils_1 = require_utils();
    var RedisSocket = class extends events_1.EventEmitter {
      get isOpen() {
        return __classPrivateFieldGet(this, _RedisSocket_isOpen, "f");
      }
      get isReady() {
        return __classPrivateFieldGet(this, _RedisSocket_isReady, "f");
      }
      get writableNeedDrain() {
        return __classPrivateFieldGet(this, _RedisSocket_writableNeedDrain, "f");
      }
      constructor(initiator, options2) {
        super();
        _RedisSocket_instances.add(this);
        _RedisSocket_initiator.set(this, void 0);
        _RedisSocket_options.set(this, void 0);
        _RedisSocket_socket.set(this, void 0);
        _RedisSocket_isOpen.set(this, false);
        _RedisSocket_isReady.set(this, false);
        _RedisSocket_writableNeedDrain.set(this, false);
        _RedisSocket_isSocketUnrefed.set(this, false);
        _RedisSocket_isCorked.set(this, false);
        __classPrivateFieldSet(this, _RedisSocket_initiator, initiator, "f");
        __classPrivateFieldSet(this, _RedisSocket_options, __classPrivateFieldGet(_a, _a, "m", _RedisSocket_initiateOptions).call(_a, options2), "f");
      }
      async connect() {
        if (__classPrivateFieldGet(this, _RedisSocket_isOpen, "f")) {
          throw new Error("Socket already opened");
        }
        __classPrivateFieldSet(this, _RedisSocket_isOpen, true, "f");
        return __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_connect).call(this);
      }
      writeCommand(args) {
        if (!__classPrivateFieldGet(this, _RedisSocket_socket, "f")) {
          throw new errors_1.ClientClosedError();
        }
        for (const toWrite of args) {
          __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, !__classPrivateFieldGet(this, _RedisSocket_socket, "f").write(toWrite), "f");
        }
      }
      disconnect() {
        if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, "f")) {
          throw new errors_1.ClientClosedError();
        }
        __classPrivateFieldSet(this, _RedisSocket_isOpen, false, "f");
        __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_disconnect).call(this);
      }
      async quit(fn) {
        if (!__classPrivateFieldGet(this, _RedisSocket_isOpen, "f")) {
          throw new errors_1.ClientClosedError();
        }
        __classPrivateFieldSet(this, _RedisSocket_isOpen, false, "f");
        const reply = await fn();
        __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_disconnect).call(this);
        return reply;
      }
      cork() {
        if (!__classPrivateFieldGet(this, _RedisSocket_socket, "f") || __classPrivateFieldGet(this, _RedisSocket_isCorked, "f")) {
          return;
        }
        __classPrivateFieldGet(this, _RedisSocket_socket, "f").cork();
        __classPrivateFieldSet(this, _RedisSocket_isCorked, true, "f");
        setImmediate(() => {
          __classPrivateFieldGet(this, _RedisSocket_socket, "f")?.uncork();
          __classPrivateFieldSet(this, _RedisSocket_isCorked, false, "f");
        });
      }
      ref() {
        __classPrivateFieldSet(this, _RedisSocket_isSocketUnrefed, false, "f");
        __classPrivateFieldGet(this, _RedisSocket_socket, "f")?.ref();
      }
      unref() {
        __classPrivateFieldSet(this, _RedisSocket_isSocketUnrefed, true, "f");
        __classPrivateFieldGet(this, _RedisSocket_socket, "f")?.unref();
      }
    };
    _a = RedisSocket, _RedisSocket_initiator = /* @__PURE__ */ new WeakMap(), _RedisSocket_options = /* @__PURE__ */ new WeakMap(), _RedisSocket_socket = /* @__PURE__ */ new WeakMap(), _RedisSocket_isOpen = /* @__PURE__ */ new WeakMap(), _RedisSocket_isReady = /* @__PURE__ */ new WeakMap(), _RedisSocket_writableNeedDrain = /* @__PURE__ */ new WeakMap(), _RedisSocket_isSocketUnrefed = /* @__PURE__ */ new WeakMap(), _RedisSocket_isCorked = /* @__PURE__ */ new WeakMap(), _RedisSocket_instances = /* @__PURE__ */ new WeakSet(), _RedisSocket_initiateOptions = function _RedisSocket_initiateOptions2(options2) {
      var _b, _c;
      options2 ?? (options2 = {});
      if (!options2.path) {
        (_b = options2).port ?? (_b.port = 6379);
        (_c = options2).host ?? (_c.host = "localhost");
      }
      options2.connectTimeout ?? (options2.connectTimeout = 5e3);
      options2.keepAlive ?? (options2.keepAlive = 5e3);
      options2.noDelay ?? (options2.noDelay = true);
      return options2;
    }, _RedisSocket_isTlsSocket = function _RedisSocket_isTlsSocket2(options2) {
      return options2.tls === true;
    }, _RedisSocket_reconnectStrategy = function _RedisSocket_reconnectStrategy2(retries, cause) {
      if (__classPrivateFieldGet(this, _RedisSocket_options, "f").reconnectStrategy === false) {
        return false;
      } else if (typeof __classPrivateFieldGet(this, _RedisSocket_options, "f").reconnectStrategy === "number") {
        return __classPrivateFieldGet(this, _RedisSocket_options, "f").reconnectStrategy;
      } else if (__classPrivateFieldGet(this, _RedisSocket_options, "f").reconnectStrategy) {
        try {
          const retryIn = __classPrivateFieldGet(this, _RedisSocket_options, "f").reconnectStrategy(retries, cause);
          if (retryIn !== false && !(retryIn instanceof Error) && typeof retryIn !== "number") {
            throw new TypeError(`Reconnect strategy should return \`false | Error | number\`, got ${retryIn} instead`);
          }
          return retryIn;
        } catch (err) {
          this.emit("error", err);
        }
      }
      return Math.min(retries * 50, 500);
    }, _RedisSocket_shouldReconnect = function _RedisSocket_shouldReconnect2(retries, cause) {
      const retryIn = __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_reconnectStrategy).call(this, retries, cause);
      if (retryIn === false) {
        __classPrivateFieldSet(this, _RedisSocket_isOpen, false, "f");
        this.emit("error", cause);
        return cause;
      } else if (retryIn instanceof Error) {
        __classPrivateFieldSet(this, _RedisSocket_isOpen, false, "f");
        this.emit("error", cause);
        return new errors_1.ReconnectStrategyError(retryIn, cause);
      }
      return retryIn;
    }, _RedisSocket_connect = async function _RedisSocket_connect2() {
      let retries = 0;
      do {
        try {
          __classPrivateFieldSet(this, _RedisSocket_socket, await __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_createSocket).call(this), "f");
          __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, "f");
          this.emit("connect");
          try {
            await __classPrivateFieldGet(this, _RedisSocket_initiator, "f").call(this);
          } catch (err) {
            __classPrivateFieldGet(this, _RedisSocket_socket, "f").destroy();
            __classPrivateFieldSet(this, _RedisSocket_socket, void 0, "f");
            throw err;
          }
          __classPrivateFieldSet(this, _RedisSocket_isReady, true, "f");
          this.emit("ready");
        } catch (err) {
          const retryIn = __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_shouldReconnect).call(this, retries++, err);
          if (typeof retryIn !== "number") {
            throw retryIn;
          }
          this.emit("error", err);
          await (0, utils_1.promiseTimeout)(retryIn);
          this.emit("reconnecting");
        }
      } while (__classPrivateFieldGet(this, _RedisSocket_isOpen, "f") && !__classPrivateFieldGet(this, _RedisSocket_isReady, "f"));
    }, _RedisSocket_createSocket = function _RedisSocket_createSocket2() {
      return new Promise((resolve, reject) => {
        const { connectEvent, socket } = __classPrivateFieldGet(_a, _a, "m", _RedisSocket_isTlsSocket).call(_a, __classPrivateFieldGet(this, _RedisSocket_options, "f")) ? __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_createTlsSocket).call(this) : __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_createNetSocket).call(this);
        if (__classPrivateFieldGet(this, _RedisSocket_options, "f").connectTimeout) {
          socket.setTimeout(__classPrivateFieldGet(this, _RedisSocket_options, "f").connectTimeout, () => socket.destroy(new errors_1.ConnectionTimeoutError()));
        }
        if (__classPrivateFieldGet(this, _RedisSocket_isSocketUnrefed, "f")) {
          socket.unref();
        }
        socket.setNoDelay(__classPrivateFieldGet(this, _RedisSocket_options, "f").noDelay).once("error", reject).once(connectEvent, () => {
          socket.setTimeout(0).setKeepAlive(__classPrivateFieldGet(this, _RedisSocket_options, "f").keepAlive !== false, __classPrivateFieldGet(this, _RedisSocket_options, "f").keepAlive || 0).off("error", reject).once("error", (err) => __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_onSocketError).call(this, err)).once("close", (hadError) => {
            if (!hadError && __classPrivateFieldGet(this, _RedisSocket_isOpen, "f") && __classPrivateFieldGet(this, _RedisSocket_socket, "f") === socket) {
              __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_onSocketError).call(this, new errors_1.SocketClosedUnexpectedlyError());
            }
          }).on("drain", () => {
            __classPrivateFieldSet(this, _RedisSocket_writableNeedDrain, false, "f");
            this.emit("drain");
          }).on("data", (data) => this.emit("data", data));
          resolve(socket);
        });
      });
    }, _RedisSocket_createNetSocket = function _RedisSocket_createNetSocket2() {
      return {
        connectEvent: "connect",
        socket: net.connect(__classPrivateFieldGet(this, _RedisSocket_options, "f"))
        // TODO
      };
    }, _RedisSocket_createTlsSocket = function _RedisSocket_createTlsSocket2() {
      return {
        connectEvent: "secureConnect",
        socket: tls.connect(__classPrivateFieldGet(this, _RedisSocket_options, "f"))
        // TODO
      };
    }, _RedisSocket_onSocketError = function _RedisSocket_onSocketError2(err) {
      const wasReady = __classPrivateFieldGet(this, _RedisSocket_isReady, "f");
      __classPrivateFieldSet(this, _RedisSocket_isReady, false, "f");
      this.emit("error", err);
      if (!wasReady || !__classPrivateFieldGet(this, _RedisSocket_isOpen, "f") || typeof __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_shouldReconnect).call(this, 0, err) !== "number")
        return;
      this.emit("reconnecting");
      __classPrivateFieldGet(this, _RedisSocket_instances, "m", _RedisSocket_connect).call(this).catch(() => {
      });
    }, _RedisSocket_disconnect = function _RedisSocket_disconnect2() {
      __classPrivateFieldSet(this, _RedisSocket_isReady, false, "f");
      if (__classPrivateFieldGet(this, _RedisSocket_socket, "f")) {
        __classPrivateFieldGet(this, _RedisSocket_socket, "f").destroy();
        __classPrivateFieldSet(this, _RedisSocket_socket, void 0, "f");
      }
      this.emit("end");
    };
    exports2.default = RedisSocket;
  }
});

// node_modules/yallist/iterator.js
var require_iterator = __commonJS({
  "node_modules/yallist/iterator.js"(exports2, module2) {
    "use strict";
    module2.exports = function(Yallist) {
      Yallist.prototype[Symbol.iterator] = function* () {
        for (let walker = this.head; walker; walker = walker.next) {
          yield walker.value;
        }
      };
    };
  }
});

// node_modules/yallist/yallist.js
var require_yallist = __commonJS({
  "node_modules/yallist/yallist.js"(exports2, module2) {
    "use strict";
    module2.exports = Yallist;
    Yallist.Node = Node;
    Yallist.create = Yallist;
    function Yallist(list) {
      var self2 = this;
      if (!(self2 instanceof Yallist)) {
        self2 = new Yallist();
      }
      self2.tail = null;
      self2.head = null;
      self2.length = 0;
      if (list && typeof list.forEach === "function") {
        list.forEach(function(item) {
          self2.push(item);
        });
      } else if (arguments.length > 0) {
        for (var i = 0, l = arguments.length; i < l; i++) {
          self2.push(arguments[i]);
        }
      }
      return self2;
    }
    Yallist.prototype.removeNode = function(node) {
      if (node.list !== this) {
        throw new Error("removing node which does not belong to this list");
      }
      var next = node.next;
      var prev = node.prev;
      if (next) {
        next.prev = prev;
      }
      if (prev) {
        prev.next = next;
      }
      if (node === this.head) {
        this.head = next;
      }
      if (node === this.tail) {
        this.tail = prev;
      }
      node.list.length--;
      node.next = null;
      node.prev = null;
      node.list = null;
      return next;
    };
    Yallist.prototype.unshiftNode = function(node) {
      if (node === this.head) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var head = this.head;
      node.list = this;
      node.next = head;
      if (head) {
        head.prev = node;
      }
      this.head = node;
      if (!this.tail) {
        this.tail = node;
      }
      this.length++;
    };
    Yallist.prototype.pushNode = function(node) {
      if (node === this.tail) {
        return;
      }
      if (node.list) {
        node.list.removeNode(node);
      }
      var tail = this.tail;
      node.list = this;
      node.prev = tail;
      if (tail) {
        tail.next = node;
      }
      this.tail = node;
      if (!this.head) {
        this.head = node;
      }
      this.length++;
    };
    Yallist.prototype.push = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        push(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.unshift = function() {
      for (var i = 0, l = arguments.length; i < l; i++) {
        unshift(this, arguments[i]);
      }
      return this.length;
    };
    Yallist.prototype.pop = function() {
      if (!this.tail) {
        return void 0;
      }
      var res = this.tail.value;
      this.tail = this.tail.prev;
      if (this.tail) {
        this.tail.next = null;
      } else {
        this.head = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.shift = function() {
      if (!this.head) {
        return void 0;
      }
      var res = this.head.value;
      this.head = this.head.next;
      if (this.head) {
        this.head.prev = null;
      } else {
        this.tail = null;
      }
      this.length--;
      return res;
    };
    Yallist.prototype.forEach = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i = 0; walker !== null; i++) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
      }
    };
    Yallist.prototype.forEachReverse = function(fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
      }
    };
    Yallist.prototype.get = function(n) {
      for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
        walker = walker.next;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.getReverse = function(n) {
      for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
        walker = walker.prev;
      }
      if (i === n && walker !== null) {
        return walker.value;
      }
    };
    Yallist.prototype.map = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.head; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
      }
      return res;
    };
    Yallist.prototype.mapReverse = function(fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist();
      for (var walker = this.tail; walker !== null; ) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
      }
      return res;
    };
    Yallist.prototype.reduce = function(fn, initial) {
      var acc;
      var walker = this.head;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = 0; walker !== null; i++) {
        acc = fn(acc, walker.value, i);
        walker = walker.next;
      }
      return acc;
    };
    Yallist.prototype.reduceReverse = function(fn, initial) {
      var acc;
      var walker = this.tail;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
      } else {
        throw new TypeError("Reduce of empty list with no initial value");
      }
      for (var i = this.length - 1; walker !== null; i--) {
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
      }
      return acc;
    };
    Yallist.prototype.toArray = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.head; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.next;
      }
      return arr;
    };
    Yallist.prototype.toArrayReverse = function() {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.tail; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.prev;
      }
      return arr;
    };
    Yallist.prototype.slice = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
        walker = walker.next;
      }
      for (; walker !== null && i < to; i++, walker = walker.next) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.sliceReverse = function(from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist();
      if (to < from || to < 0) {
        return ret;
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
        walker = walker.prev;
      }
      for (; walker !== null && i > from; i--, walker = walker.prev) {
        ret.push(walker.value);
      }
      return ret;
    };
    Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
      if (start > this.length) {
        start = this.length - 1;
      }
      if (start < 0) {
        start = this.length + start;
      }
      for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
        walker = walker.next;
      }
      var ret = [];
      for (var i = 0; walker && i < deleteCount; i++) {
        ret.push(walker.value);
        walker = this.removeNode(walker);
      }
      if (walker === null) {
        walker = this.tail;
      }
      if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
      }
      for (var i = 0; i < nodes.length; i++) {
        walker = insert(this, walker, nodes[i]);
      }
      return ret;
    };
    Yallist.prototype.reverse = function() {
      var head = this.head;
      var tail = this.tail;
      for (var walker = head; walker !== null; walker = walker.prev) {
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
      }
      this.head = tail;
      this.tail = head;
      return this;
    };
    function insert(self2, node, value) {
      var inserted = node === self2.head ? new Node(value, null, node, self2) : new Node(value, node, node.next, self2);
      if (inserted.next === null) {
        self2.tail = inserted;
      }
      if (inserted.prev === null) {
        self2.head = inserted;
      }
      self2.length++;
      return inserted;
    }
    function push(self2, item) {
      self2.tail = new Node(item, self2.tail, null, self2);
      if (!self2.head) {
        self2.head = self2.tail;
      }
      self2.length++;
    }
    function unshift(self2, item) {
      self2.head = new Node(item, null, self2.head, self2);
      if (!self2.tail) {
        self2.tail = self2.head;
      }
      self2.length++;
    }
    function Node(value, prev, next, list) {
      if (!(this instanceof Node)) {
        return new Node(value, prev, next, list);
      }
      this.list = list;
      this.value = value;
      if (prev) {
        prev.next = this;
        this.prev = prev;
      } else {
        this.prev = null;
      }
      if (next) {
        next.prev = this;
        this.next = next;
      } else {
        this.next = null;
      }
    }
    try {
      require_iterator()(Yallist);
    } catch (er) {
    }
  }
});

// node_modules/@redis/client/dist/lib/client/RESP2/composers/buffer.js
var require_buffer = __commonJS({
  "node_modules/@redis/client/dist/lib/client/RESP2/composers/buffer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var BufferComposer = class {
      constructor() {
        Object.defineProperty(this, "chunks", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: []
        });
      }
      write(buffer) {
        this.chunks.push(buffer);
      }
      end(buffer) {
        this.write(buffer);
        return Buffer.concat(this.chunks.splice(0));
      }
      reset() {
        this.chunks = [];
      }
    };
    exports2.default = BufferComposer;
  }
});

// node_modules/@redis/client/dist/lib/client/RESP2/composers/string.js
var require_string = __commonJS({
  "node_modules/@redis/client/dist/lib/client/RESP2/composers/string.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var string_decoder_1 = require("string_decoder");
    var StringComposer = class {
      constructor() {
        Object.defineProperty(this, "decoder", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new string_decoder_1.StringDecoder()
        });
        Object.defineProperty(this, "string", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: ""
        });
      }
      write(buffer) {
        this.string += this.decoder.write(buffer);
      }
      end(buffer) {
        const string = this.string + this.decoder.end(buffer);
        this.string = "";
        return string;
      }
      reset() {
        this.string = "";
      }
    };
    exports2.default = StringComposer;
  }
});

// node_modules/@redis/client/dist/lib/client/RESP2/decoder.js
var require_decoder = __commonJS({
  "node_modules/@redis/client/dist/lib/client/RESP2/decoder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var errors_1 = require_errors2();
    var buffer_1 = require_buffer();
    var string_1 = require_string();
    var Types;
    (function(Types2) {
      Types2[Types2["SIMPLE_STRING"] = 43] = "SIMPLE_STRING";
      Types2[Types2["ERROR"] = 45] = "ERROR";
      Types2[Types2["INTEGER"] = 58] = "INTEGER";
      Types2[Types2["BULK_STRING"] = 36] = "BULK_STRING";
      Types2[Types2["ARRAY"] = 42] = "ARRAY";
    })(Types || (Types = {}));
    var ASCII;
    (function(ASCII2) {
      ASCII2[ASCII2["CR"] = 13] = "CR";
      ASCII2[ASCII2["ZERO"] = 48] = "ZERO";
      ASCII2[ASCII2["MINUS"] = 45] = "MINUS";
    })(ASCII || (ASCII = {}));
    var RESP2Decoder = class {
      constructor(options2) {
        Object.defineProperty(this, "options", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: options2
        });
        Object.defineProperty(this, "cursor", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: 0
        });
        Object.defineProperty(this, "type", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "bufferComposer", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new buffer_1.default()
        });
        Object.defineProperty(this, "stringComposer", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new string_1.default()
        });
        Object.defineProperty(this, "currentStringComposer", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.stringComposer
        });
        Object.defineProperty(this, "integer", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: 0
        });
        Object.defineProperty(this, "isNegativeInteger", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "bulkStringRemainingLength", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "arraysInProcess", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: []
        });
        Object.defineProperty(this, "initializeArray", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: false
        });
        Object.defineProperty(this, "arrayItemType", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
      }
      reset() {
        this.cursor = 0;
        this.type = void 0;
        this.bufferComposer.reset();
        this.stringComposer.reset();
        this.currentStringComposer = this.stringComposer;
      }
      write(chunk) {
        while (this.cursor < chunk.length) {
          if (!this.type) {
            this.currentStringComposer = this.options.returnStringsAsBuffers() ? this.bufferComposer : this.stringComposer;
            this.type = chunk[this.cursor];
            if (++this.cursor >= chunk.length)
              break;
          }
          const reply = this.parseType(chunk, this.type);
          if (reply === void 0)
            break;
          this.type = void 0;
          this.options.onReply(reply);
        }
        this.cursor -= chunk.length;
      }
      parseType(chunk, type, arraysToKeep) {
        switch (type) {
          case Types.SIMPLE_STRING:
            return this.parseSimpleString(chunk);
          case Types.ERROR:
            return this.parseError(chunk);
          case Types.INTEGER:
            return this.parseInteger(chunk);
          case Types.BULK_STRING:
            return this.parseBulkString(chunk);
          case Types.ARRAY:
            return this.parseArray(chunk, arraysToKeep);
        }
      }
      compose(chunk, composer) {
        for (let i = this.cursor; i < chunk.length; i++) {
          if (chunk[i] === ASCII.CR) {
            const reply = composer.end(chunk.subarray(this.cursor, i));
            this.cursor = i + 2;
            return reply;
          }
        }
        const toWrite = chunk.subarray(this.cursor);
        composer.write(toWrite);
        this.cursor = chunk.length;
      }
      parseSimpleString(chunk) {
        return this.compose(chunk, this.currentStringComposer);
      }
      parseError(chunk) {
        const message = this.compose(chunk, this.stringComposer);
        if (message !== void 0) {
          return new errors_1.ErrorReply(message);
        }
      }
      parseInteger(chunk) {
        if (this.isNegativeInteger === void 0) {
          this.isNegativeInteger = chunk[this.cursor] === ASCII.MINUS;
          if (this.isNegativeInteger && ++this.cursor === chunk.length)
            return;
        }
        do {
          const byte = chunk[this.cursor];
          if (byte === ASCII.CR) {
            const integer = this.isNegativeInteger ? -this.integer : this.integer;
            this.integer = 0;
            this.isNegativeInteger = void 0;
            this.cursor += 2;
            return integer;
          }
          this.integer = this.integer * 10 + byte - ASCII.ZERO;
        } while (++this.cursor < chunk.length);
      }
      parseBulkString(chunk) {
        if (this.bulkStringRemainingLength === void 0) {
          const length = this.parseInteger(chunk);
          if (length === void 0)
            return;
          if (length === -1)
            return null;
          this.bulkStringRemainingLength = length;
          if (this.cursor >= chunk.length)
            return;
        }
        const end = this.cursor + this.bulkStringRemainingLength;
        if (chunk.length >= end) {
          const reply = this.currentStringComposer.end(chunk.subarray(this.cursor, end));
          this.bulkStringRemainingLength = void 0;
          this.cursor = end + 2;
          return reply;
        }
        const toWrite = chunk.subarray(this.cursor);
        this.currentStringComposer.write(toWrite);
        this.bulkStringRemainingLength -= toWrite.length;
        this.cursor = chunk.length;
      }
      parseArray(chunk, arraysToKeep = 0) {
        if (this.initializeArray || this.arraysInProcess.length === arraysToKeep) {
          const length = this.parseInteger(chunk);
          if (length === void 0) {
            this.initializeArray = true;
            return void 0;
          }
          this.initializeArray = false;
          this.arrayItemType = void 0;
          if (length === -1) {
            return this.returnArrayReply(null, arraysToKeep, chunk);
          } else if (length === 0) {
            return this.returnArrayReply([], arraysToKeep, chunk);
          }
          this.arraysInProcess.push({
            array: new Array(length),
            pushCounter: 0
          });
        }
        while (this.cursor < chunk.length) {
          if (!this.arrayItemType) {
            this.arrayItemType = chunk[this.cursor];
            if (++this.cursor >= chunk.length)
              break;
          }
          const item = this.parseType(chunk, this.arrayItemType, arraysToKeep + 1);
          if (item === void 0)
            break;
          this.arrayItemType = void 0;
          const reply = this.pushArrayItem(item, arraysToKeep);
          if (reply !== void 0)
            return reply;
        }
      }
      returnArrayReply(reply, arraysToKeep, chunk) {
        if (this.arraysInProcess.length <= arraysToKeep)
          return reply;
        return this.pushArrayItem(reply, arraysToKeep, chunk);
      }
      pushArrayItem(item, arraysToKeep, chunk) {
        const to = this.arraysInProcess[this.arraysInProcess.length - 1];
        to.array[to.pushCounter] = item;
        if (++to.pushCounter === to.array.length) {
          return this.returnArrayReply(this.arraysInProcess.pop().array, arraysToKeep, chunk);
        } else if (chunk && chunk.length > this.cursor) {
          return this.parseArray(chunk, arraysToKeep);
        }
      }
    };
    exports2.default = RESP2Decoder;
  }
});

// node_modules/@redis/client/dist/lib/client/RESP2/encoder.js
var require_encoder = __commonJS({
  "node_modules/@redis/client/dist/lib/client/RESP2/encoder.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var CRLF = "\r\n";
    function encodeCommand(args) {
      const toWrite = [];
      let strings = "*" + args.length + CRLF;
      for (let i = 0; i < args.length; i++) {
        const arg = args[i];
        if (typeof arg === "string") {
          strings += "$" + Buffer.byteLength(arg) + CRLF + arg + CRLF;
        } else if (arg instanceof Buffer) {
          toWrite.push(strings + "$" + arg.length.toString() + CRLF, arg);
          strings = CRLF;
        } else {
          throw new TypeError("Invalid argument type");
        }
      }
      toWrite.push(strings);
      return toWrite;
    }
    exports2.default = encodeCommand;
  }
});

// node_modules/@redis/client/dist/lib/client/pub-sub.js
var require_pub_sub = __commonJS({
  "node_modules/@redis/client/dist/lib/client/pub-sub.js"(exports2) {
    "use strict";
    var __classPrivateFieldGet = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var _PubSub_instances;
    var _a;
    var _PubSub_channelsArray;
    var _PubSub_listenersSet;
    var _PubSub_subscribing;
    var _PubSub_isActive;
    var _PubSub_listeners;
    var _PubSub_extendChannelListeners;
    var _PubSub_unsubscribeCommand;
    var _PubSub_updateIsActive;
    var _PubSub_emitPubSubMessage;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PubSub = exports2.PubSubType = void 0;
    var PubSubType;
    (function(PubSubType2) {
      PubSubType2["CHANNELS"] = "CHANNELS";
      PubSubType2["PATTERNS"] = "PATTERNS";
      PubSubType2["SHARDED"] = "SHARDED";
    })(PubSubType || (exports2.PubSubType = PubSubType = {}));
    var COMMANDS = {
      [PubSubType.CHANNELS]: {
        subscribe: Buffer.from("subscribe"),
        unsubscribe: Buffer.from("unsubscribe"),
        message: Buffer.from("message")
      },
      [PubSubType.PATTERNS]: {
        subscribe: Buffer.from("psubscribe"),
        unsubscribe: Buffer.from("punsubscribe"),
        message: Buffer.from("pmessage")
      },
      [PubSubType.SHARDED]: {
        subscribe: Buffer.from("ssubscribe"),
        unsubscribe: Buffer.from("sunsubscribe"),
        message: Buffer.from("smessage")
      }
    };
    var PubSub = class {
      constructor() {
        _PubSub_instances.add(this);
        _PubSub_subscribing.set(this, 0);
        _PubSub_isActive.set(this, false);
        _PubSub_listeners.set(this, {
          [PubSubType.CHANNELS]: /* @__PURE__ */ new Map(),
          [PubSubType.PATTERNS]: /* @__PURE__ */ new Map(),
          [PubSubType.SHARDED]: /* @__PURE__ */ new Map()
        });
      }
      static isStatusReply(reply) {
        return COMMANDS[PubSubType.CHANNELS].subscribe.equals(reply[0]) || COMMANDS[PubSubType.CHANNELS].unsubscribe.equals(reply[0]) || COMMANDS[PubSubType.PATTERNS].subscribe.equals(reply[0]) || COMMANDS[PubSubType.PATTERNS].unsubscribe.equals(reply[0]) || COMMANDS[PubSubType.SHARDED].subscribe.equals(reply[0]);
      }
      static isShardedUnsubscribe(reply) {
        return COMMANDS[PubSubType.SHARDED].unsubscribe.equals(reply[0]);
      }
      get isActive() {
        return __classPrivateFieldGet(this, _PubSub_isActive, "f");
      }
      subscribe(type, channels, listener, returnBuffers) {
        var _b;
        const args = [COMMANDS[type].subscribe], channelsArray = __classPrivateFieldGet(_a, _a, "m", _PubSub_channelsArray).call(_a, channels);
        for (const channel of channelsArray) {
          let channelListeners = __classPrivateFieldGet(this, _PubSub_listeners, "f")[type].get(channel);
          if (!channelListeners || channelListeners.unsubscribing) {
            args.push(channel);
          }
        }
        if (args.length === 1) {
          for (const channel of channelsArray) {
            __classPrivateFieldGet(_a, _a, "m", _PubSub_listenersSet).call(_a, __classPrivateFieldGet(this, _PubSub_listeners, "f")[type].get(channel), returnBuffers).add(listener);
          }
          return;
        }
        __classPrivateFieldSet(this, _PubSub_isActive, true, "f");
        __classPrivateFieldSet(this, _PubSub_subscribing, (_b = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b++, _b), "f");
        return {
          args,
          channelsCounter: args.length - 1,
          resolve: () => {
            var _b2;
            __classPrivateFieldSet(this, _PubSub_subscribing, (_b2 = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b2--, _b2), "f");
            for (const channel of channelsArray) {
              let listeners = __classPrivateFieldGet(this, _PubSub_listeners, "f")[type].get(channel);
              if (!listeners) {
                listeners = {
                  unsubscribing: false,
                  buffers: /* @__PURE__ */ new Set(),
                  strings: /* @__PURE__ */ new Set()
                };
                __classPrivateFieldGet(this, _PubSub_listeners, "f")[type].set(channel, listeners);
              }
              __classPrivateFieldGet(_a, _a, "m", _PubSub_listenersSet).call(_a, listeners, returnBuffers).add(listener);
            }
          },
          reject: () => {
            var _b2;
            __classPrivateFieldSet(this, _PubSub_subscribing, (_b2 = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b2--, _b2), "f");
            __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_updateIsActive).call(this);
          }
        };
      }
      extendChannelListeners(type, channel, listeners) {
        var _b;
        if (!__classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_extendChannelListeners).call(this, type, channel, listeners))
          return;
        __classPrivateFieldSet(this, _PubSub_isActive, true, "f");
        __classPrivateFieldSet(this, _PubSub_subscribing, (_b = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b++, _b), "f");
        return {
          args: [
            COMMANDS[type].subscribe,
            channel
          ],
          channelsCounter: 1,
          resolve: () => {
            var _b2, _c;
            return __classPrivateFieldSet(this, _PubSub_subscribing, (_c = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b2 = _c--, _c), "f"), _b2;
          },
          reject: () => {
            var _b2;
            __classPrivateFieldSet(this, _PubSub_subscribing, (_b2 = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b2--, _b2), "f");
            __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_updateIsActive).call(this);
          }
        };
      }
      extendTypeListeners(type, listeners) {
        var _b;
        const args = [COMMANDS[type].subscribe];
        for (const [channel, channelListeners] of listeners) {
          if (__classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_extendChannelListeners).call(this, type, channel, channelListeners)) {
            args.push(channel);
          }
        }
        if (args.length === 1)
          return;
        __classPrivateFieldSet(this, _PubSub_isActive, true, "f");
        __classPrivateFieldSet(this, _PubSub_subscribing, (_b = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b++, _b), "f");
        return {
          args,
          channelsCounter: args.length - 1,
          resolve: () => {
            var _b2, _c;
            return __classPrivateFieldSet(this, _PubSub_subscribing, (_c = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b2 = _c--, _c), "f"), _b2;
          },
          reject: () => {
            var _b2;
            __classPrivateFieldSet(this, _PubSub_subscribing, (_b2 = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b2--, _b2), "f");
            __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_updateIsActive).call(this);
          }
        };
      }
      unsubscribe(type, channels, listener, returnBuffers) {
        const listeners = __classPrivateFieldGet(this, _PubSub_listeners, "f")[type];
        if (!channels) {
          return __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_unsubscribeCommand).call(
            this,
            [COMMANDS[type].unsubscribe],
            // cannot use `this.#subscribed` because there might be some `SUBSCRIBE` commands in the queue
            // cannot use `this.#subscribed + this.#subscribing` because some `SUBSCRIBE` commands might fail
            NaN,
            () => listeners.clear()
          );
        }
        const channelsArray = __classPrivateFieldGet(_a, _a, "m", _PubSub_channelsArray).call(_a, channels);
        if (!listener) {
          return __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_unsubscribeCommand).call(this, [COMMANDS[type].unsubscribe, ...channelsArray], channelsArray.length, () => {
            for (const channel of channelsArray) {
              listeners.delete(channel);
            }
          });
        }
        const args = [COMMANDS[type].unsubscribe];
        for (const channel of channelsArray) {
          const sets = listeners.get(channel);
          if (sets) {
            let current, other;
            if (returnBuffers) {
              current = sets.buffers;
              other = sets.strings;
            } else {
              current = sets.strings;
              other = sets.buffers;
            }
            const currentSize = current.has(listener) ? current.size - 1 : current.size;
            if (currentSize !== 0 || other.size !== 0)
              continue;
            sets.unsubscribing = true;
          }
          args.push(channel);
        }
        if (args.length === 1) {
          for (const channel of channelsArray) {
            __classPrivateFieldGet(_a, _a, "m", _PubSub_listenersSet).call(_a, listeners.get(channel), returnBuffers).delete(listener);
          }
          return;
        }
        return __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_unsubscribeCommand).call(this, args, args.length - 1, () => {
          for (const channel of channelsArray) {
            const sets = listeners.get(channel);
            if (!sets)
              continue;
            (returnBuffers ? sets.buffers : sets.strings).delete(listener);
            if (sets.buffers.size === 0 && sets.strings.size === 0) {
              listeners.delete(channel);
            }
          }
        });
      }
      reset() {
        __classPrivateFieldSet(this, _PubSub_isActive, false, "f");
        __classPrivateFieldSet(this, _PubSub_subscribing, 0, "f");
      }
      resubscribe() {
        var _b;
        const commands = [];
        for (const [type, listeners] of Object.entries(__classPrivateFieldGet(this, _PubSub_listeners, "f"))) {
          if (!listeners.size)
            continue;
          __classPrivateFieldSet(this, _PubSub_isActive, true, "f");
          __classPrivateFieldSet(this, _PubSub_subscribing, (_b = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b++, _b), "f");
          const callback = () => {
            var _b2, _c;
            return __classPrivateFieldSet(this, _PubSub_subscribing, (_c = __classPrivateFieldGet(this, _PubSub_subscribing, "f"), _b2 = _c--, _c), "f"), _b2;
          };
          commands.push({
            args: [
              COMMANDS[type].subscribe,
              ...listeners.keys()
            ],
            channelsCounter: listeners.size,
            resolve: callback,
            reject: callback
          });
        }
        return commands;
      }
      handleMessageReply(reply) {
        if (COMMANDS[PubSubType.CHANNELS].message.equals(reply[0])) {
          __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_emitPubSubMessage).call(this, PubSubType.CHANNELS, reply[2], reply[1]);
          return true;
        } else if (COMMANDS[PubSubType.PATTERNS].message.equals(reply[0])) {
          __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_emitPubSubMessage).call(this, PubSubType.PATTERNS, reply[3], reply[2], reply[1]);
          return true;
        } else if (COMMANDS[PubSubType.SHARDED].message.equals(reply[0])) {
          __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_emitPubSubMessage).call(this, PubSubType.SHARDED, reply[2], reply[1]);
          return true;
        }
        return false;
      }
      removeShardedListeners(channel) {
        const listeners = __classPrivateFieldGet(this, _PubSub_listeners, "f")[PubSubType.SHARDED].get(channel);
        __classPrivateFieldGet(this, _PubSub_listeners, "f")[PubSubType.SHARDED].delete(channel);
        __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_updateIsActive).call(this);
        return listeners;
      }
      getTypeListeners(type) {
        return __classPrivateFieldGet(this, _PubSub_listeners, "f")[type];
      }
    };
    exports2.PubSub = PubSub;
    _a = PubSub, _PubSub_subscribing = /* @__PURE__ */ new WeakMap(), _PubSub_isActive = /* @__PURE__ */ new WeakMap(), _PubSub_listeners = /* @__PURE__ */ new WeakMap(), _PubSub_instances = /* @__PURE__ */ new WeakSet(), _PubSub_channelsArray = function _PubSub_channelsArray2(channels) {
      return Array.isArray(channels) ? channels : [channels];
    }, _PubSub_listenersSet = function _PubSub_listenersSet2(listeners, returnBuffers) {
      return returnBuffers ? listeners.buffers : listeners.strings;
    }, _PubSub_extendChannelListeners = function _PubSub_extendChannelListeners2(type, channel, listeners) {
      const existingListeners = __classPrivateFieldGet(this, _PubSub_listeners, "f")[type].get(channel);
      if (!existingListeners) {
        __classPrivateFieldGet(this, _PubSub_listeners, "f")[type].set(channel, listeners);
        return true;
      }
      for (const listener of listeners.buffers) {
        existingListeners.buffers.add(listener);
      }
      for (const listener of listeners.strings) {
        existingListeners.strings.add(listener);
      }
      return false;
    }, _PubSub_unsubscribeCommand = function _PubSub_unsubscribeCommand2(args, channelsCounter, removeListeners) {
      return {
        args,
        channelsCounter,
        resolve: () => {
          removeListeners();
          __classPrivateFieldGet(this, _PubSub_instances, "m", _PubSub_updateIsActive).call(this);
        },
        reject: void 0
        // use the same structure as `subscribe`
      };
    }, _PubSub_updateIsActive = function _PubSub_updateIsActive2() {
      __classPrivateFieldSet(this, _PubSub_isActive, __classPrivateFieldGet(this, _PubSub_listeners, "f")[PubSubType.CHANNELS].size !== 0 || __classPrivateFieldGet(this, _PubSub_listeners, "f")[PubSubType.PATTERNS].size !== 0 || __classPrivateFieldGet(this, _PubSub_listeners, "f")[PubSubType.SHARDED].size !== 0 || __classPrivateFieldGet(this, _PubSub_subscribing, "f") !== 0, "f");
    }, _PubSub_emitPubSubMessage = function _PubSub_emitPubSubMessage2(type, message, channel, pattern) {
      const keyString = (pattern ?? channel).toString(), listeners = __classPrivateFieldGet(this, _PubSub_listeners, "f")[type].get(keyString);
      if (!listeners)
        return;
      for (const listener of listeners.buffers) {
        listener(message, channel);
      }
      if (!listeners.strings.size)
        return;
      const channelString = pattern ? channel.toString() : keyString, messageString = channelString === "__redis__:invalidate" ? (
        // https://github.com/redis/redis/pull/7469
        // https://github.com/redis/redis/issues/7463
        message === null ? null : message.map((x) => x.toString())
      ) : message.toString();
      for (const listener of listeners.strings) {
        listener(messageString, channelString);
      }
    };
  }
});

// node_modules/@redis/client/dist/lib/client/commands-queue.js
var require_commands_queue = __commonJS({
  "node_modules/@redis/client/dist/lib/client/commands-queue.js"(exports2) {
    "use strict";
    var __classPrivateFieldGet = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var _RedisCommandsQueue_instances;
    var _a;
    var _RedisCommandsQueue_flushQueue;
    var _RedisCommandsQueue_maxLength;
    var _RedisCommandsQueue_waitingToBeSent;
    var _RedisCommandsQueue_waitingForReply;
    var _RedisCommandsQueue_onShardedChannelMoved;
    var _RedisCommandsQueue_pubSub;
    var _RedisCommandsQueue_chainInExecution;
    var _RedisCommandsQueue_decoder;
    var _RedisCommandsQueue_pushPubSubCommand;
    Object.defineProperty(exports2, "__esModule", { value: true });
    var LinkedList = require_yallist();
    var errors_1 = require_errors2();
    var decoder_1 = require_decoder();
    var encoder_1 = require_encoder();
    var pub_sub_1 = require_pub_sub();
    var PONG = Buffer.from("pong");
    var RedisCommandsQueue = class {
      get isPubSubActive() {
        return __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").isActive;
      }
      constructor(maxLength, onShardedChannelMoved) {
        _RedisCommandsQueue_instances.add(this);
        _RedisCommandsQueue_maxLength.set(this, void 0);
        _RedisCommandsQueue_waitingToBeSent.set(this, new LinkedList());
        _RedisCommandsQueue_waitingForReply.set(this, new LinkedList());
        _RedisCommandsQueue_onShardedChannelMoved.set(this, void 0);
        _RedisCommandsQueue_pubSub.set(this, new pub_sub_1.PubSub());
        _RedisCommandsQueue_chainInExecution.set(this, void 0);
        _RedisCommandsQueue_decoder.set(this, new decoder_1.default({
          returnStringsAsBuffers: () => {
            return !!__classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").head?.value.returnBuffers || __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").isActive;
          },
          onReply: (reply) => {
            if (__classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").isActive && Array.isArray(reply)) {
              if (__classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").handleMessageReply(reply))
                return;
              const isShardedUnsubscribe = pub_sub_1.PubSub.isShardedUnsubscribe(reply);
              if (isShardedUnsubscribe && !__classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").length) {
                const channel = reply[1].toString();
                __classPrivateFieldGet(this, _RedisCommandsQueue_onShardedChannelMoved, "f").call(this, channel, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").removeShardedListeners(channel));
                return;
              } else if (isShardedUnsubscribe || pub_sub_1.PubSub.isStatusReply(reply)) {
                const head = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").head.value;
                if (Number.isNaN(head.channelsCounter) && reply[2] === 0 || --head.channelsCounter === 0) {
                  __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").shift().resolve();
                }
                return;
              }
              if (PONG.equals(reply[0])) {
                const { resolve: resolve2, returnBuffers } = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").shift(), buffer = reply[1].length === 0 ? reply[0] : reply[1];
                resolve2(returnBuffers ? buffer : buffer.toString());
                return;
              }
            }
            const { resolve, reject } = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").shift();
            if (reply instanceof errors_1.ErrorReply) {
              reject(reply);
            } else {
              resolve(reply);
            }
          }
        }));
        __classPrivateFieldSet(this, _RedisCommandsQueue_maxLength, maxLength, "f");
        __classPrivateFieldSet(this, _RedisCommandsQueue_onShardedChannelMoved, onShardedChannelMoved, "f");
      }
      addCommand(args, options2) {
        if (__classPrivateFieldGet(this, _RedisCommandsQueue_maxLength, "f") && __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").length + __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").length >= __classPrivateFieldGet(this, _RedisCommandsQueue_maxLength, "f")) {
          return Promise.reject(new Error("The queue is full"));
        } else if (options2?.signal?.aborted) {
          return Promise.reject(new errors_1.AbortError());
        }
        return new Promise((resolve, reject) => {
          const node = new LinkedList.Node({
            args,
            chainId: options2?.chainId,
            returnBuffers: options2?.returnBuffers,
            resolve,
            reject
          });
          if (options2?.signal) {
            const listener = () => {
              __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").removeNode(node);
              node.value.reject(new errors_1.AbortError());
            };
            node.value.abort = {
              signal: options2.signal,
              listener
            };
            options2.signal.addEventListener("abort", listener, {
              once: true
            });
          }
          if (options2?.asap) {
            __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").unshiftNode(node);
          } else {
            __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").pushNode(node);
          }
        });
      }
      subscribe(type, channels, listener, returnBuffers) {
        return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").subscribe(type, channels, listener, returnBuffers));
      }
      unsubscribe(type, channels, listener, returnBuffers) {
        return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").unsubscribe(type, channels, listener, returnBuffers));
      }
      resubscribe() {
        const commands = __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").resubscribe();
        if (!commands.length)
          return;
        return Promise.all(commands.map((command) => __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, command)));
      }
      extendPubSubChannelListeners(type, channel, listeners) {
        return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").extendChannelListeners(type, channel, listeners));
      }
      extendPubSubListeners(type, listeners) {
        return __classPrivateFieldGet(this, _RedisCommandsQueue_instances, "m", _RedisCommandsQueue_pushPubSubCommand).call(this, __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").extendTypeListeners(type, listeners));
      }
      getPubSubListeners(type) {
        return __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").getTypeListeners(type);
      }
      getCommandToSend() {
        const toSend = __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").shift();
        if (!toSend)
          return;
        let encoded;
        try {
          encoded = (0, encoder_1.default)(toSend.args);
        } catch (err) {
          toSend.reject(err);
          return;
        }
        __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f").push({
          resolve: toSend.resolve,
          reject: toSend.reject,
          channelsCounter: toSend.channelsCounter,
          returnBuffers: toSend.returnBuffers
        });
        __classPrivateFieldSet(this, _RedisCommandsQueue_chainInExecution, toSend.chainId, "f");
        return encoded;
      }
      onReplyChunk(chunk) {
        __classPrivateFieldGet(this, _RedisCommandsQueue_decoder, "f").write(chunk);
      }
      flushWaitingForReply(err) {
        __classPrivateFieldGet(this, _RedisCommandsQueue_decoder, "f").reset();
        __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").reset();
        __classPrivateFieldGet(_a, _a, "m", _RedisCommandsQueue_flushQueue).call(_a, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f"), err);
        if (!__classPrivateFieldGet(this, _RedisCommandsQueue_chainInExecution, "f"))
          return;
        while (__classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").head?.value.chainId === __classPrivateFieldGet(this, _RedisCommandsQueue_chainInExecution, "f")) {
          __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").shift();
        }
        __classPrivateFieldSet(this, _RedisCommandsQueue_chainInExecution, void 0, "f");
      }
      flushAll(err) {
        __classPrivateFieldGet(this, _RedisCommandsQueue_decoder, "f").reset();
        __classPrivateFieldGet(this, _RedisCommandsQueue_pubSub, "f").reset();
        __classPrivateFieldGet(_a, _a, "m", _RedisCommandsQueue_flushQueue).call(_a, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingForReply, "f"), err);
        __classPrivateFieldGet(_a, _a, "m", _RedisCommandsQueue_flushQueue).call(_a, __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f"), err);
      }
    };
    _a = RedisCommandsQueue, _RedisCommandsQueue_maxLength = /* @__PURE__ */ new WeakMap(), _RedisCommandsQueue_waitingToBeSent = /* @__PURE__ */ new WeakMap(), _RedisCommandsQueue_waitingForReply = /* @__PURE__ */ new WeakMap(), _RedisCommandsQueue_onShardedChannelMoved = /* @__PURE__ */ new WeakMap(), _RedisCommandsQueue_pubSub = /* @__PURE__ */ new WeakMap(), _RedisCommandsQueue_chainInExecution = /* @__PURE__ */ new WeakMap(), _RedisCommandsQueue_decoder = /* @__PURE__ */ new WeakMap(), _RedisCommandsQueue_instances = /* @__PURE__ */ new WeakSet(), _RedisCommandsQueue_flushQueue = function _RedisCommandsQueue_flushQueue2(queue, err) {
      while (queue.length) {
        queue.shift().reject(err);
      }
    }, _RedisCommandsQueue_pushPubSubCommand = function _RedisCommandsQueue_pushPubSubCommand2(command) {
      if (command === void 0)
        return;
      return new Promise((resolve, reject) => {
        __classPrivateFieldGet(this, _RedisCommandsQueue_waitingToBeSent, "f").push({
          args: command.args,
          channelsCounter: command.channelsCounter,
          returnBuffers: true,
          resolve: () => {
            command.resolve();
            resolve();
          },
          reject: (err) => {
            command.reject?.();
            reject(err);
          }
        });
      });
    };
    exports2.default = RedisCommandsQueue;
  }
});

// node_modules/@redis/client/dist/lib/command-options.js
var require_command_options = __commonJS({
  "node_modules/@redis/client/dist/lib/command-options.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isCommandOptions = exports2.commandOptions = void 0;
    var symbol = Symbol("Command Options");
    function commandOptions(options2) {
      options2[symbol] = true;
      return options2;
    }
    exports2.commandOptions = commandOptions;
    function isCommandOptions(options2) {
      return options2?.[symbol] === true;
    }
    exports2.isCommandOptions = isCommandOptions;
  }
});

// node_modules/@redis/client/dist/lib/commander.js
var require_commander = __commonJS({
  "node_modules/@redis/client/dist/lib/commander.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fCallArguments = exports2.transformCommandReply = exports2.transformLegacyCommandArguments = exports2.transformCommandArguments = exports2.attachExtensions = exports2.attachCommands = void 0;
    var command_options_1 = require_command_options();
    function attachCommands({ BaseClass, commands, executor }) {
      for (const [name, command] of Object.entries(commands)) {
        BaseClass.prototype[name] = function(...args) {
          return executor.call(this, command, args, name);
        };
      }
    }
    exports2.attachCommands = attachCommands;
    function attachExtensions(config) {
      let Commander;
      if (config.modules) {
        Commander = attachWithNamespaces({
          BaseClass: config.BaseClass,
          namespaces: config.modules,
          executor: config.modulesExecutor
        });
      }
      if (config.functions) {
        Commander = attachWithNamespaces({
          BaseClass: Commander ?? config.BaseClass,
          namespaces: config.functions,
          executor: config.functionsExecutor
        });
      }
      if (config.scripts) {
        Commander ?? (Commander = class extends config.BaseClass {
        });
        attachCommands({
          BaseClass: Commander,
          commands: config.scripts,
          executor: config.scriptsExecutor
        });
      }
      return Commander ?? config.BaseClass;
    }
    exports2.attachExtensions = attachExtensions;
    function attachWithNamespaces({ BaseClass, namespaces, executor }) {
      const Commander = class extends BaseClass {
        constructor(...args) {
          super(...args);
          for (const namespace of Object.keys(namespaces)) {
            this[namespace] = Object.create(this[namespace], {
              self: {
                value: this
              }
            });
          }
        }
      };
      for (const [namespace, commands] of Object.entries(namespaces)) {
        Commander.prototype[namespace] = {};
        for (const [name, command] of Object.entries(commands)) {
          Commander.prototype[namespace][name] = function(...args) {
            return executor.call(this.self, command, args, name);
          };
        }
      }
      return Commander;
    }
    function transformCommandArguments(command, args) {
      let options2;
      if ((0, command_options_1.isCommandOptions)(args[0])) {
        options2 = args[0];
        args = args.slice(1);
      }
      return {
        jsArgs: args,
        args: command.transformArguments(...args),
        options: options2
      };
    }
    exports2.transformCommandArguments = transformCommandArguments;
    function transformLegacyCommandArguments(args) {
      return args.flat().map((arg) => {
        return typeof arg === "number" || arg instanceof Date ? arg.toString() : arg;
      });
    }
    exports2.transformLegacyCommandArguments = transformLegacyCommandArguments;
    function transformCommandReply(command, rawReply, preserved) {
      if (!command.transformReply) {
        return rawReply;
      }
      return command.transformReply(rawReply, preserved);
    }
    exports2.transformCommandReply = transformCommandReply;
    function fCallArguments(name, fn, args) {
      const actualArgs = [
        fn.IS_READ_ONLY ? "FCALL_RO" : "FCALL",
        name
      ];
      if (fn.NUMBER_OF_KEYS !== void 0) {
        actualArgs.push(fn.NUMBER_OF_KEYS.toString());
      }
      actualArgs.push(...args);
      return actualArgs;
    }
    exports2.fCallArguments = fCallArguments;
  }
});

// node_modules/@redis/client/dist/lib/multi-command.js
var require_multi_command = __commonJS({
  "node_modules/@redis/client/dist/lib/multi-command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var commander_1 = require_commander();
    var errors_1 = require_errors2();
    var RedisMultiCommand = class {
      constructor() {
        Object.defineProperty(this, "queue", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: []
        });
        Object.defineProperty(this, "scriptsInUse", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: /* @__PURE__ */ new Set()
        });
      }
      static generateChainId() {
        return Symbol("RedisMultiCommand Chain Id");
      }
      addCommand(args, transformReply) {
        this.queue.push({
          args,
          transformReply
        });
      }
      addFunction(name, fn, args) {
        const transformedArguments = (0, commander_1.fCallArguments)(name, fn, fn.transformArguments(...args));
        this.queue.push({
          args: transformedArguments,
          transformReply: fn.transformReply
        });
        return transformedArguments;
      }
      addScript(script, args) {
        const transformedArguments = [];
        if (this.scriptsInUse.has(script.SHA1)) {
          transformedArguments.push("EVALSHA", script.SHA1);
        } else {
          this.scriptsInUse.add(script.SHA1);
          transformedArguments.push("EVAL", script.SCRIPT);
        }
        if (script.NUMBER_OF_KEYS !== void 0) {
          transformedArguments.push(script.NUMBER_OF_KEYS.toString());
        }
        const scriptArguments = script.transformArguments(...args);
        transformedArguments.push(...scriptArguments);
        if (scriptArguments.preserve) {
          transformedArguments.preserve = scriptArguments.preserve;
        }
        this.addCommand(transformedArguments, script.transformReply);
        return transformedArguments;
      }
      handleExecReplies(rawReplies) {
        const execReply = rawReplies[rawReplies.length - 1];
        if (execReply === null) {
          throw new errors_1.WatchError();
        }
        return this.transformReplies(execReply);
      }
      transformReplies(rawReplies) {
        const errorIndexes = [], replies = rawReplies.map((reply, i) => {
          if (reply instanceof errors_1.ErrorReply) {
            errorIndexes.push(i);
            return reply;
          }
          const { transformReply, args } = this.queue[i];
          return transformReply ? transformReply(reply, args.preserve) : reply;
        });
        if (errorIndexes.length)
          throw new errors_1.MultiErrorReply(replies, errorIndexes);
        return replies;
      }
    };
    exports2.default = RedisMultiCommand;
  }
});

// node_modules/@redis/client/dist/lib/client/multi-command.js
var require_multi_command2 = __commonJS({
  "node_modules/@redis/client/dist/lib/client/multi-command.js"(exports2) {
    "use strict";
    var __classPrivateFieldSet = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _RedisClientMultiCommand_instances;
    var _RedisClientMultiCommand_multi;
    var _RedisClientMultiCommand_executor;
    var _RedisClientMultiCommand_selectedDB;
    var _RedisClientMultiCommand_legacyMode;
    var _RedisClientMultiCommand_defineLegacyCommand;
    Object.defineProperty(exports2, "__esModule", { value: true });
    var commands_1 = require_commands2();
    var multi_command_1 = require_multi_command();
    var commander_1 = require_commander();
    var RedisClientMultiCommand = class _RedisClientMultiCommand {
      static extend(extensions) {
        return (0, commander_1.attachExtensions)({
          BaseClass: _RedisClientMultiCommand,
          modulesExecutor: _RedisClientMultiCommand.prototype.commandsExecutor,
          modules: extensions?.modules,
          functionsExecutor: _RedisClientMultiCommand.prototype.functionsExecutor,
          functions: extensions?.functions,
          scriptsExecutor: _RedisClientMultiCommand.prototype.scriptsExecutor,
          scripts: extensions?.scripts
        });
      }
      constructor(executor, legacyMode = false) {
        _RedisClientMultiCommand_instances.add(this);
        _RedisClientMultiCommand_multi.set(this, new multi_command_1.default());
        _RedisClientMultiCommand_executor.set(this, void 0);
        Object.defineProperty(this, "v4", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: {}
        });
        _RedisClientMultiCommand_selectedDB.set(this, void 0);
        Object.defineProperty(this, "select", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.SELECT
        });
        Object.defineProperty(this, "EXEC", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.exec
        });
        __classPrivateFieldSet(this, _RedisClientMultiCommand_executor, executor, "f");
        if (legacyMode) {
          __classPrivateFieldGet(this, _RedisClientMultiCommand_instances, "m", _RedisClientMultiCommand_legacyMode).call(this);
        }
      }
      commandsExecutor(command, args) {
        return this.addCommand(command.transformArguments(...args), command.transformReply);
      }
      SELECT(db, transformReply) {
        __classPrivateFieldSet(this, _RedisClientMultiCommand_selectedDB, db, "f");
        return this.addCommand(["SELECT", db.toString()], transformReply);
      }
      addCommand(args, transformReply) {
        __classPrivateFieldGet(this, _RedisClientMultiCommand_multi, "f").addCommand(args, transformReply);
        return this;
      }
      functionsExecutor(fn, args, name) {
        __classPrivateFieldGet(this, _RedisClientMultiCommand_multi, "f").addFunction(name, fn, args);
        return this;
      }
      scriptsExecutor(script, args) {
        __classPrivateFieldGet(this, _RedisClientMultiCommand_multi, "f").addScript(script, args);
        return this;
      }
      async exec(execAsPipeline = false) {
        if (execAsPipeline) {
          return this.execAsPipeline();
        }
        return __classPrivateFieldGet(this, _RedisClientMultiCommand_multi, "f").handleExecReplies(await __classPrivateFieldGet(this, _RedisClientMultiCommand_executor, "f").call(this, __classPrivateFieldGet(this, _RedisClientMultiCommand_multi, "f").queue, __classPrivateFieldGet(this, _RedisClientMultiCommand_selectedDB, "f"), multi_command_1.default.generateChainId()));
      }
      async execAsPipeline() {
        if (__classPrivateFieldGet(this, _RedisClientMultiCommand_multi, "f").queue.length === 0)
          return [];
        return __classPrivateFieldGet(this, _RedisClientMultiCommand_multi, "f").transformReplies(await __classPrivateFieldGet(this, _RedisClientMultiCommand_executor, "f").call(this, __classPrivateFieldGet(this, _RedisClientMultiCommand_multi, "f").queue, __classPrivateFieldGet(this, _RedisClientMultiCommand_selectedDB, "f")));
      }
    };
    _RedisClientMultiCommand_multi = /* @__PURE__ */ new WeakMap(), _RedisClientMultiCommand_executor = /* @__PURE__ */ new WeakMap(), _RedisClientMultiCommand_selectedDB = /* @__PURE__ */ new WeakMap(), _RedisClientMultiCommand_instances = /* @__PURE__ */ new WeakSet(), _RedisClientMultiCommand_legacyMode = function _RedisClientMultiCommand_legacyMode2() {
      var _a, _b;
      this.v4.addCommand = this.addCommand.bind(this);
      this.addCommand = (...args) => {
        __classPrivateFieldGet(this, _RedisClientMultiCommand_multi, "f").addCommand((0, commander_1.transformLegacyCommandArguments)(args));
        return this;
      };
      this.v4.exec = this.exec.bind(this);
      this.exec = (callback) => {
        this.v4.exec().then((reply) => {
          if (!callback)
            return;
          callback(null, reply);
        }).catch((err) => {
          if (!callback) {
            return;
          }
          callback(err);
        });
      };
      for (const [name, command] of Object.entries(commands_1.default)) {
        __classPrivateFieldGet(this, _RedisClientMultiCommand_instances, "m", _RedisClientMultiCommand_defineLegacyCommand).call(this, name, command);
        (_a = this)[_b = name.toLowerCase()] ?? (_a[_b] = this[name]);
      }
    }, _RedisClientMultiCommand_defineLegacyCommand = function _RedisClientMultiCommand_defineLegacyCommand2(name, command) {
      this.v4[name] = this[name].bind(this.v4);
      this[name] = command && command.TRANSFORM_LEGACY_REPLY && command.transformReply ? (...args) => {
        __classPrivateFieldGet(this, _RedisClientMultiCommand_multi, "f").addCommand([name, ...(0, commander_1.transformLegacyCommandArguments)(args)], command.transformReply);
        return this;
      } : (...args) => this.addCommand(name, ...args);
    };
    exports2.default = RedisClientMultiCommand;
    (0, commander_1.attachCommands)({
      BaseClass: RedisClientMultiCommand,
      commands: commands_1.default,
      executor: RedisClientMultiCommand.prototype.commandsExecutor
    });
  }
});

// node_modules/generic-pool/lib/factoryValidator.js
var require_factoryValidator = __commonJS({
  "node_modules/generic-pool/lib/factoryValidator.js"(exports2, module2) {
    module2.exports = function(factory) {
      if (typeof factory.create !== "function") {
        throw new TypeError("factory.create must be a function");
      }
      if (typeof factory.destroy !== "function") {
        throw new TypeError("factory.destroy must be a function");
      }
      if (typeof factory.validate !== "undefined" && typeof factory.validate !== "function") {
        throw new TypeError("factory.validate must be a function");
      }
    };
  }
});

// node_modules/generic-pool/lib/PoolDefaults.js
var require_PoolDefaults = __commonJS({
  "node_modules/generic-pool/lib/PoolDefaults.js"(exports2, module2) {
    "use strict";
    var PoolDefaults = class {
      constructor() {
        this.fifo = true;
        this.priorityRange = 1;
        this.testOnBorrow = false;
        this.testOnReturn = false;
        this.autostart = true;
        this.evictionRunIntervalMillis = 0;
        this.numTestsPerEvictionRun = 3;
        this.softIdleTimeoutMillis = -1;
        this.idleTimeoutMillis = 3e4;
        this.acquireTimeoutMillis = null;
        this.destroyTimeoutMillis = null;
        this.maxWaitingClients = null;
        this.min = null;
        this.max = null;
        this.Promise = Promise;
      }
    };
    module2.exports = PoolDefaults;
  }
});

// node_modules/generic-pool/lib/PoolOptions.js
var require_PoolOptions = __commonJS({
  "node_modules/generic-pool/lib/PoolOptions.js"(exports2, module2) {
    "use strict";
    var PoolDefaults = require_PoolDefaults();
    var PoolOptions = class {
      /**
       * @param {Object} opts
       *   configuration for the pool
       * @param {Number} [opts.max=null]
       *   Maximum number of items that can exist at the same time.  Default: 1.
       *   Any further acquire requests will be pushed to the waiting list.
       * @param {Number} [opts.min=null]
       *   Minimum number of items in pool (including in-use). Default: 0.
       *   When the pool is created, or a resource destroyed, this minimum will
       *   be checked. If the pool resource count is below the minimum, a new
       *   resource will be created and added to the pool.
       * @param {Number} [opts.maxWaitingClients=null]
       *   maximum number of queued requests allowed after which acquire calls will be rejected
       * @param {Boolean} [opts.testOnBorrow=false]
       *   should the pool validate resources before giving them to clients. Requires that
       *   `factory.validate` is specified.
       * @param {Boolean} [opts.testOnReturn=false]
       *   should the pool validate resources before returning them to the pool.
       * @param {Number} [opts.acquireTimeoutMillis=null]
       *   Delay in milliseconds after which the an `acquire` call will fail. optional.
       *   Default: undefined. Should be positive and non-zero
       * @param {Number} [opts.destroyTimeoutMillis=null]
       *   Delay in milliseconds after which the an `destroy` call will fail, causing it to emit a factoryDestroyError event. optional.
       *   Default: undefined. Should be positive and non-zero
       * @param {Number} [opts.priorityRange=1]
       *   The range from 1 to be treated as a valid priority
       * @param {Boolean} [opts.fifo=true]
       *   Sets whether the pool has LIFO (last in, first out) behaviour with respect to idle objects.
       *   if false then pool has FIFO behaviour
       * @param {Boolean} [opts.autostart=true]
       *   Should the pool start creating resources etc once the constructor is called
       * @param {Number} [opts.evictionRunIntervalMillis=0]
       *   How often to run eviction checks.  Default: 0 (does not run).
       * @param {Number} [opts.numTestsPerEvictionRun=3]
       *   Number of resources to check each eviction run.  Default: 3.
       * @param {Number} [opts.softIdleTimeoutMillis=-1]
       *   amount of time an object may sit idle in the pool before it is eligible
       *   for eviction by the idle object evictor (if any), with the extra condition
       *   that at least "min idle" object instances remain in the pool. Default -1 (nothing can get evicted)
       * @param {Number} [opts.idleTimeoutMillis=30000]
       *   the minimum amount of time that an object may sit idle in the pool before it is eligible for eviction
       *   due to idle time. Supercedes "softIdleTimeoutMillis" Default: 30000
       * @param {typeof Promise} [opts.Promise=Promise]
       *   What promise implementation should the pool use, defaults to native promises.
       */
      constructor(opts) {
        const poolDefaults = new PoolDefaults();
        opts = opts || {};
        this.fifo = typeof opts.fifo === "boolean" ? opts.fifo : poolDefaults.fifo;
        this.priorityRange = opts.priorityRange || poolDefaults.priorityRange;
        this.testOnBorrow = typeof opts.testOnBorrow === "boolean" ? opts.testOnBorrow : poolDefaults.testOnBorrow;
        this.testOnReturn = typeof opts.testOnReturn === "boolean" ? opts.testOnReturn : poolDefaults.testOnReturn;
        this.autostart = typeof opts.autostart === "boolean" ? opts.autostart : poolDefaults.autostart;
        if (opts.acquireTimeoutMillis) {
          this.acquireTimeoutMillis = parseInt(opts.acquireTimeoutMillis, 10);
        }
        if (opts.destroyTimeoutMillis) {
          this.destroyTimeoutMillis = parseInt(opts.destroyTimeoutMillis, 10);
        }
        if (opts.maxWaitingClients !== void 0) {
          this.maxWaitingClients = parseInt(opts.maxWaitingClients, 10);
        }
        this.max = parseInt(opts.max, 10);
        this.min = parseInt(opts.min, 10);
        this.max = Math.max(isNaN(this.max) ? 1 : this.max, 1);
        this.min = Math.min(isNaN(this.min) ? 0 : this.min, this.max);
        this.evictionRunIntervalMillis = opts.evictionRunIntervalMillis || poolDefaults.evictionRunIntervalMillis;
        this.numTestsPerEvictionRun = opts.numTestsPerEvictionRun || poolDefaults.numTestsPerEvictionRun;
        this.softIdleTimeoutMillis = opts.softIdleTimeoutMillis || poolDefaults.softIdleTimeoutMillis;
        this.idleTimeoutMillis = opts.idleTimeoutMillis || poolDefaults.idleTimeoutMillis;
        this.Promise = opts.Promise != null ? opts.Promise : poolDefaults.Promise;
      }
    };
    module2.exports = PoolOptions;
  }
});

// node_modules/generic-pool/lib/Deferred.js
var require_Deferred = __commonJS({
  "node_modules/generic-pool/lib/Deferred.js"(exports2, module2) {
    "use strict";
    var Deferred = class _Deferred {
      constructor(Promise2) {
        this._state = _Deferred.PENDING;
        this._resolve = void 0;
        this._reject = void 0;
        this._promise = new Promise2((resolve, reject) => {
          this._resolve = resolve;
          this._reject = reject;
        });
      }
      get state() {
        return this._state;
      }
      get promise() {
        return this._promise;
      }
      reject(reason) {
        if (this._state !== _Deferred.PENDING) {
          return;
        }
        this._state = _Deferred.REJECTED;
        this._reject(reason);
      }
      resolve(value) {
        if (this._state !== _Deferred.PENDING) {
          return;
        }
        this._state = _Deferred.FULFILLED;
        this._resolve(value);
      }
    };
    Deferred.PENDING = "PENDING";
    Deferred.FULFILLED = "FULFILLED";
    Deferred.REJECTED = "REJECTED";
    module2.exports = Deferred;
  }
});

// node_modules/generic-pool/lib/errors.js
var require_errors3 = __commonJS({
  "node_modules/generic-pool/lib/errors.js"(exports2, module2) {
    "use strict";
    var ExtendableError = class extends Error {
      constructor(message) {
        super(message);
        this.name = this.constructor.name;
        this.message = message;
        if (typeof Error.captureStackTrace === "function") {
          Error.captureStackTrace(this, this.constructor);
        } else {
          this.stack = new Error(message).stack;
        }
      }
    };
    var TimeoutError = class extends ExtendableError {
      constructor(m) {
        super(m);
      }
    };
    module2.exports = {
      TimeoutError
    };
  }
});

// node_modules/generic-pool/lib/ResourceRequest.js
var require_ResourceRequest = __commonJS({
  "node_modules/generic-pool/lib/ResourceRequest.js"(exports2, module2) {
    "use strict";
    var Deferred = require_Deferred();
    var errors = require_errors3();
    function fbind(fn, ctx) {
      return function bound() {
        return fn.apply(ctx, arguments);
      };
    }
    var ResourceRequest = class _ResourceRequest extends Deferred {
      /**
       * [constructor description]
       * @param  {Number} ttl     timeout
       */
      constructor(ttl, Promise2) {
        super(Promise2);
        this._creationTimestamp = Date.now();
        this._timeout = null;
        if (ttl !== void 0) {
          this.setTimeout(ttl);
        }
      }
      setTimeout(delay) {
        if (this._state !== _ResourceRequest.PENDING) {
          return;
        }
        const ttl = parseInt(delay, 10);
        if (isNaN(ttl) || ttl <= 0) {
          throw new Error("delay must be a positive int");
        }
        const age = Date.now() - this._creationTimestamp;
        if (this._timeout) {
          this.removeTimeout();
        }
        this._timeout = setTimeout(
          fbind(this._fireTimeout, this),
          Math.max(ttl - age, 0)
        );
      }
      removeTimeout() {
        if (this._timeout) {
          clearTimeout(this._timeout);
        }
        this._timeout = null;
      }
      _fireTimeout() {
        this.reject(new errors.TimeoutError("ResourceRequest timed out"));
      }
      reject(reason) {
        this.removeTimeout();
        super.reject(reason);
      }
      resolve(value) {
        this.removeTimeout();
        super.resolve(value);
      }
    };
    module2.exports = ResourceRequest;
  }
});

// node_modules/generic-pool/lib/ResourceLoan.js
var require_ResourceLoan = __commonJS({
  "node_modules/generic-pool/lib/ResourceLoan.js"(exports2, module2) {
    "use strict";
    var Deferred = require_Deferred();
    var ResourceLoan = class extends Deferred {
      /**
       *
       * @param  {any} pooledResource the PooledResource this loan belongs to
       * @return {any}                [description]
       */
      constructor(pooledResource, Promise2) {
        super(Promise2);
        this._creationTimestamp = Date.now();
        this.pooledResource = pooledResource;
      }
      reject() {
      }
    };
    module2.exports = ResourceLoan;
  }
});

// node_modules/generic-pool/lib/PooledResourceStateEnum.js
var require_PooledResourceStateEnum = __commonJS({
  "node_modules/generic-pool/lib/PooledResourceStateEnum.js"(exports2, module2) {
    "use strict";
    var PooledResourceStateEnum = {
      ALLOCATED: "ALLOCATED",
      // In use
      IDLE: "IDLE",
      // In the queue, not in use.
      INVALID: "INVALID",
      // Failed validation
      RETURNING: "RETURNING",
      // Resource is in process of returning
      VALIDATION: "VALIDATION"
      // Currently being tested
    };
    module2.exports = PooledResourceStateEnum;
  }
});

// node_modules/generic-pool/lib/PooledResource.js
var require_PooledResource = __commonJS({
  "node_modules/generic-pool/lib/PooledResource.js"(exports2, module2) {
    "use strict";
    var PooledResourceStateEnum = require_PooledResourceStateEnum();
    var PooledResource = class {
      constructor(resource) {
        this.creationTime = Date.now();
        this.lastReturnTime = null;
        this.lastBorrowTime = null;
        this.lastIdleTime = null;
        this.obj = resource;
        this.state = PooledResourceStateEnum.IDLE;
      }
      // mark the resource as "allocated"
      allocate() {
        this.lastBorrowTime = Date.now();
        this.state = PooledResourceStateEnum.ALLOCATED;
      }
      // mark the resource as "deallocated"
      deallocate() {
        this.lastReturnTime = Date.now();
        this.state = PooledResourceStateEnum.IDLE;
      }
      invalidate() {
        this.state = PooledResourceStateEnum.INVALID;
      }
      test() {
        this.state = PooledResourceStateEnum.VALIDATION;
      }
      idle() {
        this.lastIdleTime = Date.now();
        this.state = PooledResourceStateEnum.IDLE;
      }
      returning() {
        this.state = PooledResourceStateEnum.RETURNING;
      }
    };
    module2.exports = PooledResource;
  }
});

// node_modules/generic-pool/lib/DefaultEvictor.js
var require_DefaultEvictor = __commonJS({
  "node_modules/generic-pool/lib/DefaultEvictor.js"(exports2, module2) {
    "use strict";
    var DefaultEvictor = class {
      evict(config, pooledResource, availableObjectsCount) {
        const idleTime = Date.now() - pooledResource.lastIdleTime;
        if (config.softIdleTimeoutMillis > 0 && config.softIdleTimeoutMillis < idleTime && config.min < availableObjectsCount) {
          return true;
        }
        if (config.idleTimeoutMillis < idleTime) {
          return true;
        }
        return false;
      }
    };
    module2.exports = DefaultEvictor;
  }
});

// node_modules/generic-pool/lib/DoublyLinkedList.js
var require_DoublyLinkedList = __commonJS({
  "node_modules/generic-pool/lib/DoublyLinkedList.js"(exports2, module2) {
    "use strict";
    var DoublyLinkedList = class {
      constructor() {
        this.head = null;
        this.tail = null;
        this.length = 0;
      }
      insertBeginning(node) {
        if (this.head === null) {
          this.head = node;
          this.tail = node;
          node.prev = null;
          node.next = null;
          this.length++;
        } else {
          this.insertBefore(this.head, node);
        }
      }
      insertEnd(node) {
        if (this.tail === null) {
          this.insertBeginning(node);
        } else {
          this.insertAfter(this.tail, node);
        }
      }
      insertAfter(node, newNode) {
        newNode.prev = node;
        newNode.next = node.next;
        if (node.next === null) {
          this.tail = newNode;
        } else {
          node.next.prev = newNode;
        }
        node.next = newNode;
        this.length++;
      }
      insertBefore(node, newNode) {
        newNode.prev = node.prev;
        newNode.next = node;
        if (node.prev === null) {
          this.head = newNode;
        } else {
          node.prev.next = newNode;
        }
        node.prev = newNode;
        this.length++;
      }
      remove(node) {
        if (node.prev === null) {
          this.head = node.next;
        } else {
          node.prev.next = node.next;
        }
        if (node.next === null) {
          this.tail = node.prev;
        } else {
          node.next.prev = node.prev;
        }
        node.prev = null;
        node.next = null;
        this.length--;
      }
      // FIXME: this should not live here and has become a dumping ground...
      static createNode(data) {
        return {
          prev: null,
          next: null,
          data
        };
      }
    };
    module2.exports = DoublyLinkedList;
  }
});

// node_modules/generic-pool/lib/DoublyLinkedListIterator.js
var require_DoublyLinkedListIterator = __commonJS({
  "node_modules/generic-pool/lib/DoublyLinkedListIterator.js"(exports2, module2) {
    "use strict";
    var DoublyLinkedListIterator = class {
      /**
       * @param  {Object} doublyLinkedList     a node that is part of a doublyLinkedList
       * @param  {Boolean} [reverse=false]     is this a reverse iterator? default: false
       */
      constructor(doublyLinkedList, reverse) {
        this._list = doublyLinkedList;
        this._direction = reverse === true ? "prev" : "next";
        this._startPosition = reverse === true ? "tail" : "head";
        this._started = false;
        this._cursor = null;
        this._done = false;
      }
      _start() {
        this._cursor = this._list[this._startPosition];
        this._started = true;
      }
      _advanceCursor() {
        if (this._started === false) {
          this._started = true;
          this._cursor = this._list[this._startPosition];
          return;
        }
        this._cursor = this._cursor[this._direction];
      }
      reset() {
        this._done = false;
        this._started = false;
        this._cursor = null;
      }
      remove() {
        if (this._started === false || this._done === true || this._isCursorDetached()) {
          return false;
        }
        this._list.remove(this._cursor);
      }
      next() {
        if (this._done === true) {
          return { done: true };
        }
        this._advanceCursor();
        if (this._cursor === null || this._isCursorDetached()) {
          this._done = true;
          return { done: true };
        }
        return {
          value: this._cursor,
          done: false
        };
      }
      /**
       * Is the node detached from a list?
       * NOTE: you can trick/bypass/confuse this check by removing a node from one DoublyLinkedList
       * and adding it to another.
       * TODO: We can make this smarter by checking the direction of travel and only checking
       * the required next/prev/head/tail rather than all of them
       * @return {Boolean}      [description]
       */
      _isCursorDetached() {
        return this._cursor.prev === null && this._cursor.next === null && this._list.tail !== this._cursor && this._list.head !== this._cursor;
      }
    };
    module2.exports = DoublyLinkedListIterator;
  }
});

// node_modules/generic-pool/lib/DequeIterator.js
var require_DequeIterator = __commonJS({
  "node_modules/generic-pool/lib/DequeIterator.js"(exports2, module2) {
    "use strict";
    var DoublyLinkedListIterator = require_DoublyLinkedListIterator();
    var DequeIterator = class extends DoublyLinkedListIterator {
      next() {
        const result = super.next();
        if (result.value) {
          result.value = result.value.data;
        }
        return result;
      }
    };
    module2.exports = DequeIterator;
  }
});

// node_modules/generic-pool/lib/Deque.js
var require_Deque = __commonJS({
  "node_modules/generic-pool/lib/Deque.js"(exports2, module2) {
    "use strict";
    var DoublyLinkedList = require_DoublyLinkedList();
    var DequeIterator = require_DequeIterator();
    var Deque = class {
      constructor() {
        this._list = new DoublyLinkedList();
      }
      /**
       * removes and returns the first element from the queue
       * @return {any} [description]
       */
      shift() {
        if (this.length === 0) {
          return void 0;
        }
        const node = this._list.head;
        this._list.remove(node);
        return node.data;
      }
      /**
       * adds one elemts to the beginning of the queue
       * @param  {any} element [description]
       * @return {any}         [description]
       */
      unshift(element) {
        const node = DoublyLinkedList.createNode(element);
        this._list.insertBeginning(node);
      }
      /**
       * adds one to the end of the queue
       * @param  {any} element [description]
       * @return {any}         [description]
       */
      push(element) {
        const node = DoublyLinkedList.createNode(element);
        this._list.insertEnd(node);
      }
      /**
       * removes and returns the last element from the queue
       */
      pop() {
        if (this.length === 0) {
          return void 0;
        }
        const node = this._list.tail;
        this._list.remove(node);
        return node.data;
      }
      [Symbol.iterator]() {
        return new DequeIterator(this._list);
      }
      iterator() {
        return new DequeIterator(this._list);
      }
      reverseIterator() {
        return new DequeIterator(this._list, true);
      }
      /**
       * get a reference to the item at the head of the queue
       * @return {any} [description]
       */
      get head() {
        if (this.length === 0) {
          return void 0;
        }
        const node = this._list.head;
        return node.data;
      }
      /**
       * get a reference to the item at the tail of the queue
       * @return {any} [description]
       */
      get tail() {
        if (this.length === 0) {
          return void 0;
        }
        const node = this._list.tail;
        return node.data;
      }
      get length() {
        return this._list.length;
      }
    };
    module2.exports = Deque;
  }
});

// node_modules/generic-pool/lib/Queue.js
var require_Queue = __commonJS({
  "node_modules/generic-pool/lib/Queue.js"(exports2, module2) {
    "use strict";
    var DoublyLinkedList = require_DoublyLinkedList();
    var Deque = require_Deque();
    var Queue = class extends Deque {
      /**
       * Adds the obj to the end of the list for this slot
       * we completely override the parent method because we need access to the
       * node for our rejection handler
       * @param {any} resourceRequest [description]
       */
      push(resourceRequest) {
        const node = DoublyLinkedList.createNode(resourceRequest);
        resourceRequest.promise.catch(this._createTimeoutRejectionHandler(node));
        this._list.insertEnd(node);
      }
      _createTimeoutRejectionHandler(node) {
        return (reason) => {
          if (reason.name === "TimeoutError") {
            this._list.remove(node);
          }
        };
      }
    };
    module2.exports = Queue;
  }
});

// node_modules/generic-pool/lib/PriorityQueue.js
var require_PriorityQueue = __commonJS({
  "node_modules/generic-pool/lib/PriorityQueue.js"(exports2, module2) {
    "use strict";
    var Queue = require_Queue();
    var PriorityQueue = class {
      constructor(size) {
        this._size = Math.max(+size | 0, 1);
        this._slots = [];
        for (let i = 0; i < this._size; i++) {
          this._slots.push(new Queue());
        }
      }
      get length() {
        let _length = 0;
        for (let i = 0, slots = this._slots.length; i < slots; i++) {
          _length += this._slots[i].length;
        }
        return _length;
      }
      enqueue(obj, priority) {
        priority = priority && +priority | 0 || 0;
        if (priority) {
          if (priority < 0 || priority >= this._size) {
            priority = this._size - 1;
          }
        }
        this._slots[priority].push(obj);
      }
      dequeue() {
        for (let i = 0, sl = this._slots.length; i < sl; i += 1) {
          if (this._slots[i].length) {
            return this._slots[i].shift();
          }
        }
        return;
      }
      get head() {
        for (let i = 0, sl = this._slots.length; i < sl; i += 1) {
          if (this._slots[i].length > 0) {
            return this._slots[i].head;
          }
        }
        return;
      }
      get tail() {
        for (let i = this._slots.length - 1; i >= 0; i--) {
          if (this._slots[i].length > 0) {
            return this._slots[i].tail;
          }
        }
        return;
      }
    };
    module2.exports = PriorityQueue;
  }
});

// node_modules/generic-pool/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/generic-pool/lib/utils.js"(exports2) {
    "use strict";
    function noop() {
    }
    exports2.reflector = function(promise) {
      return promise.then(noop, noop);
    };
  }
});

// node_modules/generic-pool/lib/Pool.js
var require_Pool = __commonJS({
  "node_modules/generic-pool/lib/Pool.js"(exports2, module2) {
    "use strict";
    var EventEmitter = require("events").EventEmitter;
    var factoryValidator = require_factoryValidator();
    var PoolOptions = require_PoolOptions();
    var ResourceRequest = require_ResourceRequest();
    var ResourceLoan = require_ResourceLoan();
    var PooledResource = require_PooledResource();
    var DefaultEvictor = require_DefaultEvictor();
    var Deque = require_Deque();
    var Deferred = require_Deferred();
    var PriorityQueue = require_PriorityQueue();
    var DequeIterator = require_DequeIterator();
    var reflector = require_utils2().reflector;
    var FACTORY_CREATE_ERROR = "factoryCreateError";
    var FACTORY_DESTROY_ERROR = "factoryDestroyError";
    var Pool = class extends EventEmitter {
      /**
       * Generate an Object pool with a specified `factory` and `config`.
       *
       * @param {typeof DefaultEvictor} Evictor
       * @param {typeof Deque} Deque
       * @param {typeof PriorityQueue} PriorityQueue
       * @param {Object} factory
       *   Factory to be used for generating and destroying the items.
       * @param {Function} factory.create
       *   Should create the item to be acquired,
       *   and call it's first callback argument with the generated item as it's argument.
       * @param {Function} factory.destroy
       *   Should gently close any resources that the item is using.
       *   Called before the items is destroyed.
       * @param {Function} factory.validate
       *   Test if a resource is still valid .Should return a promise that resolves to a boolean, true if resource is still valid and false
       *   If it should be removed from pool.
       * @param {Object} options
       */
      constructor(Evictor, Deque2, PriorityQueue2, factory, options2) {
        super();
        factoryValidator(factory);
        this._config = new PoolOptions(options2);
        this._Promise = this._config.Promise;
        this._factory = factory;
        this._draining = false;
        this._started = false;
        this._waitingClientsQueue = new PriorityQueue2(this._config.priorityRange);
        this._factoryCreateOperations = /* @__PURE__ */ new Set();
        this._factoryDestroyOperations = /* @__PURE__ */ new Set();
        this._availableObjects = new Deque2();
        this._testOnBorrowResources = /* @__PURE__ */ new Set();
        this._testOnReturnResources = /* @__PURE__ */ new Set();
        this._validationOperations = /* @__PURE__ */ new Set();
        this._allObjects = /* @__PURE__ */ new Set();
        this._resourceLoans = /* @__PURE__ */ new Map();
        this._evictionIterator = this._availableObjects.iterator();
        this._evictor = new Evictor();
        this._scheduledEviction = null;
        if (this._config.autostart === true) {
          this.start();
        }
      }
      _destroy(pooledResource) {
        pooledResource.invalidate();
        this._allObjects.delete(pooledResource);
        const destroyPromise = this._factory.destroy(pooledResource.obj);
        const wrappedDestroyPromise = this._config.destroyTimeoutMillis ? this._Promise.resolve(this._applyDestroyTimeout(destroyPromise)) : this._Promise.resolve(destroyPromise);
        this._trackOperation(
          wrappedDestroyPromise,
          this._factoryDestroyOperations
        ).catch((reason) => {
          this.emit(FACTORY_DESTROY_ERROR, reason);
        });
        this._ensureMinimum();
      }
      _applyDestroyTimeout(promise) {
        const timeoutPromise = new this._Promise((resolve, reject) => {
          setTimeout(() => {
            reject(new Error("destroy timed out"));
          }, this._config.destroyTimeoutMillis).unref();
        });
        return this._Promise.race([timeoutPromise, promise]);
      }
      /**
       * Attempt to move an available resource into test and then onto a waiting client
       * @return {Boolean} could we move an available resource into test
       */
      _testOnBorrow() {
        if (this._availableObjects.length < 1) {
          return false;
        }
        const pooledResource = this._availableObjects.shift();
        pooledResource.test();
        this._testOnBorrowResources.add(pooledResource);
        const validationPromise = this._factory.validate(pooledResource.obj);
        const wrappedValidationPromise = this._Promise.resolve(validationPromise);
        this._trackOperation(
          wrappedValidationPromise,
          this._validationOperations
        ).then((isValid) => {
          this._testOnBorrowResources.delete(pooledResource);
          if (isValid === false) {
            pooledResource.invalidate();
            this._destroy(pooledResource);
            this._dispense();
            return;
          }
          this._dispatchPooledResourceToNextWaitingClient(pooledResource);
        });
        return true;
      }
      /**
       * Attempt to move an available resource to a waiting client
       * @return {Boolean} [description]
       */
      _dispatchResource() {
        if (this._availableObjects.length < 1) {
          return false;
        }
        const pooledResource = this._availableObjects.shift();
        this._dispatchPooledResourceToNextWaitingClient(pooledResource);
        return false;
      }
      /**
       * Attempt to resolve an outstanding resource request using an available resource from
       * the pool, or creating new ones
       *
       * @private
       */
      _dispense() {
        const numWaitingClients = this._waitingClientsQueue.length;
        if (numWaitingClients < 1) {
          return;
        }
        const resourceShortfall = numWaitingClients - this._potentiallyAllocableResourceCount;
        const actualNumberOfResourcesToCreate = Math.min(
          this.spareResourceCapacity,
          resourceShortfall
        );
        for (let i = 0; actualNumberOfResourcesToCreate > i; i++) {
          this._createResource();
        }
        if (this._config.testOnBorrow === true) {
          const desiredNumberOfResourcesToMoveIntoTest = numWaitingClients - this._testOnBorrowResources.size;
          const actualNumberOfResourcesToMoveIntoTest = Math.min(
            this._availableObjects.length,
            desiredNumberOfResourcesToMoveIntoTest
          );
          for (let i = 0; actualNumberOfResourcesToMoveIntoTest > i; i++) {
            this._testOnBorrow();
          }
        }
        if (this._config.testOnBorrow === false) {
          const actualNumberOfResourcesToDispatch = Math.min(
            this._availableObjects.length,
            numWaitingClients
          );
          for (let i = 0; actualNumberOfResourcesToDispatch > i; i++) {
            this._dispatchResource();
          }
        }
      }
      /**
       * Dispatches a pooledResource to the next waiting client (if any) else
       * puts the PooledResource back on the available list
       * @param  {PooledResource} pooledResource [description]
       * @return {Boolean}                [description]
       */
      _dispatchPooledResourceToNextWaitingClient(pooledResource) {
        const clientResourceRequest = this._waitingClientsQueue.dequeue();
        if (clientResourceRequest === void 0 || clientResourceRequest.state !== Deferred.PENDING) {
          this._addPooledResourceToAvailableObjects(pooledResource);
          return false;
        }
        const loan = new ResourceLoan(pooledResource, this._Promise);
        this._resourceLoans.set(pooledResource.obj, loan);
        pooledResource.allocate();
        clientResourceRequest.resolve(pooledResource.obj);
        return true;
      }
      /**
       * tracks on operation using given set
       * handles adding/removing from the set and resolve/rejects the value/reason
       * @param  {Promise} operation
       * @param  {Set} set       Set holding operations
       * @return {Promise}       Promise that resolves once operation has been removed from set
       */
      _trackOperation(operation, set) {
        set.add(operation);
        return operation.then(
          (v) => {
            set.delete(operation);
            return this._Promise.resolve(v);
          },
          (e) => {
            set.delete(operation);
            return this._Promise.reject(e);
          }
        );
      }
      /**
       * @private
       */
      _createResource() {
        const factoryPromise = this._factory.create();
        const wrappedFactoryPromise = this._Promise.resolve(factoryPromise).then((resource) => {
          const pooledResource = new PooledResource(resource);
          this._allObjects.add(pooledResource);
          this._addPooledResourceToAvailableObjects(pooledResource);
        });
        this._trackOperation(wrappedFactoryPromise, this._factoryCreateOperations).then(() => {
          this._dispense();
          return null;
        }).catch((reason) => {
          this.emit(FACTORY_CREATE_ERROR, reason);
          this._dispense();
        });
      }
      /**
       * @private
       */
      _ensureMinimum() {
        if (this._draining === true) {
          return;
        }
        const minShortfall = this._config.min - this._count;
        for (let i = 0; i < minShortfall; i++) {
          this._createResource();
        }
      }
      _evict() {
        const testsToRun = Math.min(
          this._config.numTestsPerEvictionRun,
          this._availableObjects.length
        );
        const evictionConfig = {
          softIdleTimeoutMillis: this._config.softIdleTimeoutMillis,
          idleTimeoutMillis: this._config.idleTimeoutMillis,
          min: this._config.min
        };
        for (let testsHaveRun = 0; testsHaveRun < testsToRun; ) {
          const iterationResult = this._evictionIterator.next();
          if (iterationResult.done === true && this._availableObjects.length < 1) {
            this._evictionIterator.reset();
            return;
          }
          if (iterationResult.done === true && this._availableObjects.length > 0) {
            this._evictionIterator.reset();
            continue;
          }
          const resource = iterationResult.value;
          const shouldEvict = this._evictor.evict(
            evictionConfig,
            resource,
            this._availableObjects.length
          );
          testsHaveRun++;
          if (shouldEvict === true) {
            this._evictionIterator.remove();
            this._destroy(resource);
          }
        }
      }
      _scheduleEvictorRun() {
        if (this._config.evictionRunIntervalMillis > 0) {
          this._scheduledEviction = setTimeout(() => {
            this._evict();
            this._scheduleEvictorRun();
          }, this._config.evictionRunIntervalMillis).unref();
        }
      }
      _descheduleEvictorRun() {
        if (this._scheduledEviction) {
          clearTimeout(this._scheduledEviction);
        }
        this._scheduledEviction = null;
      }
      start() {
        if (this._draining === true) {
          return;
        }
        if (this._started === true) {
          return;
        }
        this._started = true;
        this._scheduleEvictorRun();
        this._ensureMinimum();
      }
      /**
       * Request a new resource. The callback will be called,
       * when a new resource is available, passing the resource to the callback.
       * TODO: should we add a seperate "acquireWithPriority" function
       *
       * @param {Number} [priority=0]
       *   Optional.  Integer between 0 and (priorityRange - 1).  Specifies the priority
       *   of the caller if there are no available resources.  Lower numbers mean higher
       *   priority.
       *
       * @returns {Promise}
       */
      acquire(priority) {
        if (this._started === false && this._config.autostart === false) {
          this.start();
        }
        if (this._draining) {
          return this._Promise.reject(
            new Error("pool is draining and cannot accept work")
          );
        }
        if (this.spareResourceCapacity < 1 && this._availableObjects.length < 1 && this._config.maxWaitingClients !== void 0 && this._waitingClientsQueue.length >= this._config.maxWaitingClients) {
          return this._Promise.reject(
            new Error("max waitingClients count exceeded")
          );
        }
        const resourceRequest = new ResourceRequest(
          this._config.acquireTimeoutMillis,
          this._Promise
        );
        this._waitingClientsQueue.enqueue(resourceRequest, priority);
        this._dispense();
        return resourceRequest.promise;
      }
      /**
       * [use method, aquires a resource, passes the resource to a user supplied function and releases it]
       * @param  {Function} fn [a function that accepts a resource and returns a promise that resolves/rejects once it has finished using the resource]
       * @return {Promise}      [resolves once the resource is released to the pool]
       */
      use(fn, priority) {
        return this.acquire(priority).then((resource) => {
          return fn(resource).then(
            (result) => {
              this.release(resource);
              return result;
            },
            (err) => {
              this.destroy(resource);
              throw err;
            }
          );
        });
      }
      /**
       * Check if resource is currently on loan from the pool
       *
       * @param {Function} resource
       *    Resource for checking.
       *
       * @returns {Boolean}
       *  True if resource belongs to this pool and false otherwise
       */
      isBorrowedResource(resource) {
        return this._resourceLoans.has(resource);
      }
      /**
       * Return the resource to the pool when it is no longer required.
       *
       * @param {Object} resource
       *   The acquired object to be put back to the pool.
       */
      release(resource) {
        const loan = this._resourceLoans.get(resource);
        if (loan === void 0) {
          return this._Promise.reject(
            new Error("Resource not currently part of this pool")
          );
        }
        this._resourceLoans.delete(resource);
        loan.resolve();
        const pooledResource = loan.pooledResource;
        pooledResource.deallocate();
        this._addPooledResourceToAvailableObjects(pooledResource);
        this._dispense();
        return this._Promise.resolve();
      }
      /**
       * Request the resource to be destroyed. The factory's destroy handler
       * will also be called.
       *
       * This should be called within an acquire() block as an alternative to release().
       *
       * @param {Object} resource
       *   The acquired resource to be destoyed.
       */
      destroy(resource) {
        const loan = this._resourceLoans.get(resource);
        if (loan === void 0) {
          return this._Promise.reject(
            new Error("Resource not currently part of this pool")
          );
        }
        this._resourceLoans.delete(resource);
        loan.resolve();
        const pooledResource = loan.pooledResource;
        pooledResource.deallocate();
        this._destroy(pooledResource);
        this._dispense();
        return this._Promise.resolve();
      }
      _addPooledResourceToAvailableObjects(pooledResource) {
        pooledResource.idle();
        if (this._config.fifo === true) {
          this._availableObjects.push(pooledResource);
        } else {
          this._availableObjects.unshift(pooledResource);
        }
      }
      /**
       * Disallow any new acquire calls and let the request backlog dissapate.
       * The Pool will no longer attempt to maintain a "min" number of resources
       * and will only make new resources on demand.
       * Resolves once all resource requests are fulfilled and all resources are returned to pool and available...
       * Should probably be called "drain work"
       * @returns {Promise}
       */
      drain() {
        this._draining = true;
        return this.__allResourceRequestsSettled().then(() => {
          return this.__allResourcesReturned();
        }).then(() => {
          this._descheduleEvictorRun();
        });
      }
      __allResourceRequestsSettled() {
        if (this._waitingClientsQueue.length > 0) {
          return reflector(this._waitingClientsQueue.tail.promise);
        }
        return this._Promise.resolve();
      }
      // FIXME: this is a horrific mess
      __allResourcesReturned() {
        const ps = Array.from(this._resourceLoans.values()).map((loan) => loan.promise).map(reflector);
        return this._Promise.all(ps);
      }
      /**
       * Forcibly destroys all available resources regardless of timeout.  Intended to be
       * invoked as part of a drain.  Does not prevent the creation of new
       * resources as a result of subsequent calls to acquire.
       *
       * Note that if factory.min > 0 and the pool isn't "draining", the pool will destroy all idle resources
       * in the pool, but replace them with newly created resources up to the
       * specified factory.min value.  If this is not desired, set factory.min
       * to zero before calling clear()
       *
       */
      clear() {
        const reflectedCreatePromises = Array.from(
          this._factoryCreateOperations
        ).map(reflector);
        return this._Promise.all(reflectedCreatePromises).then(() => {
          for (const resource of this._availableObjects) {
            this._destroy(resource);
          }
          const reflectedDestroyPromises = Array.from(
            this._factoryDestroyOperations
          ).map(reflector);
          return reflector(this._Promise.all(reflectedDestroyPromises));
        });
      }
      /**
       * Waits until the pool is ready.
       * We define ready by checking if the current resource number is at least
       * the minimum number defined.
       * @returns {Promise} that resolves when the minimum number is ready.
       */
      ready() {
        return new this._Promise((resolve) => {
          const isReady = () => {
            if (this.available >= this.min) {
              resolve();
            } else {
              setTimeout(isReady, 100);
            }
          };
          isReady();
        });
      }
      /**
       * How many resources are available to allocated
       * (includes resources that have not been tested and may faul validation)
       * NOTE: internal for now as the name is awful and might not be useful to anyone
       * @return {Number} number of resources the pool has to allocate
       */
      get _potentiallyAllocableResourceCount() {
        return this._availableObjects.length + this._testOnBorrowResources.size + this._testOnReturnResources.size + this._factoryCreateOperations.size;
      }
      /**
       * The combined count of the currently created objects and those in the
       * process of being created
       * Does NOT include resources in the process of being destroyed
       * sort of legacy...
       * @return {Number}
       */
      get _count() {
        return this._allObjects.size + this._factoryCreateOperations.size;
      }
      /**
       * How many more resources does the pool have room for
       * @return {Number} number of resources the pool could create before hitting any limits
       */
      get spareResourceCapacity() {
        return this._config.max - (this._allObjects.size + this._factoryCreateOperations.size);
      }
      /**
       * see _count above
       * @return {Number} [description]
       */
      get size() {
        return this._count;
      }
      /**
       * number of available resources
       * @return {Number} [description]
       */
      get available() {
        return this._availableObjects.length;
      }
      /**
       * number of resources that are currently acquired
       * @return {Number} [description]
       */
      get borrowed() {
        return this._resourceLoans.size;
      }
      /**
       * number of waiting acquire calls
       * @return {Number} [description]
       */
      get pending() {
        return this._waitingClientsQueue.length;
      }
      /**
       * maximum size of the pool
       * @return {Number} [description]
       */
      get max() {
        return this._config.max;
      }
      /**
       * minimum size of the pool
       * @return {Number} [description]
       */
      get min() {
        return this._config.min;
      }
    };
    module2.exports = Pool;
  }
});

// node_modules/generic-pool/index.js
var require_generic_pool = __commonJS({
  "node_modules/generic-pool/index.js"(exports2, module2) {
    var Pool = require_Pool();
    var Deque = require_Deque();
    var PriorityQueue = require_PriorityQueue();
    var DefaultEvictor = require_DefaultEvictor();
    module2.exports = {
      Pool,
      Deque,
      PriorityQueue,
      DefaultEvictor,
      createPool: function(factory, config) {
        return new Pool(DefaultEvictor, Deque, PriorityQueue, factory, config);
      }
    };
  }
});

// node_modules/@redis/client/dist/package.json
var require_package = __commonJS({
  "node_modules/@redis/client/dist/package.json"(exports2, module2) {
    module2.exports = {
      name: "@redis/client",
      version: "1.5.17",
      license: "MIT",
      main: "./dist/index.js",
      types: "./dist/index.d.ts",
      files: [
        "dist/"
      ],
      scripts: {
        test: "nyc -r text-summary -r lcov mocha -r source-map-support/register -r ts-node/register './lib/**/*.spec.ts'",
        build: "tsc",
        lint: "eslint ./*.ts ./lib/**/*.ts",
        documentation: "typedoc"
      },
      dependencies: {
        "cluster-key-slot": "1.1.2",
        "generic-pool": "3.9.0",
        yallist: "4.0.0"
      },
      devDependencies: {
        "@istanbuljs/nyc-config-typescript": "^1.0.2",
        "@redis/test-utils": "*",
        "@types/node": "^20.6.2",
        "@types/sinon": "^10.0.16",
        "@types/yallist": "^4.0.1",
        "@typescript-eslint/eslint-plugin": "^6.7.2",
        "@typescript-eslint/parser": "^6.7.2",
        eslint: "^8.49.0",
        nyc: "^15.1.0",
        "release-it": "^16.1.5",
        sinon: "^16.0.0",
        "source-map-support": "^0.5.21",
        "ts-node": "^10.9.1",
        typedoc: "^0.25.1",
        typescript: "^5.2.2"
      },
      engines: {
        node: ">=14"
      },
      repository: {
        type: "git",
        url: "git://github.com/redis/node-redis.git"
      },
      bugs: {
        url: "https://github.com/redis/node-redis/issues"
      },
      homepage: "https://github.com/redis/node-redis/tree/master/packages/client",
      keywords: [
        "redis"
      ]
    };
  }
});

// node_modules/@redis/client/dist/lib/client/index.js
var require_client2 = __commonJS({
  "node_modules/@redis/client/dist/lib/client/index.js"(exports2) {
    "use strict";
    var __classPrivateFieldGet = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var _RedisClient_instances;
    var _a;
    var _RedisClient_options;
    var _RedisClient_socket;
    var _RedisClient_queue;
    var _RedisClient_isolationPool;
    var _RedisClient_v4;
    var _RedisClient_selectedDB;
    var _RedisClient_initiateOptions;
    var _RedisClient_initiateQueue;
    var _RedisClient_initiateSocket;
    var _RedisClient_initiateIsolationPool;
    var _RedisClient_legacyMode;
    var _RedisClient_legacySendCommand;
    var _RedisClient_defineLegacyCommand;
    var _RedisClient_pingTimer;
    var _RedisClient_setPingTimer;
    var _RedisClient_sendCommand;
    var _RedisClient_pubSubCommand;
    var _RedisClient_tick;
    var _RedisClient_addMultiCommands;
    var _RedisClient_destroyIsolationPool;
    Object.defineProperty(exports2, "__esModule", { value: true });
    var commands_1 = require_commands2();
    var socket_1 = require_socket();
    var commands_queue_1 = require_commands_queue();
    var multi_command_1 = require_multi_command2();
    var events_1 = require("events");
    var command_options_1 = require_command_options();
    var commander_1 = require_commander();
    var generic_pool_1 = require_generic_pool();
    var errors_1 = require_errors2();
    var url_1 = require("url");
    var pub_sub_1 = require_pub_sub();
    var package_json_1 = require_package();
    var RedisClient2 = class extends events_1.EventEmitter {
      static commandOptions(options2) {
        return (0, command_options_1.commandOptions)(options2);
      }
      static extend(extensions) {
        const Client = (0, commander_1.attachExtensions)({
          BaseClass: _a,
          modulesExecutor: _a.prototype.commandsExecutor,
          modules: extensions?.modules,
          functionsExecutor: _a.prototype.functionsExecuter,
          functions: extensions?.functions,
          scriptsExecutor: _a.prototype.scriptsExecuter,
          scripts: extensions?.scripts
        });
        if (Client !== _a) {
          Client.prototype.Multi = multi_command_1.default.extend(extensions);
        }
        return Client;
      }
      static create(options2) {
        return new (_a.extend(options2))(options2);
      }
      static parseURL(url) {
        const { hostname, port, protocol, username, password, pathname } = new url_1.URL(url), parsed = {
          socket: {
            host: hostname
          }
        };
        if (protocol === "rediss:") {
          parsed.socket.tls = true;
        } else if (protocol !== "redis:") {
          throw new TypeError("Invalid protocol");
        }
        if (port) {
          parsed.socket.port = Number(port);
        }
        if (username) {
          parsed.username = decodeURIComponent(username);
        }
        if (password) {
          parsed.password = decodeURIComponent(password);
        }
        if (pathname.length > 1) {
          const database = Number(pathname.substring(1));
          if (isNaN(database)) {
            throw new TypeError("Invalid pathname");
          }
          parsed.database = database;
        }
        return parsed;
      }
      get options() {
        return __classPrivateFieldGet(this, _RedisClient_options, "f");
      }
      get isOpen() {
        return __classPrivateFieldGet(this, _RedisClient_socket, "f").isOpen;
      }
      get isReady() {
        return __classPrivateFieldGet(this, _RedisClient_socket, "f").isReady;
      }
      get isPubSubActive() {
        return __classPrivateFieldGet(this, _RedisClient_queue, "f").isPubSubActive;
      }
      get v4() {
        if (!__classPrivateFieldGet(this, _RedisClient_options, "f")?.legacyMode) {
          throw new Error('the client is not in "legacy mode"');
        }
        return __classPrivateFieldGet(this, _RedisClient_v4, "f");
      }
      constructor(options2) {
        super();
        _RedisClient_instances.add(this);
        Object.defineProperty(this, "commandOptions", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: _a.commandOptions
        });
        _RedisClient_options.set(this, void 0);
        _RedisClient_socket.set(this, void 0);
        _RedisClient_queue.set(this, void 0);
        _RedisClient_isolationPool.set(this, void 0);
        _RedisClient_v4.set(this, {});
        _RedisClient_selectedDB.set(this, 0);
        _RedisClient_pingTimer.set(this, void 0);
        Object.defineProperty(this, "select", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.SELECT
        });
        Object.defineProperty(this, "subscribe", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.SUBSCRIBE
        });
        Object.defineProperty(this, "unsubscribe", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.UNSUBSCRIBE
        });
        Object.defineProperty(this, "pSubscribe", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.PSUBSCRIBE
        });
        Object.defineProperty(this, "pUnsubscribe", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.PUNSUBSCRIBE
        });
        Object.defineProperty(this, "sSubscribe", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.SSUBSCRIBE
        });
        Object.defineProperty(this, "sUnsubscribe", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.SUNSUBSCRIBE
        });
        Object.defineProperty(this, "quit", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.QUIT
        });
        Object.defineProperty(this, "multi", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.MULTI
        });
        __classPrivateFieldSet(this, _RedisClient_options, __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_initiateOptions).call(this, options2), "f");
        __classPrivateFieldSet(this, _RedisClient_queue, __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_initiateQueue).call(this), "f");
        __classPrivateFieldSet(this, _RedisClient_socket, __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_initiateSocket).call(this), "f");
        __classPrivateFieldSet(this, _RedisClient_isolationPool, __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_initiateIsolationPool).call(this), "f");
        __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_legacyMode).call(this);
      }
      duplicate(overrides) {
        return new (Object.getPrototypeOf(this)).constructor({
          ...__classPrivateFieldGet(this, _RedisClient_options, "f"),
          ...overrides
        });
      }
      async connect() {
        __classPrivateFieldSet(this, _RedisClient_isolationPool, __classPrivateFieldGet(this, _RedisClient_isolationPool, "f") ?? __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_initiateIsolationPool).call(this), "f");
        await __classPrivateFieldGet(this, _RedisClient_socket, "f").connect();
        return this;
      }
      async commandsExecutor(command, args) {
        const { args: redisArgs, options: options2 } = (0, commander_1.transformCommandArguments)(command, args);
        return (0, commander_1.transformCommandReply)(command, await __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, redisArgs, options2), redisArgs.preserve);
      }
      sendCommand(args, options2) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, args, options2);
      }
      async functionsExecuter(fn, args, name) {
        const { args: redisArgs, options: options2 } = (0, commander_1.transformCommandArguments)(fn, args);
        return (0, commander_1.transformCommandReply)(fn, await this.executeFunction(name, fn, redisArgs, options2), redisArgs.preserve);
      }
      executeFunction(name, fn, args, options2) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, (0, commander_1.fCallArguments)(name, fn, args), options2);
      }
      async scriptsExecuter(script, args) {
        const { args: redisArgs, options: options2 } = (0, commander_1.transformCommandArguments)(script, args);
        return (0, commander_1.transformCommandReply)(script, await this.executeScript(script, redisArgs, options2), redisArgs.preserve);
      }
      async executeScript(script, args, options2) {
        const redisArgs = ["EVALSHA", script.SHA1];
        if (script.NUMBER_OF_KEYS !== void 0) {
          redisArgs.push(script.NUMBER_OF_KEYS.toString());
        }
        redisArgs.push(...args);
        try {
          return await __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, redisArgs, options2);
        } catch (err) {
          if (!err?.message?.startsWith?.("NOSCRIPT")) {
            throw err;
          }
          redisArgs[0] = "EVAL";
          redisArgs[1] = script.SCRIPT;
          return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, redisArgs, options2);
        }
      }
      async SELECT(options2, db) {
        if (!(0, command_options_1.isCommandOptions)(options2)) {
          db = options2;
          options2 = null;
        }
        await __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, ["SELECT", db.toString()], options2);
        __classPrivateFieldSet(this, _RedisClient_selectedDB, db, "f");
      }
      SUBSCRIBE(channels, listener, bufferMode) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").subscribe(pub_sub_1.PubSubType.CHANNELS, channels, listener, bufferMode));
      }
      UNSUBSCRIBE(channels, listener, bufferMode) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").unsubscribe(pub_sub_1.PubSubType.CHANNELS, channels, listener, bufferMode));
      }
      PSUBSCRIBE(patterns, listener, bufferMode) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").subscribe(pub_sub_1.PubSubType.PATTERNS, patterns, listener, bufferMode));
      }
      PUNSUBSCRIBE(patterns, listener, bufferMode) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").unsubscribe(pub_sub_1.PubSubType.PATTERNS, patterns, listener, bufferMode));
      }
      SSUBSCRIBE(channels, listener, bufferMode) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").subscribe(pub_sub_1.PubSubType.SHARDED, channels, listener, bufferMode));
      }
      SUNSUBSCRIBE(channels, listener, bufferMode) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").unsubscribe(pub_sub_1.PubSubType.SHARDED, channels, listener, bufferMode));
      }
      getPubSubListeners(type) {
        return __classPrivateFieldGet(this, _RedisClient_queue, "f").getPubSubListeners(type);
      }
      extendPubSubChannelListeners(type, channel, listeners) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").extendPubSubChannelListeners(type, channel, listeners));
      }
      extendPubSubListeners(type, listeners) {
        return __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_pubSubCommand).call(this, __classPrivateFieldGet(this, _RedisClient_queue, "f").extendPubSubListeners(type, listeners));
      }
      QUIT() {
        return __classPrivateFieldGet(this, _RedisClient_socket, "f").quit(async () => {
          if (__classPrivateFieldGet(this, _RedisClient_pingTimer, "f"))
            clearTimeout(__classPrivateFieldGet(this, _RedisClient_pingTimer, "f"));
          const quitPromise = __classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand(["QUIT"]);
          __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
          const [reply] = await Promise.all([
            quitPromise,
            __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_destroyIsolationPool).call(this)
          ]);
          return reply;
        });
      }
      executeIsolated(fn) {
        if (!__classPrivateFieldGet(this, _RedisClient_isolationPool, "f"))
          return Promise.reject(new errors_1.ClientClosedError());
        return __classPrivateFieldGet(this, _RedisClient_isolationPool, "f").use(fn);
      }
      MULTI() {
        return new this.Multi(this.multiExecutor.bind(this), __classPrivateFieldGet(this, _RedisClient_options, "f")?.legacyMode);
      }
      async multiExecutor(commands, selectedDB, chainId) {
        if (!__classPrivateFieldGet(this, _RedisClient_socket, "f").isOpen) {
          return Promise.reject(new errors_1.ClientClosedError());
        }
        const promise = chainId ? (
          // if `chainId` has a value, it's a `MULTI` (and not "pipeline") - need to add the `MULTI` and `EXEC` commands
          Promise.all([
            __classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand(["MULTI"], { chainId }),
            __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_addMultiCommands).call(this, commands, chainId),
            __classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand(["EXEC"], { chainId })
          ])
        ) : __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_addMultiCommands).call(this, commands);
        __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
        const results = await promise;
        if (selectedDB !== void 0) {
          __classPrivateFieldSet(this, _RedisClient_selectedDB, selectedDB, "f");
        }
        return results;
      }
      async *scanIterator(options2) {
        let cursor = 0;
        do {
          const reply = await this.scan(cursor, options2);
          cursor = reply.cursor;
          for (const key of reply.keys) {
            yield key;
          }
        } while (cursor !== 0);
      }
      async *hScanIterator(key, options2) {
        let cursor = 0;
        do {
          const reply = await this.hScan(key, cursor, options2);
          cursor = reply.cursor;
          for (const tuple of reply.tuples) {
            yield tuple;
          }
        } while (cursor !== 0);
      }
      async *hScanNoValuesIterator(key, options2) {
        let cursor = 0;
        do {
          const reply = await this.hScanNoValues(key, cursor, options2);
          cursor = reply.cursor;
          for (const k of reply.keys) {
            yield k;
          }
        } while (cursor !== 0);
      }
      async *sScanIterator(key, options2) {
        let cursor = 0;
        do {
          const reply = await this.sScan(key, cursor, options2);
          cursor = reply.cursor;
          for (const member of reply.members) {
            yield member;
          }
        } while (cursor !== 0);
      }
      async *zScanIterator(key, options2) {
        let cursor = 0;
        do {
          const reply = await this.zScan(key, cursor, options2);
          cursor = reply.cursor;
          for (const member of reply.members) {
            yield member;
          }
        } while (cursor !== 0);
      }
      async disconnect() {
        if (__classPrivateFieldGet(this, _RedisClient_pingTimer, "f"))
          clearTimeout(__classPrivateFieldGet(this, _RedisClient_pingTimer, "f"));
        __classPrivateFieldGet(this, _RedisClient_queue, "f").flushAll(new errors_1.DisconnectsClientError());
        __classPrivateFieldGet(this, _RedisClient_socket, "f").disconnect();
        await __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_destroyIsolationPool).call(this);
      }
      ref() {
        __classPrivateFieldGet(this, _RedisClient_socket, "f").ref();
      }
      unref() {
        __classPrivateFieldGet(this, _RedisClient_socket, "f").unref();
      }
    };
    _a = RedisClient2, _RedisClient_options = /* @__PURE__ */ new WeakMap(), _RedisClient_socket = /* @__PURE__ */ new WeakMap(), _RedisClient_queue = /* @__PURE__ */ new WeakMap(), _RedisClient_isolationPool = /* @__PURE__ */ new WeakMap(), _RedisClient_v4 = /* @__PURE__ */ new WeakMap(), _RedisClient_selectedDB = /* @__PURE__ */ new WeakMap(), _RedisClient_pingTimer = /* @__PURE__ */ new WeakMap(), _RedisClient_instances = /* @__PURE__ */ new WeakSet(), _RedisClient_initiateOptions = function _RedisClient_initiateOptions2(options2) {
      if (options2?.url) {
        const parsed = _a.parseURL(options2.url);
        if (options2.socket) {
          parsed.socket = Object.assign(options2.socket, parsed.socket);
        }
        Object.assign(options2, parsed);
      }
      if (options2?.database) {
        __classPrivateFieldSet(this, _RedisClient_selectedDB, options2.database, "f");
      }
      return options2;
    }, _RedisClient_initiateQueue = function _RedisClient_initiateQueue2() {
      return new commands_queue_1.default(__classPrivateFieldGet(this, _RedisClient_options, "f")?.commandsQueueMaxLength, (channel, listeners) => this.emit("sharded-channel-moved", channel, listeners));
    }, _RedisClient_initiateSocket = function _RedisClient_initiateSocket2() {
      const socketInitiator = async () => {
        const promises = [];
        if (__classPrivateFieldGet(this, _RedisClient_selectedDB, "f") !== 0) {
          promises.push(__classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand(["SELECT", __classPrivateFieldGet(this, _RedisClient_selectedDB, "f").toString()], { asap: true }));
        }
        if (__classPrivateFieldGet(this, _RedisClient_options, "f")?.readonly) {
          promises.push(__classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand(commands_1.default.READONLY.transformArguments(), { asap: true }));
        }
        if (!__classPrivateFieldGet(this, _RedisClient_options, "f")?.disableClientInfo) {
          promises.push(__classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand(["CLIENT", "SETINFO", "LIB-VER", package_json_1.version], { asap: true }).catch((err) => {
            if (!(err instanceof errors_1.ErrorReply)) {
              throw err;
            }
          }));
          promises.push(__classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand([
            "CLIENT",
            "SETINFO",
            "LIB-NAME",
            __classPrivateFieldGet(this, _RedisClient_options, "f")?.clientInfoTag ? `node-redis(${__classPrivateFieldGet(this, _RedisClient_options, "f").clientInfoTag})` : "node-redis"
          ], { asap: true }).catch((err) => {
            if (!(err instanceof errors_1.ErrorReply)) {
              throw err;
            }
          }));
        }
        if (__classPrivateFieldGet(this, _RedisClient_options, "f")?.name) {
          promises.push(__classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand(commands_1.default.CLIENT_SETNAME.transformArguments(__classPrivateFieldGet(this, _RedisClient_options, "f").name), { asap: true }));
        }
        if (__classPrivateFieldGet(this, _RedisClient_options, "f")?.username || __classPrivateFieldGet(this, _RedisClient_options, "f")?.password) {
          promises.push(__classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand(commands_1.default.AUTH.transformArguments({
            username: __classPrivateFieldGet(this, _RedisClient_options, "f").username,
            password: __classPrivateFieldGet(this, _RedisClient_options, "f").password ?? ""
          }), { asap: true }));
        }
        const resubscribePromise = __classPrivateFieldGet(this, _RedisClient_queue, "f").resubscribe();
        if (resubscribePromise) {
          promises.push(resubscribePromise);
        }
        if (promises.length) {
          __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this, true);
          await Promise.all(promises);
        }
      };
      return new socket_1.default(socketInitiator, __classPrivateFieldGet(this, _RedisClient_options, "f")?.socket).on("data", (chunk) => __classPrivateFieldGet(this, _RedisClient_queue, "f").onReplyChunk(chunk)).on("error", (err) => {
        this.emit("error", err);
        if (__classPrivateFieldGet(this, _RedisClient_socket, "f").isOpen && !__classPrivateFieldGet(this, _RedisClient_options, "f")?.disableOfflineQueue) {
          __classPrivateFieldGet(this, _RedisClient_queue, "f").flushWaitingForReply(err);
        } else {
          __classPrivateFieldGet(this, _RedisClient_queue, "f").flushAll(err);
        }
      }).on("connect", () => {
        this.emit("connect");
      }).on("ready", () => {
        this.emit("ready");
        __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_setPingTimer).call(this);
        __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
      }).on("reconnecting", () => this.emit("reconnecting")).on("drain", () => __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this)).on("end", () => this.emit("end"));
    }, _RedisClient_initiateIsolationPool = function _RedisClient_initiateIsolationPool2() {
      return (0, generic_pool_1.createPool)({
        create: async () => {
          const duplicate = this.duplicate({
            isolationPoolOptions: void 0
          }).on("error", (err) => this.emit("error", err));
          await duplicate.connect();
          return duplicate;
        },
        destroy: (client2) => client2.disconnect()
      }, __classPrivateFieldGet(this, _RedisClient_options, "f")?.isolationPoolOptions);
    }, _RedisClient_legacyMode = function _RedisClient_legacyMode2() {
      var _b, _c;
      if (!__classPrivateFieldGet(this, _RedisClient_options, "f")?.legacyMode)
        return;
      __classPrivateFieldGet(this, _RedisClient_v4, "f").sendCommand = __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).bind(this);
      this.sendCommand = (...args) => {
        const result = __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_legacySendCommand).call(this, ...args);
        if (result) {
          result.promise.then((reply) => result.callback(null, reply)).catch((err) => result.callback(err));
        }
      };
      for (const [name, command] of Object.entries(commands_1.default)) {
        __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, name, command);
        (_b = this)[_c = name.toLowerCase()] ?? (_b[_c] = this[name]);
      }
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, "SELECT");
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, "select");
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, "SUBSCRIBE");
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, "subscribe");
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, "PSUBSCRIBE");
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, "pSubscribe");
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, "UNSUBSCRIBE");
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, "unsubscribe");
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, "PUNSUBSCRIBE");
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, "pUnsubscribe");
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, "QUIT");
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_defineLegacyCommand).call(this, "quit");
    }, _RedisClient_legacySendCommand = function _RedisClient_legacySendCommand2(...args) {
      const callback = typeof args[args.length - 1] === "function" ? args.pop() : void 0;
      const promise = __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, (0, commander_1.transformLegacyCommandArguments)(args));
      if (callback)
        return {
          promise,
          callback
        };
      promise.catch((err) => this.emit("error", err));
    }, _RedisClient_defineLegacyCommand = function _RedisClient_defineLegacyCommand2(name, command) {
      __classPrivateFieldGet(this, _RedisClient_v4, "f")[name] = this[name].bind(this);
      this[name] = command && command.TRANSFORM_LEGACY_REPLY && command.transformReply ? (...args) => {
        const result = __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_legacySendCommand).call(this, name, ...args);
        if (result) {
          result.promise.then((reply) => result.callback(null, command.transformReply(reply))).catch((err) => result.callback(err));
        }
      } : (...args) => this.sendCommand(name, ...args);
    }, _RedisClient_setPingTimer = function _RedisClient_setPingTimer2() {
      if (!__classPrivateFieldGet(this, _RedisClient_options, "f")?.pingInterval || !__classPrivateFieldGet(this, _RedisClient_socket, "f").isReady)
        return;
      clearTimeout(__classPrivateFieldGet(this, _RedisClient_pingTimer, "f"));
      __classPrivateFieldSet(this, _RedisClient_pingTimer, setTimeout(() => {
        if (!__classPrivateFieldGet(this, _RedisClient_socket, "f").isReady)
          return;
        __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_sendCommand).call(this, ["PING"]).then((reply) => this.emit("ping-interval", reply)).catch((err) => this.emit("error", err)).finally(() => __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_setPingTimer2).call(this));
      }, __classPrivateFieldGet(this, _RedisClient_options, "f").pingInterval), "f");
    }, _RedisClient_sendCommand = function _RedisClient_sendCommand2(args, options2) {
      if (!__classPrivateFieldGet(this, _RedisClient_socket, "f").isOpen) {
        return Promise.reject(new errors_1.ClientClosedError());
      } else if (options2?.isolated) {
        return this.executeIsolated((isolatedClient) => isolatedClient.sendCommand(args, {
          ...options2,
          isolated: false
        }));
      } else if (!__classPrivateFieldGet(this, _RedisClient_socket, "f").isReady && __classPrivateFieldGet(this, _RedisClient_options, "f")?.disableOfflineQueue) {
        return Promise.reject(new errors_1.ClientOfflineError());
      }
      const promise = __classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand(args, options2);
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
      return promise;
    }, _RedisClient_pubSubCommand = function _RedisClient_pubSubCommand2(promise) {
      if (promise === void 0)
        return Promise.resolve();
      __classPrivateFieldGet(this, _RedisClient_instances, "m", _RedisClient_tick).call(this);
      return promise;
    }, _RedisClient_tick = function _RedisClient_tick2(force = false) {
      if (__classPrivateFieldGet(this, _RedisClient_socket, "f").writableNeedDrain || !force && !__classPrivateFieldGet(this, _RedisClient_socket, "f").isReady) {
        return;
      }
      __classPrivateFieldGet(this, _RedisClient_socket, "f").cork();
      while (!__classPrivateFieldGet(this, _RedisClient_socket, "f").writableNeedDrain) {
        const args = __classPrivateFieldGet(this, _RedisClient_queue, "f").getCommandToSend();
        if (args === void 0)
          break;
        __classPrivateFieldGet(this, _RedisClient_socket, "f").writeCommand(args);
      }
    }, _RedisClient_addMultiCommands = function _RedisClient_addMultiCommands2(commands, chainId) {
      return Promise.all(commands.map(({ args }) => __classPrivateFieldGet(this, _RedisClient_queue, "f").addCommand(args, { chainId })));
    }, _RedisClient_destroyIsolationPool = async function _RedisClient_destroyIsolationPool2() {
      await __classPrivateFieldGet(this, _RedisClient_isolationPool, "f").drain();
      await __classPrivateFieldGet(this, _RedisClient_isolationPool, "f").clear();
      __classPrivateFieldSet(this, _RedisClient_isolationPool, void 0, "f");
    };
    exports2.default = RedisClient2;
    (0, commander_1.attachCommands)({
      BaseClass: RedisClient2,
      commands: commands_1.default,
      executor: RedisClient2.prototype.commandsExecutor
    });
    RedisClient2.prototype.Multi = multi_command_1.default;
  }
});

// node_modules/cluster-key-slot/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/cluster-key-slot/lib/index.js"(exports2, module2) {
    var lookup = [
      0,
      4129,
      8258,
      12387,
      16516,
      20645,
      24774,
      28903,
      33032,
      37161,
      41290,
      45419,
      49548,
      53677,
      57806,
      61935,
      4657,
      528,
      12915,
      8786,
      21173,
      17044,
      29431,
      25302,
      37689,
      33560,
      45947,
      41818,
      54205,
      50076,
      62463,
      58334,
      9314,
      13379,
      1056,
      5121,
      25830,
      29895,
      17572,
      21637,
      42346,
      46411,
      34088,
      38153,
      58862,
      62927,
      50604,
      54669,
      13907,
      9842,
      5649,
      1584,
      30423,
      26358,
      22165,
      18100,
      46939,
      42874,
      38681,
      34616,
      63455,
      59390,
      55197,
      51132,
      18628,
      22757,
      26758,
      30887,
      2112,
      6241,
      10242,
      14371,
      51660,
      55789,
      59790,
      63919,
      35144,
      39273,
      43274,
      47403,
      23285,
      19156,
      31415,
      27286,
      6769,
      2640,
      14899,
      10770,
      56317,
      52188,
      64447,
      60318,
      39801,
      35672,
      47931,
      43802,
      27814,
      31879,
      19684,
      23749,
      11298,
      15363,
      3168,
      7233,
      60846,
      64911,
      52716,
      56781,
      44330,
      48395,
      36200,
      40265,
      32407,
      28342,
      24277,
      20212,
      15891,
      11826,
      7761,
      3696,
      65439,
      61374,
      57309,
      53244,
      48923,
      44858,
      40793,
      36728,
      37256,
      33193,
      45514,
      41451,
      53516,
      49453,
      61774,
      57711,
      4224,
      161,
      12482,
      8419,
      20484,
      16421,
      28742,
      24679,
      33721,
      37784,
      41979,
      46042,
      49981,
      54044,
      58239,
      62302,
      689,
      4752,
      8947,
      13010,
      16949,
      21012,
      25207,
      29270,
      46570,
      42443,
      38312,
      34185,
      62830,
      58703,
      54572,
      50445,
      13538,
      9411,
      5280,
      1153,
      29798,
      25671,
      21540,
      17413,
      42971,
      47098,
      34713,
      38840,
      59231,
      63358,
      50973,
      55100,
      9939,
      14066,
      1681,
      5808,
      26199,
      30326,
      17941,
      22068,
      55628,
      51565,
      63758,
      59695,
      39368,
      35305,
      47498,
      43435,
      22596,
      18533,
      30726,
      26663,
      6336,
      2273,
      14466,
      10403,
      52093,
      56156,
      60223,
      64286,
      35833,
      39896,
      43963,
      48026,
      19061,
      23124,
      27191,
      31254,
      2801,
      6864,
      10931,
      14994,
      64814,
      60687,
      56684,
      52557,
      48554,
      44427,
      40424,
      36297,
      31782,
      27655,
      23652,
      19525,
      15522,
      11395,
      7392,
      3265,
      61215,
      65342,
      53085,
      57212,
      44955,
      49082,
      36825,
      40952,
      28183,
      32310,
      20053,
      24180,
      11923,
      16050,
      3793,
      7920
    ];
    var toUTF8Array = function toUTF8Array2(str) {
      var char;
      var i = 0;
      var p = 0;
      var utf8 = [];
      var len = str.length;
      for (; i < len; i++) {
        char = str.charCodeAt(i);
        if (char < 128) {
          utf8[p++] = char;
        } else if (char < 2048) {
          utf8[p++] = char >> 6 | 192;
          utf8[p++] = char & 63 | 128;
        } else if ((char & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
          char = 65536 + ((char & 1023) << 10) + (str.charCodeAt(++i) & 1023);
          utf8[p++] = char >> 18 | 240;
          utf8[p++] = char >> 12 & 63 | 128;
          utf8[p++] = char >> 6 & 63 | 128;
          utf8[p++] = char & 63 | 128;
        } else {
          utf8[p++] = char >> 12 | 224;
          utf8[p++] = char >> 6 & 63 | 128;
          utf8[p++] = char & 63 | 128;
        }
      }
      return utf8;
    };
    var generate = module2.exports = function generate2(str) {
      var char;
      var i = 0;
      var start = -1;
      var result = 0;
      var resultHash = 0;
      var utf8 = typeof str === "string" ? toUTF8Array(str) : str;
      var len = utf8.length;
      while (i < len) {
        char = utf8[i++];
        if (start === -1) {
          if (char === 123) {
            start = i;
          }
        } else if (char !== 125) {
          resultHash = lookup[(char ^ resultHash >> 8) & 255] ^ resultHash << 8;
        } else if (i - 1 !== start) {
          return resultHash & 16383;
        }
        result = lookup[(char ^ result >> 8) & 255] ^ result << 8;
      }
      return result & 16383;
    };
    module2.exports.generateMulti = function generateMulti(keys) {
      var i = 1;
      var len = keys.length;
      var base = generate(keys[0]);
      while (i < len) {
        if (generate(keys[i++]) !== base) return -1;
      }
      return base;
    };
  }
});

// node_modules/@redis/client/dist/lib/cluster/cluster-slots.js
var require_cluster_slots = __commonJS({
  "node_modules/@redis/client/dist/lib/cluster/cluster-slots.js"(exports2) {
    "use strict";
    var __classPrivateFieldGet = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var _RedisClusterSlots_instances;
    var _a;
    var _RedisClusterSlots_SLOTS;
    var _RedisClusterSlots_options;
    var _RedisClusterSlots_Client;
    var _RedisClusterSlots_emit;
    var _RedisClusterSlots_isOpen;
    var _RedisClusterSlots_discoverWithRootNodes;
    var _RedisClusterSlots_resetSlots;
    var _RedisClusterSlots_discover;
    var _RedisClusterSlots_getShards;
    var _RedisClusterSlots_getNodeAddress;
    var _RedisClusterSlots_clientOptionsDefaults;
    var _RedisClusterSlots_initiateSlotNode;
    var _RedisClusterSlots_createClient;
    var _RedisClusterSlots_createNodeClient;
    var _RedisClusterSlots_runningRediscoverPromise;
    var _RedisClusterSlots_rediscover;
    var _RedisClusterSlots_destroy;
    var _RedisClusterSlots_execOnNodeClient;
    var _RedisClusterSlots_iterateAllNodes;
    var _RedisClusterSlots_randomNodeIterator;
    var _RedisClusterSlots_slotNodesIterator;
    var _RedisClusterSlots_initiatePubSubClient;
    var _RedisClusterSlots_initiateShardedPubSubClient;
    Object.defineProperty(exports2, "__esModule", { value: true });
    var client_1 = require_client2();
    var errors_1 = require_errors2();
    var util_1 = require("util");
    var pub_sub_1 = require_pub_sub();
    var calculateSlot = require_lib2();
    var RedisClusterSlots = class {
      get isOpen() {
        return __classPrivateFieldGet(this, _RedisClusterSlots_isOpen, "f");
      }
      constructor(options2, emit) {
        _RedisClusterSlots_instances.add(this);
        _RedisClusterSlots_options.set(this, void 0);
        _RedisClusterSlots_Client.set(this, void 0);
        _RedisClusterSlots_emit.set(this, void 0);
        Object.defineProperty(this, "slots", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new Array(__classPrivateFieldGet(_a, _a, "f", _RedisClusterSlots_SLOTS))
        });
        Object.defineProperty(this, "shards", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new Array()
        });
        Object.defineProperty(this, "masters", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new Array()
        });
        Object.defineProperty(this, "replicas", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: new Array()
        });
        Object.defineProperty(this, "nodeByAddress", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: /* @__PURE__ */ new Map()
        });
        Object.defineProperty(this, "pubSubNode", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        _RedisClusterSlots_isOpen.set(this, false);
        _RedisClusterSlots_runningRediscoverPromise.set(this, void 0);
        _RedisClusterSlots_randomNodeIterator.set(this, void 0);
        __classPrivateFieldSet(this, _RedisClusterSlots_options, options2, "f");
        __classPrivateFieldSet(this, _RedisClusterSlots_Client, client_1.default.extend(options2), "f");
        __classPrivateFieldSet(this, _RedisClusterSlots_emit, emit, "f");
      }
      async connect() {
        if (__classPrivateFieldGet(this, _RedisClusterSlots_isOpen, "f")) {
          throw new Error("Cluster already open");
        }
        __classPrivateFieldSet(this, _RedisClusterSlots_isOpen, true, "f");
        try {
          await __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_discoverWithRootNodes).call(this);
        } catch (err) {
          __classPrivateFieldSet(this, _RedisClusterSlots_isOpen, false, "f");
          throw err;
        }
      }
      nodeClient(node) {
        return node.client ?? __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_createNodeClient).call(this, node);
      }
      async rediscover(startWith) {
        __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, __classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, "f") ?? __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_rediscover).call(this, startWith).finally(() => __classPrivateFieldSet(this, _RedisClusterSlots_runningRediscoverPromise, void 0, "f")), "f");
        return __classPrivateFieldGet(this, _RedisClusterSlots_runningRediscoverPromise, "f");
      }
      quit() {
        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_destroy).call(this, (client2) => client2.quit());
      }
      disconnect() {
        return __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_destroy).call(this, (client2) => client2.disconnect());
      }
      getClient(firstKey, isReadonly) {
        if (!firstKey) {
          return this.nodeClient(this.getRandomNode());
        }
        const slotNumber = calculateSlot(firstKey);
        if (!isReadonly) {
          return this.nodeClient(this.slots[slotNumber].master);
        }
        return this.nodeClient(this.getSlotRandomNode(slotNumber));
      }
      getRandomNode() {
        __classPrivateFieldSet(this, _RedisClusterSlots_randomNodeIterator, __classPrivateFieldGet(this, _RedisClusterSlots_randomNodeIterator, "f") ?? __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_iterateAllNodes).call(this), "f");
        return __classPrivateFieldGet(this, _RedisClusterSlots_randomNodeIterator, "f").next().value;
      }
      getSlotRandomNode(slotNumber) {
        const slot = this.slots[slotNumber];
        if (!slot.replicas?.length) {
          return slot.master;
        }
        slot.nodesIterator ?? (slot.nodesIterator = __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_slotNodesIterator).call(this, slot));
        return slot.nodesIterator.next().value;
      }
      getMasterByAddress(address) {
        const master = this.nodeByAddress.get(address);
        if (!master)
          return;
        return this.nodeClient(master);
      }
      getPubSubClient() {
        return this.pubSubNode ? this.pubSubNode.client : __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_initiatePubSubClient).call(this);
      }
      async executeUnsubscribeCommand(unsubscribe) {
        const client2 = await this.getPubSubClient();
        await unsubscribe(client2);
        if (!client2.isPubSubActive && client2.isOpen) {
          await client2.disconnect();
          this.pubSubNode = void 0;
        }
      }
      getShardedPubSubClient(channel) {
        const { master } = this.slots[calculateSlot(channel)];
        return master.pubSubClient ?? __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_initiateShardedPubSubClient).call(this, master);
      }
      async executeShardedUnsubscribeCommand(channel, unsubscribe) {
        const { master } = this.slots[calculateSlot(channel)];
        if (!master.pubSubClient)
          return Promise.resolve();
        const client2 = await master.pubSubClient;
        await unsubscribe(client2);
        if (!client2.isPubSubActive && client2.isOpen) {
          await client2.disconnect();
          master.pubSubClient = void 0;
        }
      }
    };
    _a = RedisClusterSlots, _RedisClusterSlots_options = /* @__PURE__ */ new WeakMap(), _RedisClusterSlots_Client = /* @__PURE__ */ new WeakMap(), _RedisClusterSlots_emit = /* @__PURE__ */ new WeakMap(), _RedisClusterSlots_isOpen = /* @__PURE__ */ new WeakMap(), _RedisClusterSlots_runningRediscoverPromise = /* @__PURE__ */ new WeakMap(), _RedisClusterSlots_randomNodeIterator = /* @__PURE__ */ new WeakMap(), _RedisClusterSlots_instances = /* @__PURE__ */ new WeakSet(), _RedisClusterSlots_discoverWithRootNodes = async function _RedisClusterSlots_discoverWithRootNodes2() {
      let start = Math.floor(Math.random() * __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").rootNodes.length);
      for (let i = start; i < __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").rootNodes.length; i++) {
        if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_discover).call(this, __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").rootNodes[i]))
          return;
      }
      for (let i = 0; i < start; i++) {
        if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_discover).call(this, __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").rootNodes[i]))
          return;
      }
      throw new errors_1.RootNodesUnavailableError();
    }, _RedisClusterSlots_resetSlots = function _RedisClusterSlots_resetSlots2() {
      this.slots = new Array(__classPrivateFieldGet(_a, _a, "f", _RedisClusterSlots_SLOTS));
      this.shards = [];
      this.masters = [];
      this.replicas = [];
      __classPrivateFieldSet(this, _RedisClusterSlots_randomNodeIterator, void 0, "f");
    }, _RedisClusterSlots_discover = async function _RedisClusterSlots_discover2(rootNode) {
      const addressesInUse = /* @__PURE__ */ new Set();
      try {
        const shards = await __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_getShards).call(this, rootNode), promises = [], eagerConnect = __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").minimizeConnections !== true;
        __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_resetSlots).call(this);
        for (const { from, to, master, replicas } of shards) {
          const shard = {
            master: __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_initiateSlotNode).call(this, master, false, eagerConnect, addressesInUse, promises)
          };
          if (__classPrivateFieldGet(this, _RedisClusterSlots_options, "f").useReplicas) {
            shard.replicas = replicas.map((replica) => __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_initiateSlotNode).call(this, replica, true, eagerConnect, addressesInUse, promises));
          }
          this.shards.push(shard);
          for (let i = from; i <= to; i++) {
            this.slots[i] = shard;
          }
        }
        if (this.pubSubNode && !addressesInUse.has(this.pubSubNode.address)) {
          if (util_1.types.isPromise(this.pubSubNode.client)) {
            promises.push(this.pubSubNode.client.then((client2) => client2.disconnect()));
            this.pubSubNode = void 0;
          } else {
            promises.push(this.pubSubNode.client.disconnect());
            const channelsListeners = this.pubSubNode.client.getPubSubListeners(pub_sub_1.PubSubType.CHANNELS), patternsListeners = this.pubSubNode.client.getPubSubListeners(pub_sub_1.PubSubType.PATTERNS);
            if (channelsListeners.size || patternsListeners.size) {
              promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_initiatePubSubClient).call(this, {
                [pub_sub_1.PubSubType.CHANNELS]: channelsListeners,
                [pub_sub_1.PubSubType.PATTERNS]: patternsListeners
              }));
            }
          }
        }
        for (const [address, node] of this.nodeByAddress.entries()) {
          if (addressesInUse.has(address))
            continue;
          if (node.client) {
            promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_execOnNodeClient).call(this, node.client, (client2) => client2.disconnect()));
          }
          const { pubSubClient } = node;
          if (pubSubClient) {
            promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_execOnNodeClient).call(this, pubSubClient, (client2) => client2.disconnect()));
          }
          this.nodeByAddress.delete(address);
        }
        await Promise.all(promises);
        return true;
      } catch (err) {
        __classPrivateFieldGet(this, _RedisClusterSlots_emit, "f").call(this, "error", err);
        return false;
      }
    }, _RedisClusterSlots_getShards = async function _RedisClusterSlots_getShards2(rootNode) {
      const client2 = new (__classPrivateFieldGet(this, _RedisClusterSlots_Client, "f"))(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_clientOptionsDefaults).call(this, rootNode, true));
      client2.on("error", (err) => __classPrivateFieldGet(this, _RedisClusterSlots_emit, "f").call(this, "error", err));
      await client2.connect();
      try {
        return await client2.clusterSlots();
      } finally {
        await client2.disconnect();
      }
    }, _RedisClusterSlots_getNodeAddress = function _RedisClusterSlots_getNodeAddress2(address) {
      switch (typeof __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").nodeAddressMap) {
        case "object":
          return __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").nodeAddressMap[address];
        case "function":
          return __classPrivateFieldGet(this, _RedisClusterSlots_options, "f").nodeAddressMap(address);
      }
    }, _RedisClusterSlots_clientOptionsDefaults = function _RedisClusterSlots_clientOptionsDefaults2(options2, disableReconnect) {
      let result;
      if (__classPrivateFieldGet(this, _RedisClusterSlots_options, "f").defaults) {
        let socket;
        if (__classPrivateFieldGet(this, _RedisClusterSlots_options, "f").defaults.socket) {
          socket = {
            ...__classPrivateFieldGet(this, _RedisClusterSlots_options, "f").defaults.socket,
            ...options2?.socket
          };
        } else {
          socket = options2?.socket;
        }
        result = {
          ...__classPrivateFieldGet(this, _RedisClusterSlots_options, "f").defaults,
          ...options2,
          socket
        };
      } else {
        result = options2;
      }
      if (disableReconnect) {
        result ?? (result = {});
        result.socket ?? (result.socket = {});
        result.socket.reconnectStrategy = false;
      }
      return result;
    }, _RedisClusterSlots_initiateSlotNode = function _RedisClusterSlots_initiateSlotNode2({ id, ip, port }, readonly, eagerConnent, addressesInUse, promises) {
      const address = `${ip}:${port}`;
      addressesInUse.add(address);
      let node = this.nodeByAddress.get(address);
      if (!node) {
        node = {
          id,
          host: ip,
          port,
          address,
          readonly,
          client: void 0
        };
        if (eagerConnent) {
          promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_createNodeClient).call(this, node));
        }
        this.nodeByAddress.set(address, node);
      }
      (readonly ? this.replicas : this.masters).push(node);
      return node;
    }, _RedisClusterSlots_createClient = async function _RedisClusterSlots_createClient2(node, readonly = node.readonly) {
      const client2 = new (__classPrivateFieldGet(this, _RedisClusterSlots_Client, "f"))(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_clientOptionsDefaults).call(this, {
        socket: __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_getNodeAddress).call(this, node.address) ?? {
          host: node.host,
          port: node.port
        },
        readonly
      }));
      client2.on("error", (err) => __classPrivateFieldGet(this, _RedisClusterSlots_emit, "f").call(this, "error", err));
      await client2.connect();
      return client2;
    }, _RedisClusterSlots_createNodeClient = function _RedisClusterSlots_createNodeClient2(node) {
      const promise = __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_createClient).call(this, node).then((client2) => {
        node.client = client2;
        return client2;
      }).catch((err) => {
        node.client = void 0;
        throw err;
      });
      node.client = promise;
      return promise;
    }, _RedisClusterSlots_rediscover = async function _RedisClusterSlots_rediscover2(startWith) {
      if (await __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_discover).call(this, startWith.options))
        return;
      return __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_discoverWithRootNodes).call(this);
    }, _RedisClusterSlots_destroy = async function _RedisClusterSlots_destroy2(fn) {
      __classPrivateFieldSet(this, _RedisClusterSlots_isOpen, false, "f");
      const promises = [];
      for (const { master, replicas } of this.shards) {
        if (master.client) {
          promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_execOnNodeClient).call(this, master.client, fn));
        }
        if (master.pubSubClient) {
          promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_execOnNodeClient).call(this, master.pubSubClient, fn));
        }
        if (replicas) {
          for (const { client: client2 } of replicas) {
            if (client2) {
              promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_execOnNodeClient).call(this, client2, fn));
            }
          }
        }
      }
      if (this.pubSubNode) {
        promises.push(__classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_execOnNodeClient).call(this, this.pubSubNode.client, fn));
        this.pubSubNode = void 0;
      }
      __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_resetSlots).call(this);
      this.nodeByAddress.clear();
      await Promise.allSettled(promises);
    }, _RedisClusterSlots_execOnNodeClient = function _RedisClusterSlots_execOnNodeClient2(client2, fn) {
      return util_1.types.isPromise(client2) ? client2.then(fn) : fn(client2);
    }, _RedisClusterSlots_iterateAllNodes = function* _RedisClusterSlots_iterateAllNodes2() {
      let i = Math.floor(Math.random() * (this.masters.length + this.replicas.length));
      if (i < this.masters.length) {
        do {
          yield this.masters[i];
        } while (++i < this.masters.length);
        for (const replica of this.replicas) {
          yield replica;
        }
      } else {
        i -= this.masters.length;
        do {
          yield this.replicas[i];
        } while (++i < this.replicas.length);
      }
      while (true) {
        for (const master of this.masters) {
          yield master;
        }
        for (const replica of this.replicas) {
          yield replica;
        }
      }
    }, _RedisClusterSlots_slotNodesIterator = function* _RedisClusterSlots_slotNodesIterator2(slot) {
      let i = Math.floor(Math.random() * (1 + slot.replicas.length));
      if (i < slot.replicas.length) {
        do {
          yield slot.replicas[i];
        } while (++i < slot.replicas.length);
      }
      while (true) {
        yield slot.master;
        for (const replica of slot.replicas) {
          yield replica;
        }
      }
    }, _RedisClusterSlots_initiatePubSubClient = async function _RedisClusterSlots_initiatePubSubClient2(toResubscribe) {
      const index = Math.floor(Math.random() * (this.masters.length + this.replicas.length)), node = index < this.masters.length ? this.masters[index] : this.replicas[index - this.masters.length];
      this.pubSubNode = {
        address: node.address,
        client: __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_createClient).call(this, node, true).then(async (client2) => {
          if (toResubscribe) {
            await Promise.all([
              client2.extendPubSubListeners(pub_sub_1.PubSubType.CHANNELS, toResubscribe[pub_sub_1.PubSubType.CHANNELS]),
              client2.extendPubSubListeners(pub_sub_1.PubSubType.PATTERNS, toResubscribe[pub_sub_1.PubSubType.PATTERNS])
            ]);
          }
          this.pubSubNode.client = client2;
          return client2;
        }).catch((err) => {
          this.pubSubNode = void 0;
          throw err;
        })
      };
      return this.pubSubNode.client;
    }, _RedisClusterSlots_initiateShardedPubSubClient = function _RedisClusterSlots_initiateShardedPubSubClient2(master) {
      const promise = __classPrivateFieldGet(this, _RedisClusterSlots_instances, "m", _RedisClusterSlots_createClient).call(this, master, true).then((client2) => {
        client2.on("server-sunsubscribe", async (channel, listeners) => {
          try {
            await this.rediscover(client2);
            const redirectTo = await this.getShardedPubSubClient(channel);
            redirectTo.extendPubSubChannelListeners(pub_sub_1.PubSubType.SHARDED, channel, listeners);
          } catch (err) {
            __classPrivateFieldGet(this, _RedisClusterSlots_emit, "f").call(this, "sharded-shannel-moved-error", err, channel, listeners);
          }
        });
        master.pubSubClient = client2;
        return client2;
      }).catch((err) => {
        master.pubSubClient = void 0;
        throw err;
      });
      master.pubSubClient = promise;
      return promise;
    };
    _RedisClusterSlots_SLOTS = { value: 16384 };
    exports2.default = RedisClusterSlots;
  }
});

// node_modules/@redis/client/dist/lib/cluster/multi-command.js
var require_multi_command3 = __commonJS({
  "node_modules/@redis/client/dist/lib/cluster/multi-command.js"(exports2) {
    "use strict";
    var __classPrivateFieldSet = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _RedisClusterMultiCommand_multi;
    var _RedisClusterMultiCommand_executor;
    var _RedisClusterMultiCommand_firstKey;
    Object.defineProperty(exports2, "__esModule", { value: true });
    var commands_1 = require_commands();
    var multi_command_1 = require_multi_command();
    var commander_1 = require_commander();
    var _1 = require_cluster();
    var RedisClusterMultiCommand = class _RedisClusterMultiCommand {
      static extend(extensions) {
        return (0, commander_1.attachExtensions)({
          BaseClass: _RedisClusterMultiCommand,
          modulesExecutor: _RedisClusterMultiCommand.prototype.commandsExecutor,
          modules: extensions?.modules,
          functionsExecutor: _RedisClusterMultiCommand.prototype.functionsExecutor,
          functions: extensions?.functions,
          scriptsExecutor: _RedisClusterMultiCommand.prototype.scriptsExecutor,
          scripts: extensions?.scripts
        });
      }
      constructor(executor, firstKey) {
        _RedisClusterMultiCommand_multi.set(this, new multi_command_1.default());
        _RedisClusterMultiCommand_executor.set(this, void 0);
        _RedisClusterMultiCommand_firstKey.set(this, void 0);
        Object.defineProperty(this, "EXEC", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.exec
        });
        __classPrivateFieldSet(this, _RedisClusterMultiCommand_executor, executor, "f");
        __classPrivateFieldSet(this, _RedisClusterMultiCommand_firstKey, firstKey, "f");
      }
      commandsExecutor(command, args) {
        const transformedArguments = command.transformArguments(...args);
        __classPrivateFieldSet(this, _RedisClusterMultiCommand_firstKey, __classPrivateFieldGet(this, _RedisClusterMultiCommand_firstKey, "f") ?? _1.default.extractFirstKey(command, args, transformedArguments), "f");
        return this.addCommand(void 0, transformedArguments, command.transformReply);
      }
      addCommand(firstKey, args, transformReply) {
        __classPrivateFieldSet(this, _RedisClusterMultiCommand_firstKey, __classPrivateFieldGet(this, _RedisClusterMultiCommand_firstKey, "f") ?? firstKey, "f");
        __classPrivateFieldGet(this, _RedisClusterMultiCommand_multi, "f").addCommand(args, transformReply);
        return this;
      }
      functionsExecutor(fn, args, name) {
        const transformedArguments = __classPrivateFieldGet(this, _RedisClusterMultiCommand_multi, "f").addFunction(name, fn, args);
        __classPrivateFieldSet(this, _RedisClusterMultiCommand_firstKey, __classPrivateFieldGet(this, _RedisClusterMultiCommand_firstKey, "f") ?? _1.default.extractFirstKey(fn, args, transformedArguments), "f");
        return this;
      }
      scriptsExecutor(script, args) {
        const transformedArguments = __classPrivateFieldGet(this, _RedisClusterMultiCommand_multi, "f").addScript(script, args);
        __classPrivateFieldSet(this, _RedisClusterMultiCommand_firstKey, __classPrivateFieldGet(this, _RedisClusterMultiCommand_firstKey, "f") ?? _1.default.extractFirstKey(script, args, transformedArguments), "f");
        return this;
      }
      async exec(execAsPipeline = false) {
        if (execAsPipeline) {
          return this.execAsPipeline();
        }
        return __classPrivateFieldGet(this, _RedisClusterMultiCommand_multi, "f").handleExecReplies(await __classPrivateFieldGet(this, _RedisClusterMultiCommand_executor, "f").call(this, __classPrivateFieldGet(this, _RedisClusterMultiCommand_multi, "f").queue, __classPrivateFieldGet(this, _RedisClusterMultiCommand_firstKey, "f"), multi_command_1.default.generateChainId()));
      }
      async execAsPipeline() {
        return __classPrivateFieldGet(this, _RedisClusterMultiCommand_multi, "f").transformReplies(await __classPrivateFieldGet(this, _RedisClusterMultiCommand_executor, "f").call(this, __classPrivateFieldGet(this, _RedisClusterMultiCommand_multi, "f").queue, __classPrivateFieldGet(this, _RedisClusterMultiCommand_firstKey, "f")));
      }
    };
    _RedisClusterMultiCommand_multi = /* @__PURE__ */ new WeakMap(), _RedisClusterMultiCommand_executor = /* @__PURE__ */ new WeakMap(), _RedisClusterMultiCommand_firstKey = /* @__PURE__ */ new WeakMap();
    exports2.default = RedisClusterMultiCommand;
    (0, commander_1.attachCommands)({
      BaseClass: RedisClusterMultiCommand,
      commands: commands_1.default,
      executor: RedisClusterMultiCommand.prototype.commandsExecutor
    });
  }
});

// node_modules/@redis/client/dist/lib/cluster/index.js
var require_cluster = __commonJS({
  "node_modules/@redis/client/dist/lib/cluster/index.js"(exports2) {
    "use strict";
    var __classPrivateFieldGet = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var _RedisCluster_instances;
    var _RedisCluster_options;
    var _RedisCluster_slots;
    var _RedisCluster_Multi;
    var _RedisCluster_execute;
    Object.defineProperty(exports2, "__esModule", { value: true });
    var commands_1 = require_commands();
    var cluster_slots_1 = require_cluster_slots();
    var commander_1 = require_commander();
    var events_1 = require("events");
    var multi_command_1 = require_multi_command3();
    var errors_1 = require_errors2();
    var RedisCluster = class _RedisCluster extends events_1.EventEmitter {
      static extractFirstKey(command, originalArgs, redisArgs) {
        if (command.FIRST_KEY_INDEX === void 0) {
          return void 0;
        } else if (typeof command.FIRST_KEY_INDEX === "number") {
          return redisArgs[command.FIRST_KEY_INDEX];
        }
        return command.FIRST_KEY_INDEX(...originalArgs);
      }
      static create(options2) {
        return new ((0, commander_1.attachExtensions)({
          BaseClass: _RedisCluster,
          modulesExecutor: _RedisCluster.prototype.commandsExecutor,
          modules: options2?.modules,
          functionsExecutor: _RedisCluster.prototype.functionsExecutor,
          functions: options2?.functions,
          scriptsExecutor: _RedisCluster.prototype.scriptsExecutor,
          scripts: options2?.scripts
        }))(options2);
      }
      get slots() {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").slots;
      }
      get shards() {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").shards;
      }
      get masters() {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").masters;
      }
      get replicas() {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").replicas;
      }
      get nodeByAddress() {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").nodeByAddress;
      }
      get pubSubNode() {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").pubSubNode;
      }
      get isOpen() {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").isOpen;
      }
      constructor(options2) {
        super();
        _RedisCluster_instances.add(this);
        _RedisCluster_options.set(this, void 0);
        _RedisCluster_slots.set(this, void 0);
        _RedisCluster_Multi.set(this, void 0);
        Object.defineProperty(this, "multi", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.MULTI
        });
        Object.defineProperty(this, "subscribe", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.SUBSCRIBE
        });
        Object.defineProperty(this, "unsubscribe", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.UNSUBSCRIBE
        });
        Object.defineProperty(this, "pSubscribe", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.PSUBSCRIBE
        });
        Object.defineProperty(this, "pUnsubscribe", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.PUNSUBSCRIBE
        });
        Object.defineProperty(this, "sSubscribe", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.SSUBSCRIBE
        });
        Object.defineProperty(this, "sUnsubscribe", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: this.SUNSUBSCRIBE
        });
        __classPrivateFieldSet(this, _RedisCluster_options, options2, "f");
        __classPrivateFieldSet(this, _RedisCluster_slots, new cluster_slots_1.default(options2, this.emit.bind(this)), "f");
        __classPrivateFieldSet(this, _RedisCluster_Multi, multi_command_1.default.extend(options2), "f");
      }
      duplicate(overrides) {
        return new (Object.getPrototypeOf(this)).constructor({
          ...__classPrivateFieldGet(this, _RedisCluster_options, "f"),
          ...overrides
        });
      }
      connect() {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").connect();
      }
      async commandsExecutor(command, args) {
        const { jsArgs, args: redisArgs, options: options2 } = (0, commander_1.transformCommandArguments)(command, args);
        return (0, commander_1.transformCommandReply)(command, await this.sendCommand(_RedisCluster.extractFirstKey(command, jsArgs, redisArgs), command.IS_READ_ONLY, redisArgs, options2), redisArgs.preserve);
      }
      async sendCommand(firstKey, isReadonly, args, options2) {
        return __classPrivateFieldGet(this, _RedisCluster_instances, "m", _RedisCluster_execute).call(this, firstKey, isReadonly, (client2) => client2.sendCommand(args, options2));
      }
      async functionsExecutor(fn, args, name) {
        const { args: redisArgs, options: options2 } = (0, commander_1.transformCommandArguments)(fn, args);
        return (0, commander_1.transformCommandReply)(fn, await this.executeFunction(name, fn, args, redisArgs, options2), redisArgs.preserve);
      }
      async executeFunction(name, fn, originalArgs, redisArgs, options2) {
        return __classPrivateFieldGet(this, _RedisCluster_instances, "m", _RedisCluster_execute).call(this, _RedisCluster.extractFirstKey(fn, originalArgs, redisArgs), fn.IS_READ_ONLY, (client2) => client2.executeFunction(name, fn, redisArgs, options2));
      }
      async scriptsExecutor(script, args) {
        const { args: redisArgs, options: options2 } = (0, commander_1.transformCommandArguments)(script, args);
        return (0, commander_1.transformCommandReply)(script, await this.executeScript(script, args, redisArgs, options2), redisArgs.preserve);
      }
      async executeScript(script, originalArgs, redisArgs, options2) {
        return __classPrivateFieldGet(this, _RedisCluster_instances, "m", _RedisCluster_execute).call(this, _RedisCluster.extractFirstKey(script, originalArgs, redisArgs), script.IS_READ_ONLY, (client2) => client2.executeScript(script, redisArgs, options2));
      }
      MULTI(routing) {
        return new (__classPrivateFieldGet(this, _RedisCluster_Multi, "f"))((commands, firstKey, chainId) => {
          return __classPrivateFieldGet(this, _RedisCluster_instances, "m", _RedisCluster_execute).call(this, firstKey, false, (client2) => client2.multiExecutor(commands, void 0, chainId));
        }, routing);
      }
      async SUBSCRIBE(channels, listener, bufferMode) {
        return (await __classPrivateFieldGet(this, _RedisCluster_slots, "f").getPubSubClient()).SUBSCRIBE(channels, listener, bufferMode);
      }
      async UNSUBSCRIBE(channels, listener, bufferMode) {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").executeUnsubscribeCommand((client2) => client2.UNSUBSCRIBE(channels, listener, bufferMode));
      }
      async PSUBSCRIBE(patterns, listener, bufferMode) {
        return (await __classPrivateFieldGet(this, _RedisCluster_slots, "f").getPubSubClient()).PSUBSCRIBE(patterns, listener, bufferMode);
      }
      async PUNSUBSCRIBE(patterns, listener, bufferMode) {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").executeUnsubscribeCommand((client2) => client2.PUNSUBSCRIBE(patterns, listener, bufferMode));
      }
      async SSUBSCRIBE(channels, listener, bufferMode) {
        const maxCommandRedirections = __classPrivateFieldGet(this, _RedisCluster_options, "f").maxCommandRedirections ?? 16, firstChannel = Array.isArray(channels) ? channels[0] : channels;
        let client2 = await __classPrivateFieldGet(this, _RedisCluster_slots, "f").getShardedPubSubClient(firstChannel);
        for (let i = 0; ; i++) {
          try {
            return await client2.SSUBSCRIBE(channels, listener, bufferMode);
          } catch (err) {
            if (++i > maxCommandRedirections || !(err instanceof errors_1.ErrorReply)) {
              throw err;
            }
            if (err.message.startsWith("MOVED")) {
              await __classPrivateFieldGet(this, _RedisCluster_slots, "f").rediscover(client2);
              client2 = await __classPrivateFieldGet(this, _RedisCluster_slots, "f").getShardedPubSubClient(firstChannel);
              continue;
            }
            throw err;
          }
        }
      }
      SUNSUBSCRIBE(channels, listener, bufferMode) {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").executeShardedUnsubscribeCommand(Array.isArray(channels) ? channels[0] : channels, (client2) => client2.SUNSUBSCRIBE(channels, listener, bufferMode));
      }
      quit() {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").quit();
      }
      disconnect() {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").disconnect();
      }
      nodeClient(node) {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").nodeClient(node);
      }
      getRandomNode() {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").getRandomNode();
      }
      getSlotRandomNode(slot) {
        return __classPrivateFieldGet(this, _RedisCluster_slots, "f").getSlotRandomNode(slot);
      }
      /**
       * @deprecated use `.masters` instead
       */
      getMasters() {
        return this.masters;
      }
      /**
       * @deprecated use `.slots[<SLOT>]` instead
       */
      getSlotMaster(slot) {
        return this.slots[slot].master;
      }
    };
    _RedisCluster_options = /* @__PURE__ */ new WeakMap(), _RedisCluster_slots = /* @__PURE__ */ new WeakMap(), _RedisCluster_Multi = /* @__PURE__ */ new WeakMap(), _RedisCluster_instances = /* @__PURE__ */ new WeakSet(), _RedisCluster_execute = async function _RedisCluster_execute2(firstKey, isReadonly, executor) {
      const maxCommandRedirections = __classPrivateFieldGet(this, _RedisCluster_options, "f").maxCommandRedirections ?? 16;
      let client2 = await __classPrivateFieldGet(this, _RedisCluster_slots, "f").getClient(firstKey, isReadonly);
      for (let i = 0; ; i++) {
        try {
          return await executor(client2);
        } catch (err) {
          if (++i > maxCommandRedirections || !(err instanceof errors_1.ErrorReply)) {
            throw err;
          }
          if (err.message.startsWith("ASK")) {
            const address = err.message.substring(err.message.lastIndexOf(" ") + 1);
            let redirectTo = await __classPrivateFieldGet(this, _RedisCluster_slots, "f").getMasterByAddress(address);
            if (!redirectTo) {
              await __classPrivateFieldGet(this, _RedisCluster_slots, "f").rediscover(client2);
              redirectTo = await __classPrivateFieldGet(this, _RedisCluster_slots, "f").getMasterByAddress(address);
            }
            if (!redirectTo) {
              throw new Error(`Cannot find node ${address}`);
            }
            await redirectTo.asking();
            client2 = redirectTo;
            continue;
          } else if (err.message.startsWith("MOVED")) {
            await __classPrivateFieldGet(this, _RedisCluster_slots, "f").rediscover(client2);
            client2 = await __classPrivateFieldGet(this, _RedisCluster_slots, "f").getClient(firstKey, isReadonly);
            continue;
          }
          throw err;
        }
      }
    };
    exports2.default = RedisCluster;
    (0, commander_1.attachCommands)({
      BaseClass: RedisCluster,
      commands: commands_1.default,
      executor: RedisCluster.prototype.commandsExecutor
    });
  }
});

// node_modules/@redis/client/dist/lib/lua-script.js
var require_lua_script = __commonJS({
  "node_modules/@redis/client/dist/lib/lua-script.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.scriptSha1 = exports2.defineScript = void 0;
    var crypto_1 = require("crypto");
    function defineScript(script) {
      return {
        ...script,
        SHA1: scriptSha1(script.SCRIPT)
      };
    }
    exports2.defineScript = defineScript;
    function scriptSha1(script) {
      return (0, crypto_1.createHash)("sha1").update(script).digest("hex");
    }
    exports2.scriptSha1 = scriptSha1;
  }
});

// node_modules/@redis/client/dist/index.js
var require_dist = __commonJS({
  "node_modules/@redis/client/dist/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RedisFlushModes = exports2.GeoReplyWith = exports2.defineScript = exports2.createCluster = exports2.commandOptions = exports2.createClient = void 0;
    var client_1 = require_client2();
    var cluster_1 = require_cluster();
    exports2.createClient = client_1.default.create;
    exports2.commandOptions = client_1.default.commandOptions;
    exports2.createCluster = cluster_1.default.create;
    var lua_script_1 = require_lua_script();
    Object.defineProperty(exports2, "defineScript", { enumerable: true, get: function() {
      return lua_script_1.defineScript;
    } });
    __exportStar(require_errors2(), exports2);
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "GeoReplyWith", { enumerable: true, get: function() {
      return generic_transformers_1.GeoReplyWith;
    } });
    var FLUSHALL_1 = require_FLUSHALL();
    Object.defineProperty(exports2, "RedisFlushModes", { enumerable: true, get: function() {
      return FLUSHALL_1.RedisFlushModes;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/bloom/ADD.js
var require_ADD = __commonJS({
  "node_modules/@redis/bloom/dist/commands/bloom/ADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, item) {
      return ["BF.ADD", key, item];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/bloom/CARD.js
var require_CARD = __commonJS({
  "node_modules/@redis/bloom/dist/commands/bloom/CARD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["BF.CARD", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/bloom/EXISTS.js
var require_EXISTS2 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/bloom/EXISTS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, item) {
      return ["BF.EXISTS", key, item];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/bloom/INFO.js
var require_INFO2 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/bloom/INFO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["BF.INFO", key];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        capacity: reply[1],
        size: reply[3],
        numberOfFilters: reply[5],
        numberOfInsertedItems: reply[7],
        expansionRate: reply[9]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/bloom/dist/commands/bloom/INSERT.js
var require_INSERT = __commonJS({
  "node_modules/@redis/bloom/dist/commands/bloom/INSERT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, items, options2) {
      const args = ["BF.INSERT", key];
      if (options2?.CAPACITY) {
        args.push("CAPACITY", options2.CAPACITY.toString());
      }
      if (options2?.ERROR) {
        args.push("ERROR", options2.ERROR.toString());
      }
      if (options2?.EXPANSION) {
        args.push("EXPANSION", options2.EXPANSION.toString());
      }
      if (options2?.NOCREATE) {
        args.push("NOCREATE");
      }
      if (options2?.NONSCALING) {
        args.push("NONSCALING");
      }
      args.push("ITEMS");
      return (0, generic_transformers_1.pushVerdictArguments)(args, items);
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_2 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_2.transformBooleanArrayReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/bloom/LOADCHUNK.js
var require_LOADCHUNK = __commonJS({
  "node_modules/@redis/bloom/dist/commands/bloom/LOADCHUNK.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, iteretor, chunk) {
      return ["BF.LOADCHUNK", key, iteretor.toString(), chunk];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/bloom/MADD.js
var require_MADD = __commonJS({
  "node_modules/@redis/bloom/dist/commands/bloom/MADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, items) {
      return ["BF.MADD", key, ...items];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanArrayReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/bloom/MEXISTS.js
var require_MEXISTS = __commonJS({
  "node_modules/@redis/bloom/dist/commands/bloom/MEXISTS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, items) {
      return ["BF.MEXISTS", key, ...items];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanArrayReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/bloom/RESERVE.js
var require_RESERVE = __commonJS({
  "node_modules/@redis/bloom/dist/commands/bloom/RESERVE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, errorRate, capacity, options2) {
      const args = ["BF.RESERVE", key, errorRate.toString(), capacity.toString()];
      if (options2?.EXPANSION) {
        args.push("EXPANSION", options2.EXPANSION.toString());
      }
      if (options2?.NONSCALING) {
        args.push("NONSCALING");
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/bloom/SCANDUMP.js
var require_SCANDUMP = __commonJS({
  "node_modules/@redis/bloom/dist/commands/bloom/SCANDUMP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, iterator) {
      return ["BF.SCANDUMP", key, iterator.toString()];
    }
    exports2.transformArguments = transformArguments;
    function transformReply([iterator, chunk]) {
      return {
        iterator,
        chunk
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/bloom/dist/commands/bloom/index.js
var require_bloom = __commonJS({
  "node_modules/@redis/bloom/dist/commands/bloom/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var ADD = require_ADD();
    var CARD = require_CARD();
    var EXISTS = require_EXISTS2();
    var INFO = require_INFO2();
    var INSERT = require_INSERT();
    var LOADCHUNK = require_LOADCHUNK();
    var MADD = require_MADD();
    var MEXISTS = require_MEXISTS();
    var RESERVE = require_RESERVE();
    var SCANDUMP = require_SCANDUMP();
    exports2.default = {
      ADD,
      add: ADD,
      CARD,
      card: CARD,
      EXISTS,
      exists: EXISTS,
      INFO,
      info: INFO,
      INSERT,
      insert: INSERT,
      LOADCHUNK,
      loadChunk: LOADCHUNK,
      MADD,
      mAdd: MADD,
      MEXISTS,
      mExists: MEXISTS,
      RESERVE,
      reserve: RESERVE,
      SCANDUMP,
      scanDump: SCANDUMP
    };
  }
});

// node_modules/@redis/bloom/dist/commands/count-min-sketch/INCRBY.js
var require_INCRBY2 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/count-min-sketch/INCRBY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, items) {
      const args = ["CMS.INCRBY", key];
      if (Array.isArray(items)) {
        for (const item of items) {
          pushIncrByItem(args, item);
        }
      } else {
        pushIncrByItem(args, items);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function pushIncrByItem(args, { item, incrementBy }) {
      args.push(item, incrementBy.toString());
    }
  }
});

// node_modules/@redis/bloom/dist/commands/count-min-sketch/INFO.js
var require_INFO3 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/count-min-sketch/INFO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["CMS.INFO", key];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        width: reply[1],
        depth: reply[3],
        count: reply[5]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/bloom/dist/commands/count-min-sketch/INITBYDIM.js
var require_INITBYDIM = __commonJS({
  "node_modules/@redis/bloom/dist/commands/count-min-sketch/INITBYDIM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, width, depth) {
      return ["CMS.INITBYDIM", key, width.toString(), depth.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/count-min-sketch/INITBYPROB.js
var require_INITBYPROB = __commonJS({
  "node_modules/@redis/bloom/dist/commands/count-min-sketch/INITBYPROB.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, error, probability) {
      return ["CMS.INITBYPROB", key, error.toString(), probability.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/count-min-sketch/MERGE.js
var require_MERGE = __commonJS({
  "node_modules/@redis/bloom/dist/commands/count-min-sketch/MERGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(dest, src) {
      const args = [
        "CMS.MERGE",
        dest,
        src.length.toString()
      ];
      if (isStringSketches(src)) {
        args.push(...src);
      } else {
        for (const sketch of src) {
          args.push(sketch.name);
        }
        args.push("WEIGHTS");
        for (const sketch of src) {
          args.push(sketch.weight.toString());
        }
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function isStringSketches(src) {
      return typeof src[0] === "string";
    }
  }
});

// node_modules/@redis/bloom/dist/commands/count-min-sketch/QUERY.js
var require_QUERY = __commonJS({
  "node_modules/@redis/bloom/dist/commands/count-min-sketch/QUERY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, items) {
      return (0, generic_transformers_1.pushVerdictArguments)(["CMS.QUERY", key], items);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/count-min-sketch/index.js
var require_count_min_sketch = __commonJS({
  "node_modules/@redis/bloom/dist/commands/count-min-sketch/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var INCRBY = require_INCRBY2();
    var INFO = require_INFO3();
    var INITBYDIM = require_INITBYDIM();
    var INITBYPROB = require_INITBYPROB();
    var MERGE = require_MERGE();
    var QUERY = require_QUERY();
    exports2.default = {
      INCRBY,
      incrBy: INCRBY,
      INFO,
      info: INFO,
      INITBYDIM,
      initByDim: INITBYDIM,
      INITBYPROB,
      initByProb: INITBYPROB,
      MERGE,
      merge: MERGE,
      QUERY,
      query: QUERY
    };
  }
});

// node_modules/@redis/bloom/dist/commands/cuckoo/ADD.js
var require_ADD2 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/cuckoo/ADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, item) {
      return ["CF.ADD", key, item];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/cuckoo/ADDNX.js
var require_ADDNX = __commonJS({
  "node_modules/@redis/bloom/dist/commands/cuckoo/ADDNX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, item) {
      return ["CF.ADDNX", key, item];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/cuckoo/COUNT.js
var require_COUNT = __commonJS({
  "node_modules/@redis/bloom/dist/commands/cuckoo/COUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, item) {
      return ["CF.COUNT", key, item];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/cuckoo/DEL.js
var require_DEL2 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/cuckoo/DEL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, item) {
      return ["CF.DEL", key, item];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/cuckoo/EXISTS.js
var require_EXISTS3 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/cuckoo/EXISTS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, item) {
      return ["CF.EXISTS", key, item];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/cuckoo/INFO.js
var require_INFO4 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/cuckoo/INFO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["CF.INFO", key];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        size: reply[1],
        numberOfBuckets: reply[3],
        numberOfFilters: reply[5],
        numberOfInsertedItems: reply[7],
        numberOfDeletedItems: reply[9],
        bucketSize: reply[11],
        expansionRate: reply[13],
        maxIteration: reply[15]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/bloom/dist/commands/cuckoo/INSERT.js
var require_INSERT2 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/cuckoo/INSERT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_cuckoo();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, items, options2) {
      return (0, _1.pushInsertOptions)(["CF.INSERT", key], items, options2);
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanArrayReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/cuckoo/INSERTNX.js
var require_INSERTNX = __commonJS({
  "node_modules/@redis/bloom/dist/commands/cuckoo/INSERTNX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_cuckoo();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, items, options2) {
      return (0, _1.pushInsertOptions)(["CF.INSERTNX", key], items, options2);
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanArrayReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/cuckoo/LOADCHUNK.js
var require_LOADCHUNK2 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/cuckoo/LOADCHUNK.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, iterator, chunk) {
      return ["CF.LOADCHUNK", key, iterator.toString(), chunk];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/cuckoo/RESERVE.js
var require_RESERVE2 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/cuckoo/RESERVE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, capacity, options2) {
      const args = ["CF.RESERVE", key, capacity.toString()];
      if (options2?.BUCKETSIZE) {
        args.push("BUCKETSIZE", options2.BUCKETSIZE.toString());
      }
      if (options2?.MAXITERATIONS) {
        args.push("MAXITERATIONS", options2.MAXITERATIONS.toString());
      }
      if (options2?.EXPANSION) {
        args.push("EXPANSION", options2.EXPANSION.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/cuckoo/SCANDUMP.js
var require_SCANDUMP2 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/cuckoo/SCANDUMP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, iterator) {
      return ["CF.SCANDUMP", key, iterator.toString()];
    }
    exports2.transformArguments = transformArguments;
    function transformReply([iterator, chunk]) {
      return {
        iterator,
        chunk
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/bloom/dist/commands/cuckoo/index.js
var require_cuckoo = __commonJS({
  "node_modules/@redis/bloom/dist/commands/cuckoo/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pushInsertOptions = void 0;
    var ADD = require_ADD2();
    var ADDNX = require_ADDNX();
    var COUNT = require_COUNT();
    var DEL = require_DEL2();
    var EXISTS = require_EXISTS3();
    var INFO = require_INFO4();
    var INSERT = require_INSERT2();
    var INSERTNX = require_INSERTNX();
    var LOADCHUNK = require_LOADCHUNK2();
    var RESERVE = require_RESERVE2();
    var SCANDUMP = require_SCANDUMP2();
    var generic_transformers_1 = require_generic_transformers();
    exports2.default = {
      ADD,
      add: ADD,
      ADDNX,
      addNX: ADDNX,
      COUNT,
      count: COUNT,
      DEL,
      del: DEL,
      EXISTS,
      exists: EXISTS,
      INFO,
      info: INFO,
      INSERT,
      insert: INSERT,
      INSERTNX,
      insertNX: INSERTNX,
      LOADCHUNK,
      loadChunk: LOADCHUNK,
      RESERVE,
      reserve: RESERVE,
      SCANDUMP,
      scanDump: SCANDUMP
    };
    function pushInsertOptions(args, items, options2) {
      if (options2?.CAPACITY) {
        args.push("CAPACITY");
        args.push(options2.CAPACITY.toString());
      }
      if (options2?.NOCREATE) {
        args.push("NOCREATE");
      }
      args.push("ITEMS");
      return (0, generic_transformers_1.pushVerdictArguments)(args, items);
    }
    exports2.pushInsertOptions = pushInsertOptions;
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/ADD.js
var require_ADD3 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/ADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, values) {
      const args = ["TDIGEST.ADD", key];
      for (const item of values) {
        args.push(item.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/BYRANK.js
var require_BYRANK = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/BYRANK.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, ranks) {
      const args = ["TDIGEST.BYRANK", key];
      for (const rank of ranks) {
        args.push(rank.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var _1 = require_t_digest();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _1.transformDoublesReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/BYREVRANK.js
var require_BYREVRANK = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/BYREVRANK.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, ranks) {
      const args = ["TDIGEST.BYREVRANK", key];
      for (const rank of ranks) {
        args.push(rank.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var _1 = require_t_digest();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _1.transformDoublesReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/CDF.js
var require_CDF = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/CDF.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, values) {
      const args = ["TDIGEST.CDF", key];
      for (const item of values) {
        args.push(item.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var _1 = require_t_digest();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _1.transformDoublesReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/CREATE.js
var require_CREATE = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/CREATE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_t_digest();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, options2) {
      return (0, _1.pushCompressionArgument)(["TDIGEST.CREATE", key], options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/INFO.js
var require_INFO5 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/INFO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return [
        "TDIGEST.INFO",
        key
      ];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        comperssion: reply[1],
        capacity: reply[3],
        mergedNodes: reply[5],
        unmergedNodes: reply[7],
        mergedWeight: Number(reply[9]),
        unmergedWeight: Number(reply[11]),
        totalCompression: reply[13]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/MAX.js
var require_MAX = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/MAX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return [
        "TDIGEST.MAX",
        key
      ];
    }
    exports2.transformArguments = transformArguments;
    var _1 = require_t_digest();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _1.transformDoubleReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/MERGE.js
var require_MERGE2 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/MERGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    var _1 = require_t_digest();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(destKey, srcKeys, options2) {
      const args = (0, generic_transformers_1.pushVerdictArgument)(["TDIGEST.MERGE", destKey], srcKeys);
      (0, _1.pushCompressionArgument)(args, options2);
      if (options2?.OVERRIDE) {
        args.push("OVERRIDE");
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/MIN.js
var require_MIN = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/MIN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return [
        "TDIGEST.MIN",
        key
      ];
    }
    exports2.transformArguments = transformArguments;
    var _1 = require_t_digest();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _1.transformDoubleReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/QUANTILE.js
var require_QUANTILE = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/QUANTILE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, quantiles) {
      const args = [
        "TDIGEST.QUANTILE",
        key
      ];
      for (const quantile of quantiles) {
        args.push(quantile.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var _1 = require_t_digest();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _1.transformDoublesReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/RANK.js
var require_RANK = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/RANK.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, values) {
      const args = ["TDIGEST.RANK", key];
      for (const item of values) {
        args.push(item.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/RESET.js
var require_RESET = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/RESET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["TDIGEST.RESET", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/REVRANK.js
var require_REVRANK = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/REVRANK.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, values) {
      const args = ["TDIGEST.REVRANK", key];
      for (const item of values) {
        args.push(item.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/TRIMMED_MEAN.js
var require_TRIMMED_MEAN = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/TRIMMED_MEAN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, lowCutPercentile, highCutPercentile) {
      return [
        "TDIGEST.TRIMMED_MEAN",
        key,
        lowCutPercentile.toString(),
        highCutPercentile.toString()
      ];
    }
    exports2.transformArguments = transformArguments;
    var _1 = require_t_digest();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _1.transformDoubleReply;
    } });
  }
});

// node_modules/@redis/bloom/dist/commands/t-digest/index.js
var require_t_digest = __commonJS({
  "node_modules/@redis/bloom/dist/commands/t-digest/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformDoublesReply = exports2.transformDoubleReply = exports2.pushCompressionArgument = void 0;
    var ADD = require_ADD3();
    var BYRANK = require_BYRANK();
    var BYREVRANK = require_BYREVRANK();
    var CDF = require_CDF();
    var CREATE = require_CREATE();
    var INFO = require_INFO5();
    var MAX = require_MAX();
    var MERGE = require_MERGE2();
    var MIN = require_MIN();
    var QUANTILE = require_QUANTILE();
    var RANK = require_RANK();
    var RESET = require_RESET();
    var REVRANK = require_REVRANK();
    var TRIMMED_MEAN = require_TRIMMED_MEAN();
    exports2.default = {
      ADD,
      add: ADD,
      BYRANK,
      byRank: BYRANK,
      BYREVRANK,
      byRevRank: BYREVRANK,
      CDF,
      cdf: CDF,
      CREATE,
      create: CREATE,
      INFO,
      info: INFO,
      MAX,
      max: MAX,
      MERGE,
      merge: MERGE,
      MIN,
      min: MIN,
      QUANTILE,
      quantile: QUANTILE,
      RANK,
      rank: RANK,
      RESET,
      reset: RESET,
      REVRANK,
      revRank: REVRANK,
      TRIMMED_MEAN,
      trimmedMean: TRIMMED_MEAN
    };
    function pushCompressionArgument(args, options2) {
      if (options2?.COMPRESSION) {
        args.push("COMPRESSION", options2.COMPRESSION.toString());
      }
      return args;
    }
    exports2.pushCompressionArgument = pushCompressionArgument;
    function transformDoubleReply(reply) {
      switch (reply) {
        case "inf":
          return Infinity;
        case "-inf":
          return -Infinity;
        case "nan":
          return NaN;
        default:
          return parseFloat(reply);
      }
    }
    exports2.transformDoubleReply = transformDoubleReply;
    function transformDoublesReply(reply) {
      return reply.map(transformDoubleReply);
    }
    exports2.transformDoublesReply = transformDoublesReply;
  }
});

// node_modules/@redis/bloom/dist/commands/top-k/ADD.js
var require_ADD4 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/top-k/ADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, items) {
      return (0, generic_transformers_1.pushVerdictArguments)(["TOPK.ADD", key], items);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/top-k/COUNT.js
var require_COUNT2 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/top-k/COUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, items) {
      return (0, generic_transformers_1.pushVerdictArguments)(["TOPK.COUNT", key], items);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/top-k/INCRBY.js
var require_INCRBY3 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/top-k/INCRBY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, items) {
      const args = ["TOPK.INCRBY", key];
      if (Array.isArray(items)) {
        for (const item of items) {
          pushIncrByItem(args, item);
        }
      } else {
        pushIncrByItem(args, items);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function pushIncrByItem(args, { item, incrementBy }) {
      args.push(item, incrementBy.toString());
    }
  }
});

// node_modules/@redis/bloom/dist/commands/top-k/INFO.js
var require_INFO6 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/top-k/INFO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["TOPK.INFO", key];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        k: reply[1],
        width: reply[3],
        depth: reply[5],
        decay: Number(reply[7])
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/bloom/dist/commands/top-k/LIST_WITHCOUNT.js
var require_LIST_WITHCOUNT = __commonJS({
  "node_modules/@redis/bloom/dist/commands/top-k/LIST_WITHCOUNT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["TOPK.LIST", key, "WITHCOUNT"];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(rawReply) {
      const reply = [];
      for (let i = 0; i < rawReply.length; i++) {
        reply.push({
          item: rawReply[i],
          count: rawReply[++i]
        });
      }
      return reply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/bloom/dist/commands/top-k/LIST.js
var require_LIST = __commonJS({
  "node_modules/@redis/bloom/dist/commands/top-k/LIST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["TOPK.LIST", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/top-k/QUERY.js
var require_QUERY2 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/top-k/QUERY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, items) {
      return (0, generic_transformers_1.pushVerdictArguments)(["TOPK.QUERY", key], items);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/top-k/RESERVE.js
var require_RESERVE3 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/top-k/RESERVE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, topK, options2) {
      const args = ["TOPK.RESERVE", key, topK.toString()];
      if (options2) {
        args.push(options2.width.toString(), options2.depth.toString(), options2.decay.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/bloom/dist/commands/top-k/index.js
var require_top_k = __commonJS({
  "node_modules/@redis/bloom/dist/commands/top-k/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var ADD = require_ADD4();
    var COUNT = require_COUNT2();
    var INCRBY = require_INCRBY3();
    var INFO = require_INFO6();
    var LIST_WITHCOUNT = require_LIST_WITHCOUNT();
    var LIST = require_LIST();
    var QUERY = require_QUERY2();
    var RESERVE = require_RESERVE3();
    exports2.default = {
      ADD,
      add: ADD,
      COUNT,
      count: COUNT,
      INCRBY,
      incrBy: INCRBY,
      INFO,
      info: INFO,
      LIST_WITHCOUNT,
      listWithCount: LIST_WITHCOUNT,
      LIST,
      list: LIST,
      QUERY,
      query: QUERY,
      RESERVE,
      reserve: RESERVE
    };
  }
});

// node_modules/@redis/bloom/dist/commands/index.js
var require_commands3 = __commonJS({
  "node_modules/@redis/bloom/dist/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var bloom_1 = require_bloom();
    var count_min_sketch_1 = require_count_min_sketch();
    var cuckoo_1 = require_cuckoo();
    var t_digest_1 = require_t_digest();
    var top_k_1 = require_top_k();
    exports2.default = {
      bf: bloom_1.default,
      cms: count_min_sketch_1.default,
      cf: cuckoo_1.default,
      tDigest: t_digest_1.default,
      topK: top_k_1.default
    };
  }
});

// node_modules/@redis/bloom/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@redis/bloom/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.default = void 0;
    var commands_1 = require_commands3();
    Object.defineProperty(exports2, "default", { enumerable: true, get: function() {
      return commands_1.default;
    } });
  }
});

// node_modules/@redis/graph/dist/commands/CONFIG_GET.js
var require_CONFIG_GET2 = __commonJS({
  "node_modules/@redis/graph/dist/commands/CONFIG_GET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments(configKey) {
      return ["GRAPH.CONFIG", "GET", configKey];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/graph/dist/commands/CONFIG_SET.js
var require_CONFIG_SET2 = __commonJS({
  "node_modules/@redis/graph/dist/commands/CONFIG_SET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(configKey, value) {
      return [
        "GRAPH.CONFIG",
        "SET",
        configKey,
        value.toString()
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/graph/dist/commands/DELETE.js
var require_DELETE = __commonJS({
  "node_modules/@redis/graph/dist/commands/DELETE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["GRAPH.DELETE", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/graph/dist/commands/EXPLAIN.js
var require_EXPLAIN = __commonJS({
  "node_modules/@redis/graph/dist/commands/EXPLAIN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, query) {
      return ["GRAPH.EXPLAIN", key, query];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/graph/dist/commands/LIST.js
var require_LIST2 = __commonJS({
  "node_modules/@redis/graph/dist/commands/LIST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments() {
      return ["GRAPH.LIST"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/graph/dist/commands/PROFILE.js
var require_PROFILE = __commonJS({
  "node_modules/@redis/graph/dist/commands/PROFILE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, query) {
      return ["GRAPH.PROFILE", key, query];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/graph/dist/commands/QUERY.js
var require_QUERY3 = __commonJS({
  "node_modules/@redis/graph/dist/commands/QUERY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands4();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(graph, query, options2, compact) {
      return (0, _1.pushQueryArguments)(["GRAPH.QUERY"], graph, query, options2, compact);
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.length === 1 ? {
        headers: void 0,
        data: void 0,
        metadata: reply[0]
      } : {
        headers: reply[0],
        data: reply[1],
        metadata: reply[2]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/graph/dist/commands/RO_QUERY.js
var require_RO_QUERY = __commonJS({
  "node_modules/@redis/graph/dist/commands/RO_QUERY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands4();
    var QUERY_1 = require_QUERY3();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return QUERY_1.FIRST_KEY_INDEX;
    } });
    exports2.IS_READ_ONLY = true;
    function transformArguments(graph, query, options2, compact) {
      return (0, _1.pushQueryArguments)(["GRAPH.RO_QUERY"], graph, query, options2, compact);
    }
    exports2.transformArguments = transformArguments;
    var QUERY_2 = require_QUERY3();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return QUERY_2.transformReply;
    } });
  }
});

// node_modules/@redis/graph/dist/commands/SLOWLOG.js
var require_SLOWLOG = __commonJS({
  "node_modules/@redis/graph/dist/commands/SLOWLOG.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key) {
      return ["GRAPH.SLOWLOG", key];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(logs) {
      return logs.map(([timestamp, command, query, took]) => ({
        timestamp: new Date(Number(timestamp) * 1e3),
        command,
        query,
        took: Number(took)
      }));
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/graph/dist/commands/index.js
var require_commands4 = __commonJS({
  "node_modules/@redis/graph/dist/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pushQueryArguments = void 0;
    var CONFIG_GET = require_CONFIG_GET2();
    var CONFIG_SET = require_CONFIG_SET2();
    var DELETE = require_DELETE();
    var EXPLAIN = require_EXPLAIN();
    var LIST = require_LIST2();
    var PROFILE = require_PROFILE();
    var QUERY = require_QUERY3();
    var RO_QUERY = require_RO_QUERY();
    var SLOWLOG = require_SLOWLOG();
    exports2.default = {
      CONFIG_GET,
      configGet: CONFIG_GET,
      CONFIG_SET,
      configSet: CONFIG_SET,
      DELETE,
      delete: DELETE,
      EXPLAIN,
      explain: EXPLAIN,
      LIST,
      list: LIST,
      PROFILE,
      profile: PROFILE,
      QUERY,
      query: QUERY,
      RO_QUERY,
      roQuery: RO_QUERY,
      SLOWLOG,
      slowLog: SLOWLOG
    };
    function pushQueryArguments(args, graph, query, options2, compact) {
      args.push(graph);
      if (typeof options2 === "number") {
        args.push(query);
        pushTimeout(args, options2);
      } else {
        args.push(options2?.params ? `CYPHER ${queryParamsToString(options2.params)} ${query}` : query);
        if (options2?.TIMEOUT !== void 0) {
          pushTimeout(args, options2.TIMEOUT);
        }
      }
      if (compact) {
        args.push("--compact");
      }
      return args;
    }
    exports2.pushQueryArguments = pushQueryArguments;
    function pushTimeout(args, timeout2) {
      args.push("TIMEOUT", timeout2.toString());
    }
    function queryParamsToString(params) {
      const parts = [];
      for (const [key, value] of Object.entries(params)) {
        parts.push(`${key}=${queryParamToString(value)}`);
      }
      return parts.join(" ");
    }
    function queryParamToString(param) {
      if (param === null) {
        return "null";
      }
      switch (typeof param) {
        case "string":
          return `"${param.replace(/["\\]/g, "\\$&")}"`;
        case "number":
        case "boolean":
          return param.toString();
      }
      if (Array.isArray(param)) {
        return `[${param.map(queryParamToString).join(",")}]`;
      } else if (typeof param === "object") {
        const body = [];
        for (const [key, value] of Object.entries(param)) {
          body.push(`${key}:${queryParamToString(value)}`);
        }
        return `{${body.join(",")}}`;
      } else {
        throw new TypeError(`Unexpected param type ${typeof param} ${param}`);
      }
    }
  }
});

// node_modules/@redis/graph/dist/graph.js
var require_graph = __commonJS({
  "node_modules/@redis/graph/dist/graph.js"(exports2) {
    "use strict";
    var __classPrivateFieldSet = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var _Graph_instances;
    var _Graph_client;
    var _Graph_name;
    var _Graph_metadata;
    var _Graph_setMetadataPromise;
    var _Graph_updateMetadata;
    var _Graph_setMetadata;
    var _Graph_cleanMetadataArray;
    var _Graph_getMetadata;
    var _Graph_getMetadataAsync;
    var _Graph_parseReply;
    var _Graph_parseValue;
    var _Graph_parseEdge;
    var _Graph_parseNode;
    var _Graph_parseProperties;
    Object.defineProperty(exports2, "__esModule", { value: true });
    var GraphValueTypes;
    (function(GraphValueTypes2) {
      GraphValueTypes2[GraphValueTypes2["UNKNOWN"] = 0] = "UNKNOWN";
      GraphValueTypes2[GraphValueTypes2["NULL"] = 1] = "NULL";
      GraphValueTypes2[GraphValueTypes2["STRING"] = 2] = "STRING";
      GraphValueTypes2[GraphValueTypes2["INTEGER"] = 3] = "INTEGER";
      GraphValueTypes2[GraphValueTypes2["BOOLEAN"] = 4] = "BOOLEAN";
      GraphValueTypes2[GraphValueTypes2["DOUBLE"] = 5] = "DOUBLE";
      GraphValueTypes2[GraphValueTypes2["ARRAY"] = 6] = "ARRAY";
      GraphValueTypes2[GraphValueTypes2["EDGE"] = 7] = "EDGE";
      GraphValueTypes2[GraphValueTypes2["NODE"] = 8] = "NODE";
      GraphValueTypes2[GraphValueTypes2["PATH"] = 9] = "PATH";
      GraphValueTypes2[GraphValueTypes2["MAP"] = 10] = "MAP";
      GraphValueTypes2[GraphValueTypes2["POINT"] = 11] = "POINT";
    })(GraphValueTypes || (GraphValueTypes = {}));
    var Graph = class {
      constructor(client2, name) {
        _Graph_instances.add(this);
        _Graph_client.set(this, void 0);
        _Graph_name.set(this, void 0);
        _Graph_metadata.set(this, void 0);
        _Graph_setMetadataPromise.set(this, void 0);
        __classPrivateFieldSet(this, _Graph_client, client2, "f");
        __classPrivateFieldSet(this, _Graph_name, name, "f");
      }
      async query(query, options2) {
        return __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseReply).call(this, await __classPrivateFieldGet(this, _Graph_client, "f").graph.query(__classPrivateFieldGet(this, _Graph_name, "f"), query, options2, true));
      }
      async roQuery(query, options2) {
        return __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseReply).call(this, await __classPrivateFieldGet(this, _Graph_client, "f").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, "f"), query, options2, true));
      }
    };
    _Graph_client = /* @__PURE__ */ new WeakMap(), _Graph_name = /* @__PURE__ */ new WeakMap(), _Graph_metadata = /* @__PURE__ */ new WeakMap(), _Graph_setMetadataPromise = /* @__PURE__ */ new WeakMap(), _Graph_instances = /* @__PURE__ */ new WeakSet(), _Graph_updateMetadata = function _Graph_updateMetadata2() {
      __classPrivateFieldSet(this, _Graph_setMetadataPromise, __classPrivateFieldGet(this, _Graph_setMetadataPromise, "f") ?? __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_setMetadata).call(this).finally(() => __classPrivateFieldSet(this, _Graph_setMetadataPromise, void 0, "f")), "f");
      return __classPrivateFieldGet(this, _Graph_setMetadataPromise, "f");
    }, _Graph_setMetadata = // DO NOT use directly, use #updateMetadata instead
    async function _Graph_setMetadata2() {
      const [labels, relationshipTypes, propertyKeys] = await Promise.all([
        __classPrivateFieldGet(this, _Graph_client, "f").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, "f"), "CALL db.labels()"),
        __classPrivateFieldGet(this, _Graph_client, "f").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, "f"), "CALL db.relationshipTypes()"),
        __classPrivateFieldGet(this, _Graph_client, "f").graph.roQuery(__classPrivateFieldGet(this, _Graph_name, "f"), "CALL db.propertyKeys()")
      ]);
      __classPrivateFieldSet(this, _Graph_metadata, {
        labels: __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_cleanMetadataArray).call(this, labels.data),
        relationshipTypes: __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_cleanMetadataArray).call(this, relationshipTypes.data),
        propertyKeys: __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_cleanMetadataArray).call(this, propertyKeys.data)
      }, "f");
      return __classPrivateFieldGet(this, _Graph_metadata, "f");
    }, _Graph_cleanMetadataArray = function _Graph_cleanMetadataArray2(arr) {
      return arr.map(([value]) => value);
    }, _Graph_getMetadata = function _Graph_getMetadata2(key, id) {
      return __classPrivateFieldGet(this, _Graph_metadata, "f")?.[key][id] ?? __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_getMetadataAsync).call(this, key, id);
    }, _Graph_getMetadataAsync = // DO NOT use directly, use #getMetadata instead
    async function _Graph_getMetadataAsync2(key, id) {
      const value = (await __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_updateMetadata).call(this))[key][id];
      if (value === void 0)
        throw new Error(`Cannot find value from ${key}[${id}]`);
      return value;
    }, _Graph_parseReply = async function _Graph_parseReply2(reply) {
      if (!reply.data)
        return reply;
      const promises = [], parsed = {
        metadata: reply.metadata,
        data: reply.data.map((row) => {
          const data = {};
          for (let i = 0; i < row.length; i++) {
            data[reply.headers[i][1]] = __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseValue).call(this, row[i], promises);
          }
          return data;
        })
      };
      if (promises.length)
        await Promise.all(promises);
      return parsed;
    }, _Graph_parseValue = function _Graph_parseValue2([valueType, value], promises) {
      switch (valueType) {
        case GraphValueTypes.NULL:
          return null;
        case GraphValueTypes.STRING:
        case GraphValueTypes.INTEGER:
          return value;
        case GraphValueTypes.BOOLEAN:
          return value === "true";
        case GraphValueTypes.DOUBLE:
          return parseFloat(value);
        case GraphValueTypes.ARRAY:
          return value.map((x) => __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseValue2).call(this, x, promises));
        case GraphValueTypes.EDGE:
          return __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseEdge).call(this, value, promises);
        case GraphValueTypes.NODE:
          return __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseNode).call(this, value, promises);
        case GraphValueTypes.PATH:
          return {
            nodes: value[0][1].map(([, node]) => __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseNode).call(this, node, promises)),
            edges: value[1][1].map(([, edge]) => __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseEdge).call(this, edge, promises))
          };
        case GraphValueTypes.MAP:
          const map = {};
          for (let i = 0; i < value.length; i++) {
            map[value[i++]] = __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseValue2).call(this, value[i], promises);
          }
          return map;
        case GraphValueTypes.POINT:
          return {
            latitude: parseFloat(value[0]),
            longitude: parseFloat(value[1])
          };
        default:
          throw new Error(`unknown scalar type: ${valueType}`);
      }
    }, _Graph_parseEdge = function _Graph_parseEdge2([id, relationshipTypeId, sourceId, destinationId, properties], promises) {
      const edge = {
        id,
        sourceId,
        destinationId,
        properties: __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseProperties).call(this, properties, promises)
      };
      const relationshipType = __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_getMetadata).call(this, "relationshipTypes", relationshipTypeId);
      if (relationshipType instanceof Promise) {
        promises.push(relationshipType.then((value) => edge.relationshipType = value));
      } else {
        edge.relationshipType = relationshipType;
      }
      return edge;
    }, _Graph_parseNode = function _Graph_parseNode2([id, labelIds, properties], promises) {
      const labels = new Array(labelIds.length);
      for (let i = 0; i < labelIds.length; i++) {
        const value = __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_getMetadata).call(this, "labels", labelIds[i]);
        if (value instanceof Promise) {
          promises.push(value.then((value2) => labels[i] = value2));
        } else {
          labels[i] = value;
        }
      }
      return {
        id,
        labels,
        properties: __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseProperties).call(this, properties, promises)
      };
    }, _Graph_parseProperties = function _Graph_parseProperties2(raw, promises) {
      const parsed = {};
      for (const [id, type, value] of raw) {
        const parsedValue = __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_parseValue).call(this, [type, value], promises), key = __classPrivateFieldGet(this, _Graph_instances, "m", _Graph_getMetadata).call(this, "propertyKeys", id);
        if (key instanceof Promise) {
          promises.push(key.then((key2) => parsed[key2] = parsedValue));
        } else {
          parsed[key] = parsedValue;
        }
      }
      return parsed;
    };
    exports2.default = Graph;
  }
});

// node_modules/@redis/graph/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/@redis/graph/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Graph = exports2.default = void 0;
    var commands_1 = require_commands4();
    Object.defineProperty(exports2, "default", { enumerable: true, get: function() {
      return commands_1.default;
    } });
    var graph_1 = require_graph();
    Object.defineProperty(exports2, "Graph", { enumerable: true, get: function() {
      return graph_1.default;
    } });
  }
});

// node_modules/@redis/json/dist/commands/ARRAPPEND.js
var require_ARRAPPEND = __commonJS({
  "node_modules/@redis/json/dist/commands/ARRAPPEND.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands5();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path, ...jsons) {
      const args = ["JSON.ARRAPPEND", key, path];
      for (const json of jsons) {
        args.push((0, _1.transformRedisJsonArgument)(json));
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/ARRINDEX.js
var require_ARRINDEX = __commonJS({
  "node_modules/@redis/json/dist/commands/ARRINDEX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands5();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, path, json, start, stop) {
      const args = ["JSON.ARRINDEX", key, path, (0, _1.transformRedisJsonArgument)(json)];
      if (start !== void 0 && start !== null) {
        args.push(start.toString());
        if (stop !== void 0 && stop !== null) {
          args.push(stop.toString());
        }
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/ARRINSERT.js
var require_ARRINSERT = __commonJS({
  "node_modules/@redis/json/dist/commands/ARRINSERT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands5();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path, index, ...jsons) {
      const args = ["JSON.ARRINSERT", key, path, index.toString()];
      for (const json of jsons) {
        args.push((0, _1.transformRedisJsonArgument)(json));
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/ARRLEN.js
var require_ARRLEN = __commonJS({
  "node_modules/@redis/json/dist/commands/ARRLEN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, path) {
      const args = ["JSON.ARRLEN", key];
      if (path) {
        args.push(path);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/ARRPOP.js
var require_ARRPOP = __commonJS({
  "node_modules/@redis/json/dist/commands/ARRPOP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands5();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path, index) {
      const args = ["JSON.ARRPOP", key];
      if (path) {
        args.push(path);
        if (index !== void 0 && index !== null) {
          args.push(index.toString());
        }
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      if (reply === null)
        return null;
      if (Array.isArray(reply)) {
        return reply.map(_1.transformRedisJsonNullReply);
      }
      return (0, _1.transformRedisJsonNullReply)(reply);
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/json/dist/commands/ARRTRIM.js
var require_ARRTRIM = __commonJS({
  "node_modules/@redis/json/dist/commands/ARRTRIM.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path, start, stop) {
      return ["JSON.ARRTRIM", key, path, start.toString(), stop.toString()];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/DEBUG_MEMORY.js
var require_DEBUG_MEMORY = __commonJS({
  "node_modules/@redis/json/dist/commands/DEBUG_MEMORY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 2;
    function transformArguments(key, path) {
      const args = ["JSON.DEBUG", "MEMORY", key];
      if (path) {
        args.push(path);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/DEL.js
var require_DEL3 = __commonJS({
  "node_modules/@redis/json/dist/commands/DEL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path) {
      const args = ["JSON.DEL", key];
      if (path) {
        args.push(path);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/FORGET.js
var require_FORGET = __commonJS({
  "node_modules/@redis/json/dist/commands/FORGET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path) {
      const args = ["JSON.FORGET", key];
      if (path) {
        args.push(path);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/GET.js
var require_GET2 = __commonJS({
  "node_modules/@redis/json/dist/commands/GET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, options2) {
      let args = ["JSON.GET", key];
      if (options2?.path) {
        args = (0, generic_transformers_1.pushVerdictArguments)(args, options2.path);
      }
      if (options2?.INDENT) {
        args.push("INDENT", options2.INDENT);
      }
      if (options2?.NEWLINE) {
        args.push("NEWLINE", options2.NEWLINE);
      }
      if (options2?.SPACE) {
        args.push("SPACE", options2.SPACE);
      }
      if (options2?.NOESCAPE) {
        args.push("NOESCAPE");
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var _1 = require_commands5();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _1.transformRedisJsonNullReply;
    } });
  }
});

// node_modules/@redis/json/dist/commands/MERGE.js
var require_MERGE3 = __commonJS({
  "node_modules/@redis/json/dist/commands/MERGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands5();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path, json) {
      return ["JSON.MERGE", key, path, (0, _1.transformRedisJsonArgument)(json)];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/MGET.js
var require_MGET2 = __commonJS({
  "node_modules/@redis/json/dist/commands/MGET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands5();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(keys, path) {
      return [
        "JSON.MGET",
        ...keys,
        path
      ];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.map(_1.transformRedisJsonNullReply);
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/json/dist/commands/MSET.js
var require_MSET2 = __commonJS({
  "node_modules/@redis/json/dist/commands/MSET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands5();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(items) {
      const args = new Array(1 + items.length * 3);
      args[0] = "JSON.MSET";
      let argsIndex = 1;
      for (let i = 0; i < items.length; i++) {
        const item = items[i];
        args[argsIndex++] = item.key;
        args[argsIndex++] = item.path;
        args[argsIndex++] = (0, _1.transformRedisJsonArgument)(item.value);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/NUMINCRBY.js
var require_NUMINCRBY = __commonJS({
  "node_modules/@redis/json/dist/commands/NUMINCRBY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path, by) {
      return ["JSON.NUMINCRBY", key, path, by.toString()];
    }
    exports2.transformArguments = transformArguments;
    var _1 = require_commands5();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _1.transformNumbersReply;
    } });
  }
});

// node_modules/@redis/json/dist/commands/NUMMULTBY.js
var require_NUMMULTBY = __commonJS({
  "node_modules/@redis/json/dist/commands/NUMMULTBY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path, by) {
      return ["JSON.NUMMULTBY", key, path, by.toString()];
    }
    exports2.transformArguments = transformArguments;
    var _1 = require_commands5();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _1.transformNumbersReply;
    } });
  }
});

// node_modules/@redis/json/dist/commands/OBJKEYS.js
var require_OBJKEYS = __commonJS({
  "node_modules/@redis/json/dist/commands/OBJKEYS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path) {
      const args = ["JSON.OBJKEYS", key];
      if (path) {
        args.push(path);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/OBJLEN.js
var require_OBJLEN = __commonJS({
  "node_modules/@redis/json/dist/commands/OBJLEN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path) {
      const args = ["JSON.OBJLEN", key];
      if (path) {
        args.push(path);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/RESP.js
var require_RESP = __commonJS({
  "node_modules/@redis/json/dist/commands/RESP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path) {
      const args = ["JSON.RESP", key];
      if (path) {
        args.push(path);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/SET.js
var require_SET2 = __commonJS({
  "node_modules/@redis/json/dist/commands/SET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands5();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path, json, options2) {
      const args = ["JSON.SET", key, path, (0, _1.transformRedisJsonArgument)(json)];
      if (options2?.NX) {
        args.push("NX");
      } else if (options2?.XX) {
        args.push("XX");
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/STRAPPEND.js
var require_STRAPPEND = __commonJS({
  "node_modules/@redis/json/dist/commands/STRAPPEND.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands5();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(...[key, pathOrAppend, append]) {
      const args = ["JSON.STRAPPEND", key];
      if (append !== void 0 && append !== null) {
        args.push(pathOrAppend, (0, _1.transformRedisJsonArgument)(append));
      } else {
        args.push((0, _1.transformRedisJsonArgument)(pathOrAppend));
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/STRLEN.js
var require_STRLEN2 = __commonJS({
  "node_modules/@redis/json/dist/commands/STRLEN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, path) {
      const args = ["JSON.STRLEN", key];
      if (path) {
        args.push(path);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/TYPE.js
var require_TYPE2 = __commonJS({
  "node_modules/@redis/json/dist/commands/TYPE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, path) {
      const args = ["JSON.TYPE", key];
      if (path) {
        args.push(path);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/json/dist/commands/index.js
var require_commands5 = __commonJS({
  "node_modules/@redis/json/dist/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformNumbersReply = exports2.transformRedisJsonNullReply = exports2.transformRedisJsonReply = exports2.transformRedisJsonArgument = void 0;
    var ARRAPPEND = require_ARRAPPEND();
    var ARRINDEX = require_ARRINDEX();
    var ARRINSERT = require_ARRINSERT();
    var ARRLEN = require_ARRLEN();
    var ARRPOP = require_ARRPOP();
    var ARRTRIM = require_ARRTRIM();
    var DEBUG_MEMORY = require_DEBUG_MEMORY();
    var DEL = require_DEL3();
    var FORGET = require_FORGET();
    var GET = require_GET2();
    var MERGE = require_MERGE3();
    var MGET = require_MGET2();
    var MSET = require_MSET2();
    var NUMINCRBY = require_NUMINCRBY();
    var NUMMULTBY = require_NUMMULTBY();
    var OBJKEYS = require_OBJKEYS();
    var OBJLEN = require_OBJLEN();
    var RESP = require_RESP();
    var SET = require_SET2();
    var STRAPPEND = require_STRAPPEND();
    var STRLEN = require_STRLEN2();
    var TYPE = require_TYPE2();
    exports2.default = {
      ARRAPPEND,
      arrAppend: ARRAPPEND,
      ARRINDEX,
      arrIndex: ARRINDEX,
      ARRINSERT,
      arrInsert: ARRINSERT,
      ARRLEN,
      arrLen: ARRLEN,
      ARRPOP,
      arrPop: ARRPOP,
      ARRTRIM,
      arrTrim: ARRTRIM,
      DEBUG_MEMORY,
      debugMemory: DEBUG_MEMORY,
      DEL,
      del: DEL,
      FORGET,
      forget: FORGET,
      GET,
      get: GET,
      MERGE,
      merge: MERGE,
      MGET,
      mGet: MGET,
      MSET,
      mSet: MSET,
      NUMINCRBY,
      numIncrBy: NUMINCRBY,
      NUMMULTBY,
      numMultBy: NUMMULTBY,
      OBJKEYS,
      objKeys: OBJKEYS,
      OBJLEN,
      objLen: OBJLEN,
      RESP,
      resp: RESP,
      SET,
      set: SET,
      STRAPPEND,
      strAppend: STRAPPEND,
      STRLEN,
      strLen: STRLEN,
      TYPE,
      type: TYPE
    };
    function transformRedisJsonArgument(json) {
      return JSON.stringify(json);
    }
    exports2.transformRedisJsonArgument = transformRedisJsonArgument;
    function transformRedisJsonReply(json) {
      return JSON.parse(json);
    }
    exports2.transformRedisJsonReply = transformRedisJsonReply;
    function transformRedisJsonNullReply(json) {
      if (json === null)
        return null;
      return transformRedisJsonReply(json);
    }
    exports2.transformRedisJsonNullReply = transformRedisJsonNullReply;
    function transformNumbersReply(reply) {
      return JSON.parse(reply);
    }
    exports2.transformNumbersReply = transformNumbersReply;
  }
});

// node_modules/@redis/json/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/@redis/json/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.default = void 0;
    var commands_1 = require_commands5();
    Object.defineProperty(exports2, "default", { enumerable: true, get: function() {
      return commands_1.default;
    } });
  }
});

// node_modules/@redis/search/dist/commands/_LIST.js
var require_LIST3 = __commonJS({
  "node_modules/@redis/search/dist/commands/_LIST.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments() {
      return ["FT._LIST"];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/ALTER.js
var require_ALTER = __commonJS({
  "node_modules/@redis/search/dist/commands/ALTER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    var _1 = require_commands6();
    function transformArguments(index, schema) {
      const args = ["FT.ALTER", index, "SCHEMA", "ADD"];
      (0, _1.pushSchema)(args, schema);
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/AGGREGATE.js
var require_AGGREGATE = __commonJS({
  "node_modules/@redis/search/dist/commands/AGGREGATE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.pushAggregatehOptions = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = exports2.AggregateGroupByReducers = exports2.AggregateSteps = void 0;
    var generic_transformers_1 = require_generic_transformers();
    var _1 = require_commands6();
    var AggregateSteps;
    (function(AggregateSteps2) {
      AggregateSteps2["GROUPBY"] = "GROUPBY";
      AggregateSteps2["SORTBY"] = "SORTBY";
      AggregateSteps2["APPLY"] = "APPLY";
      AggregateSteps2["LIMIT"] = "LIMIT";
      AggregateSteps2["FILTER"] = "FILTER";
    })(AggregateSteps || (exports2.AggregateSteps = AggregateSteps = {}));
    var AggregateGroupByReducers;
    (function(AggregateGroupByReducers2) {
      AggregateGroupByReducers2["COUNT"] = "COUNT";
      AggregateGroupByReducers2["COUNT_DISTINCT"] = "COUNT_DISTINCT";
      AggregateGroupByReducers2["COUNT_DISTINCTISH"] = "COUNT_DISTINCTISH";
      AggregateGroupByReducers2["SUM"] = "SUM";
      AggregateGroupByReducers2["MIN"] = "MIN";
      AggregateGroupByReducers2["MAX"] = "MAX";
      AggregateGroupByReducers2["AVG"] = "AVG";
      AggregateGroupByReducers2["STDDEV"] = "STDDEV";
      AggregateGroupByReducers2["QUANTILE"] = "QUANTILE";
      AggregateGroupByReducers2["TOLIST"] = "TOLIST";
      AggregateGroupByReducers2["TO_LIST"] = "TOLIST";
      AggregateGroupByReducers2["FIRST_VALUE"] = "FIRST_VALUE";
      AggregateGroupByReducers2["RANDOM_SAMPLE"] = "RANDOM_SAMPLE";
    })(AggregateGroupByReducers || (exports2.AggregateGroupByReducers = AggregateGroupByReducers = {}));
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(index, query, options2) {
      return pushAggregatehOptions(["FT.AGGREGATE", index, query], options2);
    }
    exports2.transformArguments = transformArguments;
    function pushAggregatehOptions(args, options2) {
      if (options2?.VERBATIM) {
        args.push("VERBATIM");
      }
      if (options2?.ADDSCORES) {
        args.push("ADDSCORES");
      }
      if (options2?.LOAD) {
        args.push("LOAD");
        (0, _1.pushArgumentsWithLength)(args, () => {
          if (Array.isArray(options2.LOAD)) {
            for (const load of options2.LOAD) {
              pushLoadField(args, load);
            }
          } else {
            pushLoadField(args, options2.LOAD);
          }
        });
      }
      if (options2?.STEPS) {
        for (const step of options2.STEPS) {
          switch (step.type) {
            case AggregateSteps.GROUPBY:
              args.push("GROUPBY");
              if (!step.properties) {
                args.push("0");
              } else {
                (0, generic_transformers_1.pushVerdictArgument)(args, step.properties);
              }
              if (Array.isArray(step.REDUCE)) {
                for (const reducer of step.REDUCE) {
                  pushGroupByReducer(args, reducer);
                }
              } else {
                pushGroupByReducer(args, step.REDUCE);
              }
              break;
            case AggregateSteps.SORTBY:
              (0, _1.pushSortByArguments)(args, "SORTBY", step.BY);
              if (step.MAX) {
                args.push("MAX", step.MAX.toString());
              }
              break;
            case AggregateSteps.APPLY:
              args.push("APPLY", step.expression, "AS", step.AS);
              break;
            case AggregateSteps.LIMIT:
              args.push("LIMIT", step.from.toString(), step.size.toString());
              break;
            case AggregateSteps.FILTER:
              args.push("FILTER", step.expression);
              break;
          }
        }
      }
      (0, _1.pushParamsArgs)(args, options2?.PARAMS);
      if (options2?.DIALECT) {
        args.push("DIALECT", options2.DIALECT.toString());
      }
      if (options2?.TIMEOUT !== void 0) {
        args.push("TIMEOUT", options2.TIMEOUT.toString());
      }
      return args;
    }
    exports2.pushAggregatehOptions = pushAggregatehOptions;
    function pushLoadField(args, toLoad) {
      if (typeof toLoad === "string") {
        args.push(toLoad);
      } else {
        args.push(toLoad.identifier);
        if (toLoad.AS) {
          args.push("AS", toLoad.AS);
        }
      }
    }
    function pushGroupByReducer(args, reducer) {
      args.push("REDUCE", reducer.type);
      switch (reducer.type) {
        case AggregateGroupByReducers.COUNT:
          args.push("0");
          break;
        case AggregateGroupByReducers.COUNT_DISTINCT:
        case AggregateGroupByReducers.COUNT_DISTINCTISH:
        case AggregateGroupByReducers.SUM:
        case AggregateGroupByReducers.MIN:
        case AggregateGroupByReducers.MAX:
        case AggregateGroupByReducers.AVG:
        case AggregateGroupByReducers.STDDEV:
        case AggregateGroupByReducers.TOLIST:
          args.push("1", reducer.property);
          break;
        case AggregateGroupByReducers.QUANTILE:
          args.push("2", reducer.property, reducer.quantile.toString());
          break;
        case AggregateGroupByReducers.FIRST_VALUE: {
          (0, _1.pushArgumentsWithLength)(args, () => {
            args.push(reducer.property);
            if (reducer.BY) {
              args.push("BY");
              if (typeof reducer.BY === "string") {
                args.push(reducer.BY);
              } else {
                args.push(reducer.BY.property);
                if (reducer.BY.direction) {
                  args.push(reducer.BY.direction);
                }
              }
            }
          });
          break;
        }
        case AggregateGroupByReducers.RANDOM_SAMPLE:
          args.push("2", reducer.property, reducer.sampleSize.toString());
          break;
      }
      if (reducer.AS) {
        args.push("AS", reducer.AS);
      }
    }
    function transformReply(rawReply) {
      const results = [];
      for (let i = 1; i < rawReply.length; i++) {
        results.push((0, generic_transformers_1.transformTuplesReply)(rawReply[i]));
      }
      return {
        total: rawReply[0],
        results
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/search/dist/commands/AGGREGATE_WITHCURSOR.js
var require_AGGREGATE_WITHCURSOR = __commonJS({
  "node_modules/@redis/search/dist/commands/AGGREGATE_WITHCURSOR.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var AGGREGATE_1 = require_AGGREGATE();
    var AGGREGATE_2 = require_AGGREGATE();
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return AGGREGATE_2.FIRST_KEY_INDEX;
    } });
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return AGGREGATE_2.IS_READ_ONLY;
    } });
    function transformArguments(index, query, options2) {
      const args = (0, AGGREGATE_1.transformArguments)(index, query, options2);
      args.push("WITHCURSOR");
      if (options2?.COUNT) {
        args.push("COUNT", options2.COUNT.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        ...(0, AGGREGATE_1.transformReply)(reply[0]),
        cursor: reply[1]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/search/dist/commands/ALIASADD.js
var require_ALIASADD = __commonJS({
  "node_modules/@redis/search/dist/commands/ALIASADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(name, index) {
      return ["FT.ALIASADD", name, index];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/ALIASDEL.js
var require_ALIASDEL = __commonJS({
  "node_modules/@redis/search/dist/commands/ALIASDEL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(name, index) {
      return ["FT.ALIASDEL", name, index];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/ALIASUPDATE.js
var require_ALIASUPDATE = __commonJS({
  "node_modules/@redis/search/dist/commands/ALIASUPDATE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(name, index) {
      return ["FT.ALIASUPDATE", name, index];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/CONFIG_GET.js
var require_CONFIG_GET3 = __commonJS({
  "node_modules/@redis/search/dist/commands/CONFIG_GET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments(option) {
      return ["FT.CONFIG", "GET", option];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(rawReply) {
      const transformedReply = /* @__PURE__ */ Object.create(null);
      for (const [key, value] of rawReply) {
        transformedReply[key] = value;
      }
      return transformedReply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/search/dist/commands/CONFIG_SET.js
var require_CONFIG_SET3 = __commonJS({
  "node_modules/@redis/search/dist/commands/CONFIG_SET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(option, value) {
      return ["FT.CONFIG", "SET", option, value];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/CREATE.js
var require_CREATE2 = __commonJS({
  "node_modules/@redis/search/dist/commands/CREATE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    var generic_transformers_1 = require_generic_transformers();
    var _1 = require_commands6();
    function transformArguments(index, schema, options2) {
      const args = ["FT.CREATE", index];
      if (options2?.ON) {
        args.push("ON", options2.ON);
      }
      (0, generic_transformers_1.pushOptionalVerdictArgument)(args, "PREFIX", options2?.PREFIX);
      if (options2?.FILTER) {
        args.push("FILTER", options2.FILTER);
      }
      if (options2?.LANGUAGE) {
        args.push("LANGUAGE", options2.LANGUAGE);
      }
      if (options2?.LANGUAGE_FIELD) {
        args.push("LANGUAGE_FIELD", options2.LANGUAGE_FIELD);
      }
      if (options2?.SCORE) {
        args.push("SCORE", options2.SCORE.toString());
      }
      if (options2?.SCORE_FIELD) {
        args.push("SCORE_FIELD", options2.SCORE_FIELD);
      }
      if (options2?.MAXTEXTFIELDS) {
        args.push("MAXTEXTFIELDS");
      }
      if (options2?.TEMPORARY) {
        args.push("TEMPORARY", options2.TEMPORARY.toString());
      }
      if (options2?.NOOFFSETS) {
        args.push("NOOFFSETS");
      }
      if (options2?.NOHL) {
        args.push("NOHL");
      }
      if (options2?.NOFIELDS) {
        args.push("NOFIELDS");
      }
      if (options2?.NOFREQS) {
        args.push("NOFREQS");
      }
      if (options2?.SKIPINITIALSCAN) {
        args.push("SKIPINITIALSCAN");
      }
      (0, generic_transformers_1.pushOptionalVerdictArgument)(args, "STOPWORDS", options2?.STOPWORDS);
      args.push("SCHEMA");
      (0, _1.pushSchema)(args, schema);
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/CURSOR_DEL.js
var require_CURSOR_DEL = __commonJS({
  "node_modules/@redis/search/dist/commands/CURSOR_DEL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(index, cursorId) {
      return [
        "FT.CURSOR",
        "DEL",
        index,
        cursorId.toString()
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/CURSOR_READ.js
var require_CURSOR_READ = __commonJS({
  "node_modules/@redis/search/dist/commands/CURSOR_READ.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(index, cursor, options2) {
      const args = [
        "FT.CURSOR",
        "READ",
        index,
        cursor.toString()
      ];
      if (options2?.COUNT) {
        args.push("COUNT", options2.COUNT.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    var AGGREGATE_WITHCURSOR_1 = require_AGGREGATE_WITHCURSOR();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return AGGREGATE_WITHCURSOR_1.transformReply;
    } });
  }
});

// node_modules/@redis/search/dist/commands/DICTADD.js
var require_DICTADD = __commonJS({
  "node_modules/@redis/search/dist/commands/DICTADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    var generic_transformers_1 = require_generic_transformers();
    function transformArguments(dictionary, term) {
      return (0, generic_transformers_1.pushVerdictArguments)(["FT.DICTADD", dictionary], term);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/DICTDEL.js
var require_DICTDEL = __commonJS({
  "node_modules/@redis/search/dist/commands/DICTDEL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    var generic_transformers_1 = require_generic_transformers();
    function transformArguments(dictionary, term) {
      return (0, generic_transformers_1.pushVerdictArguments)(["FT.DICTDEL", dictionary], term);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/DICTDUMP.js
var require_DICTDUMP = __commonJS({
  "node_modules/@redis/search/dist/commands/DICTDUMP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(dictionary) {
      return ["FT.DICTDUMP", dictionary];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/DROPINDEX.js
var require_DROPINDEX = __commonJS({
  "node_modules/@redis/search/dist/commands/DROPINDEX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(index, options2) {
      const args = ["FT.DROPINDEX", index];
      if (options2?.DD) {
        args.push("DD");
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/EXPLAIN.js
var require_EXPLAIN2 = __commonJS({
  "node_modules/@redis/search/dist/commands/EXPLAIN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var _1 = require_commands6();
    exports2.IS_READ_ONLY = true;
    function transformArguments(index, query, options2) {
      const args = ["FT.EXPLAIN", index, query];
      (0, _1.pushParamsArgs)(args, options2?.PARAMS);
      if (options2?.DIALECT) {
        args.push("DIALECT", options2.DIALECT.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/EXPLAINCLI.js
var require_EXPLAINCLI = __commonJS({
  "node_modules/@redis/search/dist/commands/EXPLAINCLI.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments(index, query) {
      return ["FT.EXPLAINCLI", index, query];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/INFO.js
var require_INFO7 = __commonJS({
  "node_modules/@redis/search/dist/commands/INFO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    var generic_transformers_1 = require_generic_transformers();
    function transformArguments(index) {
      return ["FT.INFO", index];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(rawReply) {
      return {
        indexName: rawReply[1],
        indexOptions: rawReply[3],
        indexDefinition: (0, generic_transformers_1.transformTuplesReply)(rawReply[5]),
        attributes: rawReply[7].map((attribute) => (0, generic_transformers_1.transformTuplesReply)(attribute)),
        numDocs: rawReply[9],
        maxDocId: rawReply[11],
        numTerms: rawReply[13],
        numRecords: rawReply[15],
        invertedSzMb: rawReply[17],
        vectorIndexSzMb: rawReply[19],
        totalInvertedIndexBlocks: rawReply[21],
        offsetVectorsSzMb: rawReply[23],
        docTableSizeMb: rawReply[25],
        sortableValuesSizeMb: rawReply[27],
        keyTableSizeMb: rawReply[29],
        recordsPerDocAvg: rawReply[31],
        bytesPerRecordAvg: rawReply[33],
        offsetsPerTermAvg: rawReply[35],
        offsetBitsPerRecordAvg: rawReply[37],
        hashIndexingFailures: rawReply[39],
        indexing: rawReply[41],
        percentIndexed: rawReply[43],
        gcStats: {
          bytesCollected: rawReply[45][1],
          totalMsRun: rawReply[45][3],
          totalCycles: rawReply[45][5],
          averageCycleTimeMs: rawReply[45][7],
          lastRunTimeMs: rawReply[45][9],
          gcNumericTreesMissed: rawReply[45][11],
          gcBlocksDenied: rawReply[45][13]
        },
        cursorStats: {
          globalIdle: rawReply[47][1],
          globalTotal: rawReply[47][3],
          indexCapacity: rawReply[47][5],
          idnexTotal: rawReply[47][7]
        },
        stopWords: rawReply[49]
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/search/dist/commands/SEARCH.js
var require_SEARCH = __commonJS({
  "node_modules/@redis/search/dist/commands/SEARCH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands6();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(index, query, options2) {
      return (0, _1.pushSearchOptions)(["FT.SEARCH", index, query], options2);
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply, withoutDocuments) {
      const documents = [];
      let i = 1;
      while (i < reply.length) {
        documents.push({
          id: reply[i++],
          value: withoutDocuments ? /* @__PURE__ */ Object.create(null) : documentValue(reply[i++])
        });
      }
      return {
        total: reply[0],
        documents
      };
    }
    exports2.transformReply = transformReply;
    function documentValue(tuples) {
      const message = /* @__PURE__ */ Object.create(null);
      let i = 0;
      while (i < tuples.length) {
        const key = tuples[i++], value = tuples[i++];
        if (key === "$") {
          try {
            Object.assign(message, JSON.parse(value));
            continue;
          } catch {
          }
        }
        message[key] = value;
      }
      return message;
    }
  }
});

// node_modules/@redis/search/dist/commands/PROFILE_SEARCH.js
var require_PROFILE_SEARCH = __commonJS({
  "node_modules/@redis/search/dist/commands/PROFILE_SEARCH.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var SEARCH_1 = require_SEARCH();
    var _1 = require_commands6();
    exports2.IS_READ_ONLY = true;
    function transformArguments(index, query, options2) {
      let args = ["FT.PROFILE", index, "SEARCH"];
      if (options2?.LIMITED) {
        args.push("LIMITED");
      }
      args.push("QUERY", query);
      return (0, _1.pushSearchOptions)(args, options2);
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply, withoutDocuments) {
      return {
        results: (0, SEARCH_1.transformReply)(reply[0], withoutDocuments),
        profile: (0, _1.transformProfile)(reply[1])
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/search/dist/commands/PROFILE_AGGREGATE.js
var require_PROFILE_AGGREGATE = __commonJS({
  "node_modules/@redis/search/dist/commands/PROFILE_AGGREGATE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var AGGREGATE_1 = require_AGGREGATE();
    var _1 = require_commands6();
    exports2.IS_READ_ONLY = true;
    function transformArguments(index, query, options2) {
      const args = ["FT.PROFILE", index, "AGGREGATE"];
      if (options2?.LIMITED) {
        args.push("LIMITED");
      }
      args.push("QUERY", query);
      (0, AGGREGATE_1.pushAggregatehOptions)(args, options2);
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        results: (0, AGGREGATE_1.transformReply)(reply[0]),
        profile: (0, _1.transformProfile)(reply[1])
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/search/dist/commands/SEARCH_NOCONTENT.js
var require_SEARCH_NOCONTENT = __commonJS({
  "node_modules/@redis/search/dist/commands/SEARCH_NOCONTENT.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands6();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(index, query, options2) {
      return (0, _1.pushSearchOptions)(["FT.SEARCH", index, query, "NOCONTENT"], options2);
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        total: reply[0],
        documents: reply.slice(1)
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/search/dist/commands/SPELLCHECK.js
var require_SPELLCHECK = __commonJS({
  "node_modules/@redis/search/dist/commands/SPELLCHECK.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments(index, query, options2) {
      const args = ["FT.SPELLCHECK", index, query];
      if (options2?.DISTANCE) {
        args.push("DISTANCE", options2.DISTANCE.toString());
      }
      if (options2?.TERMS) {
        if (Array.isArray(options2.TERMS)) {
          for (const term of options2.TERMS) {
            pushTerms(args, term);
          }
        } else {
          pushTerms(args, options2.TERMS);
        }
      }
      if (options2?.DIALECT) {
        args.push("DIALECT", options2.DIALECT.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
    function pushTerms(args, { mode, dictionary }) {
      args.push("TERMS", mode, dictionary);
    }
    function transformReply(rawReply) {
      return rawReply.map(([, term, suggestions]) => ({
        term,
        suggestions: suggestions.map(([score, suggestion]) => ({
          score: Number(score),
          suggestion
        }))
      }));
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/search/dist/commands/SUGADD.js
var require_SUGADD = __commonJS({
  "node_modules/@redis/search/dist/commands/SUGADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(key, string, score, options2) {
      const args = ["FT.SUGADD", key, string, score.toString()];
      if (options2?.INCR) {
        args.push("INCR");
      }
      if (options2?.PAYLOAD) {
        args.push("PAYLOAD", options2.PAYLOAD);
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/SUGDEL.js
var require_SUGDEL = __commonJS({
  "node_modules/@redis/search/dist/commands/SUGDEL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = void 0;
    function transformArguments(key, string) {
      return ["FT.SUGDEL", key, string];
    }
    exports2.transformArguments = transformArguments;
    var generic_transformers_1 = require_generic_transformers();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return generic_transformers_1.transformBooleanReply;
    } });
  }
});

// node_modules/@redis/search/dist/commands/SUGGET.js
var require_SUGGET = __commonJS({
  "node_modules/@redis/search/dist/commands/SUGGET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, prefix, options2) {
      const args = ["FT.SUGGET", key, prefix];
      if (options2?.FUZZY) {
        args.push("FUZZY");
      }
      if (options2?.MAX) {
        args.push("MAX", options2.MAX.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/SUGGET_WITHPAYLOADS.js
var require_SUGGET_WITHPAYLOADS = __commonJS({
  "node_modules/@redis/search/dist/commands/SUGGET_WITHPAYLOADS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var SUGGET_1 = require_SUGGET();
    var SUGGET_2 = require_SUGGET();
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return SUGGET_2.IS_READ_ONLY;
    } });
    function transformArguments(key, prefix, options2) {
      return [
        ...(0, SUGGET_1.transformArguments)(key, prefix, options2),
        "WITHPAYLOADS"
      ];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(rawReply) {
      if (rawReply === null)
        return null;
      const transformedReply = [];
      for (let i = 0; i < rawReply.length; i += 2) {
        transformedReply.push({
          suggestion: rawReply[i],
          payload: rawReply[i + 1]
        });
      }
      return transformedReply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/search/dist/commands/SUGGET_WITHSCORES_WITHPAYLOADS.js
var require_SUGGET_WITHSCORES_WITHPAYLOADS = __commonJS({
  "node_modules/@redis/search/dist/commands/SUGGET_WITHSCORES_WITHPAYLOADS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var SUGGET_1 = require_SUGGET();
    var SUGGET_2 = require_SUGGET();
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return SUGGET_2.IS_READ_ONLY;
    } });
    function transformArguments(key, prefix, options2) {
      return [
        ...(0, SUGGET_1.transformArguments)(key, prefix, options2),
        "WITHSCORES",
        "WITHPAYLOADS"
      ];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(rawReply) {
      if (rawReply === null)
        return null;
      const transformedReply = [];
      for (let i = 0; i < rawReply.length; i += 3) {
        transformedReply.push({
          suggestion: rawReply[i],
          score: Number(rawReply[i + 1]),
          payload: rawReply[i + 2]
        });
      }
      return transformedReply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/search/dist/commands/SUGGET_WITHSCORES.js
var require_SUGGET_WITHSCORES = __commonJS({
  "node_modules/@redis/search/dist/commands/SUGGET_WITHSCORES.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var SUGGET_1 = require_SUGGET();
    var SUGGET_2 = require_SUGGET();
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return SUGGET_2.IS_READ_ONLY;
    } });
    function transformArguments(key, prefix, options2) {
      return [
        ...(0, SUGGET_1.transformArguments)(key, prefix, options2),
        "WITHSCORES"
      ];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(rawReply) {
      if (rawReply === null)
        return null;
      const transformedReply = [];
      for (let i = 0; i < rawReply.length; i += 2) {
        transformedReply.push({
          suggestion: rawReply[i],
          score: Number(rawReply[i + 1])
        });
      }
      return transformedReply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/search/dist/commands/SUGLEN.js
var require_SUGLEN = __commonJS({
  "node_modules/@redis/search/dist/commands/SUGLEN.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["FT.SUGLEN", key];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/SYNDUMP.js
var require_SYNDUMP = __commonJS({
  "node_modules/@redis/search/dist/commands/SYNDUMP.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(index) {
      return ["FT.SYNDUMP", index];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/SYNUPDATE.js
var require_SYNUPDATE = __commonJS({
  "node_modules/@redis/search/dist/commands/SYNUPDATE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    var generic_transformers_1 = require_generic_transformers();
    function transformArguments(index, groupId, terms, options2) {
      const args = ["FT.SYNUPDATE", index, groupId];
      if (options2?.SKIPINITIALSCAN) {
        args.push("SKIPINITIALSCAN");
      }
      return (0, generic_transformers_1.pushVerdictArguments)(args, terms);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/TAGVALS.js
var require_TAGVALS = __commonJS({
  "node_modules/@redis/search/dist/commands/TAGVALS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = void 0;
    function transformArguments(index, fieldName) {
      return ["FT.TAGVALS", index, fieldName];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/search/dist/commands/index.js
var require_commands6 = __commonJS({
  "node_modules/@redis/search/dist/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformProfile = exports2.pushSearchOptions = exports2.pushParamsArgs = exports2.pushSchema = exports2.SCHEMA_GEO_SHAPE_COORD_SYSTEM = exports2.VectorAlgorithms = exports2.SchemaTextFieldPhonetics = exports2.SchemaFieldTypes = exports2.pushArgumentsWithLength = exports2.pushSortByArguments = exports2.pushSortByProperty = exports2.RedisSearchLanguages = void 0;
    var _LIST = require_LIST3();
    var ALTER = require_ALTER();
    var AGGREGATE_WITHCURSOR = require_AGGREGATE_WITHCURSOR();
    var AGGREGATE = require_AGGREGATE();
    var ALIASADD = require_ALIASADD();
    var ALIASDEL = require_ALIASDEL();
    var ALIASUPDATE = require_ALIASUPDATE();
    var CONFIG_GET = require_CONFIG_GET3();
    var CONFIG_SET = require_CONFIG_SET3();
    var CREATE = require_CREATE2();
    var CURSOR_DEL = require_CURSOR_DEL();
    var CURSOR_READ = require_CURSOR_READ();
    var DICTADD = require_DICTADD();
    var DICTDEL = require_DICTDEL();
    var DICTDUMP = require_DICTDUMP();
    var DROPINDEX = require_DROPINDEX();
    var EXPLAIN = require_EXPLAIN2();
    var EXPLAINCLI = require_EXPLAINCLI();
    var INFO = require_INFO7();
    var PROFILESEARCH = require_PROFILE_SEARCH();
    var PROFILEAGGREGATE = require_PROFILE_AGGREGATE();
    var SEARCH = require_SEARCH();
    var SEARCH_NOCONTENT = require_SEARCH_NOCONTENT();
    var SPELLCHECK = require_SPELLCHECK();
    var SUGADD = require_SUGADD();
    var SUGDEL = require_SUGDEL();
    var SUGGET_WITHPAYLOADS = require_SUGGET_WITHPAYLOADS();
    var SUGGET_WITHSCORES_WITHPAYLOADS = require_SUGGET_WITHSCORES_WITHPAYLOADS();
    var SUGGET_WITHSCORES = require_SUGGET_WITHSCORES();
    var SUGGET = require_SUGGET();
    var SUGLEN = require_SUGLEN();
    var SYNDUMP = require_SYNDUMP();
    var SYNUPDATE = require_SYNUPDATE();
    var TAGVALS = require_TAGVALS();
    var generic_transformers_1 = require_generic_transformers();
    exports2.default = {
      _LIST,
      _list: _LIST,
      ALTER,
      alter: ALTER,
      AGGREGATE_WITHCURSOR,
      aggregateWithCursor: AGGREGATE_WITHCURSOR,
      AGGREGATE,
      aggregate: AGGREGATE,
      ALIASADD,
      aliasAdd: ALIASADD,
      ALIASDEL,
      aliasDel: ALIASDEL,
      ALIASUPDATE,
      aliasUpdate: ALIASUPDATE,
      CONFIG_GET,
      configGet: CONFIG_GET,
      CONFIG_SET,
      configSet: CONFIG_SET,
      CREATE,
      create: CREATE,
      CURSOR_DEL,
      cursorDel: CURSOR_DEL,
      CURSOR_READ,
      cursorRead: CURSOR_READ,
      DICTADD,
      dictAdd: DICTADD,
      DICTDEL,
      dictDel: DICTDEL,
      DICTDUMP,
      dictDump: DICTDUMP,
      DROPINDEX,
      dropIndex: DROPINDEX,
      EXPLAIN,
      explain: EXPLAIN,
      EXPLAINCLI,
      explainCli: EXPLAINCLI,
      INFO,
      info: INFO,
      PROFILESEARCH,
      profileSearch: PROFILESEARCH,
      PROFILEAGGREGATE,
      profileAggregate: PROFILEAGGREGATE,
      SEARCH,
      search: SEARCH,
      SEARCH_NOCONTENT,
      searchNoContent: SEARCH_NOCONTENT,
      SPELLCHECK,
      spellCheck: SPELLCHECK,
      SUGADD,
      sugAdd: SUGADD,
      SUGDEL,
      sugDel: SUGDEL,
      SUGGET_WITHPAYLOADS,
      sugGetWithPayloads: SUGGET_WITHPAYLOADS,
      SUGGET_WITHSCORES_WITHPAYLOADS,
      sugGetWithScoresWithPayloads: SUGGET_WITHSCORES_WITHPAYLOADS,
      SUGGET_WITHSCORES,
      sugGetWithScores: SUGGET_WITHSCORES,
      SUGGET,
      sugGet: SUGGET,
      SUGLEN,
      sugLen: SUGLEN,
      SYNDUMP,
      synDump: SYNDUMP,
      SYNUPDATE,
      synUpdate: SYNUPDATE,
      TAGVALS,
      tagVals: TAGVALS
    };
    var RedisSearchLanguages;
    (function(RedisSearchLanguages2) {
      RedisSearchLanguages2["ARABIC"] = "Arabic";
      RedisSearchLanguages2["BASQUE"] = "Basque";
      RedisSearchLanguages2["CATALANA"] = "Catalan";
      RedisSearchLanguages2["DANISH"] = "Danish";
      RedisSearchLanguages2["DUTCH"] = "Dutch";
      RedisSearchLanguages2["ENGLISH"] = "English";
      RedisSearchLanguages2["FINNISH"] = "Finnish";
      RedisSearchLanguages2["FRENCH"] = "French";
      RedisSearchLanguages2["GERMAN"] = "German";
      RedisSearchLanguages2["GREEK"] = "Greek";
      RedisSearchLanguages2["HUNGARIAN"] = "Hungarian";
      RedisSearchLanguages2["INDONESAIN"] = "Indonesian";
      RedisSearchLanguages2["IRISH"] = "Irish";
      RedisSearchLanguages2["ITALIAN"] = "Italian";
      RedisSearchLanguages2["LITHUANIAN"] = "Lithuanian";
      RedisSearchLanguages2["NEPALI"] = "Nepali";
      RedisSearchLanguages2["NORWEIGAN"] = "Norwegian";
      RedisSearchLanguages2["PORTUGUESE"] = "Portuguese";
      RedisSearchLanguages2["ROMANIAN"] = "Romanian";
      RedisSearchLanguages2["RUSSIAN"] = "Russian";
      RedisSearchLanguages2["SPANISH"] = "Spanish";
      RedisSearchLanguages2["SWEDISH"] = "Swedish";
      RedisSearchLanguages2["TAMIL"] = "Tamil";
      RedisSearchLanguages2["TURKISH"] = "Turkish";
      RedisSearchLanguages2["CHINESE"] = "Chinese";
    })(RedisSearchLanguages || (exports2.RedisSearchLanguages = RedisSearchLanguages = {}));
    function pushSortByProperty(args, sortBy) {
      if (typeof sortBy === "string") {
        args.push(sortBy);
      } else {
        args.push(sortBy.BY);
        if (sortBy.DIRECTION) {
          args.push(sortBy.DIRECTION);
        }
      }
    }
    exports2.pushSortByProperty = pushSortByProperty;
    function pushSortByArguments(args, name, sortBy) {
      const lengthBefore = args.push(
        name,
        ""
        // will be overwritten
      );
      if (Array.isArray(sortBy)) {
        for (const field of sortBy) {
          pushSortByProperty(args, field);
        }
      } else {
        pushSortByProperty(args, sortBy);
      }
      args[lengthBefore - 1] = (args.length - lengthBefore).toString();
      return args;
    }
    exports2.pushSortByArguments = pushSortByArguments;
    function pushArgumentsWithLength(args, fn) {
      const lengthIndex = args.push("") - 1;
      fn(args);
      args[lengthIndex] = (args.length - lengthIndex - 1).toString();
      return args;
    }
    exports2.pushArgumentsWithLength = pushArgumentsWithLength;
    var SchemaFieldTypes;
    (function(SchemaFieldTypes2) {
      SchemaFieldTypes2["TEXT"] = "TEXT";
      SchemaFieldTypes2["NUMERIC"] = "NUMERIC";
      SchemaFieldTypes2["GEO"] = "GEO";
      SchemaFieldTypes2["TAG"] = "TAG";
      SchemaFieldTypes2["VECTOR"] = "VECTOR";
      SchemaFieldTypes2["GEOSHAPE"] = "GEOSHAPE";
    })(SchemaFieldTypes || (exports2.SchemaFieldTypes = SchemaFieldTypes = {}));
    function pushCommonFieldArguments(args, fieldOptions) {
      if (fieldOptions.SORTABLE) {
        args.push("SORTABLE");
        if (fieldOptions.SORTABLE === "UNF") {
          args.push("UNF");
        }
      }
      if (fieldOptions.NOINDEX) {
        args.push("NOINDEX");
      }
    }
    var SchemaTextFieldPhonetics;
    (function(SchemaTextFieldPhonetics2) {
      SchemaTextFieldPhonetics2["DM_EN"] = "dm:en";
      SchemaTextFieldPhonetics2["DM_FR"] = "dm:fr";
      SchemaTextFieldPhonetics2["FM_PT"] = "dm:pt";
      SchemaTextFieldPhonetics2["DM_ES"] = "dm:es";
    })(SchemaTextFieldPhonetics || (exports2.SchemaTextFieldPhonetics = SchemaTextFieldPhonetics = {}));
    var VectorAlgorithms;
    (function(VectorAlgorithms2) {
      VectorAlgorithms2["FLAT"] = "FLAT";
      VectorAlgorithms2["HNSW"] = "HNSW";
    })(VectorAlgorithms || (exports2.VectorAlgorithms = VectorAlgorithms = {}));
    exports2.SCHEMA_GEO_SHAPE_COORD_SYSTEM = {
      SPHERICAL: "SPHERICAL",
      FLAT: "FLAT"
    };
    function pushSchema(args, schema) {
      for (const [field, fieldOptions] of Object.entries(schema)) {
        args.push(field);
        if (typeof fieldOptions === "string") {
          args.push(fieldOptions);
          continue;
        }
        if (fieldOptions.AS) {
          args.push("AS", fieldOptions.AS);
        }
        args.push(fieldOptions.type);
        switch (fieldOptions.type) {
          case SchemaFieldTypes.TEXT:
            if (fieldOptions.NOSTEM) {
              args.push("NOSTEM");
            }
            if (fieldOptions.WEIGHT) {
              args.push("WEIGHT", fieldOptions.WEIGHT.toString());
            }
            if (fieldOptions.PHONETIC) {
              args.push("PHONETIC", fieldOptions.PHONETIC);
            }
            if (fieldOptions.WITHSUFFIXTRIE) {
              args.push("WITHSUFFIXTRIE");
            }
            pushCommonFieldArguments(args, fieldOptions);
            if (fieldOptions.INDEXEMPTY) {
              args.push("INDEXEMPTY");
            }
            break;
          case SchemaFieldTypes.NUMERIC:
          case SchemaFieldTypes.GEO:
            pushCommonFieldArguments(args, fieldOptions);
            break;
          case SchemaFieldTypes.TAG:
            if (fieldOptions.SEPARATOR) {
              args.push("SEPARATOR", fieldOptions.SEPARATOR);
            }
            if (fieldOptions.CASESENSITIVE) {
              args.push("CASESENSITIVE");
            }
            if (fieldOptions.WITHSUFFIXTRIE) {
              args.push("WITHSUFFIXTRIE");
            }
            pushCommonFieldArguments(args, fieldOptions);
            if (fieldOptions.INDEXEMPTY) {
              args.push("INDEXEMPTY");
            }
            break;
          case SchemaFieldTypes.VECTOR:
            args.push(fieldOptions.ALGORITHM);
            pushArgumentsWithLength(args, () => {
              args.push("TYPE", fieldOptions.TYPE, "DIM", fieldOptions.DIM.toString(), "DISTANCE_METRIC", fieldOptions.DISTANCE_METRIC);
              if (fieldOptions.INITIAL_CAP) {
                args.push("INITIAL_CAP", fieldOptions.INITIAL_CAP.toString());
              }
              switch (fieldOptions.ALGORITHM) {
                case VectorAlgorithms.FLAT:
                  if (fieldOptions.BLOCK_SIZE) {
                    args.push("BLOCK_SIZE", fieldOptions.BLOCK_SIZE.toString());
                  }
                  break;
                case VectorAlgorithms.HNSW:
                  if (fieldOptions.M) {
                    args.push("M", fieldOptions.M.toString());
                  }
                  if (fieldOptions.EF_CONSTRUCTION) {
                    args.push("EF_CONSTRUCTION", fieldOptions.EF_CONSTRUCTION.toString());
                  }
                  if (fieldOptions.EF_RUNTIME) {
                    args.push("EF_RUNTIME", fieldOptions.EF_RUNTIME.toString());
                  }
                  break;
              }
            });
            break;
          case SchemaFieldTypes.GEOSHAPE:
            if (fieldOptions.COORD_SYSTEM !== void 0) {
              args.push("COORD_SYSTEM", fieldOptions.COORD_SYSTEM);
            }
            pushCommonFieldArguments(args, fieldOptions);
            break;
        }
        if (fieldOptions.INDEXMISSING) {
          args.push("INDEXMISSING");
        }
      }
    }
    exports2.pushSchema = pushSchema;
    function pushParamsArgs(args, params) {
      if (params) {
        const enrties = Object.entries(params);
        args.push("PARAMS", (enrties.length * 2).toString());
        for (const [key, value] of enrties) {
          args.push(key, typeof value === "number" ? value.toString() : value);
        }
      }
      return args;
    }
    exports2.pushParamsArgs = pushParamsArgs;
    function pushSearchOptions(args, options2) {
      if (options2?.VERBATIM) {
        args.push("VERBATIM");
      }
      if (options2?.NOSTOPWORDS) {
        args.push("NOSTOPWORDS");
      }
      (0, generic_transformers_1.pushOptionalVerdictArgument)(args, "INKEYS", options2?.INKEYS);
      (0, generic_transformers_1.pushOptionalVerdictArgument)(args, "INFIELDS", options2?.INFIELDS);
      (0, generic_transformers_1.pushOptionalVerdictArgument)(args, "RETURN", options2?.RETURN);
      if (options2?.SUMMARIZE) {
        args.push("SUMMARIZE");
        if (typeof options2.SUMMARIZE === "object") {
          if (options2.SUMMARIZE.FIELDS) {
            args.push("FIELDS");
            (0, generic_transformers_1.pushVerdictArgument)(args, options2.SUMMARIZE.FIELDS);
          }
          if (options2.SUMMARIZE.FRAGS) {
            args.push("FRAGS", options2.SUMMARIZE.FRAGS.toString());
          }
          if (options2.SUMMARIZE.LEN) {
            args.push("LEN", options2.SUMMARIZE.LEN.toString());
          }
          if (options2.SUMMARIZE.SEPARATOR) {
            args.push("SEPARATOR", options2.SUMMARIZE.SEPARATOR);
          }
        }
      }
      if (options2?.HIGHLIGHT) {
        args.push("HIGHLIGHT");
        if (typeof options2.HIGHLIGHT === "object") {
          if (options2.HIGHLIGHT.FIELDS) {
            args.push("FIELDS");
            (0, generic_transformers_1.pushVerdictArgument)(args, options2.HIGHLIGHT.FIELDS);
          }
          if (options2.HIGHLIGHT.TAGS) {
            args.push("TAGS", options2.HIGHLIGHT.TAGS.open, options2.HIGHLIGHT.TAGS.close);
          }
        }
      }
      if (options2?.SLOP) {
        args.push("SLOP", options2.SLOP.toString());
      }
      if (options2?.INORDER) {
        args.push("INORDER");
      }
      if (options2?.LANGUAGE) {
        args.push("LANGUAGE", options2.LANGUAGE);
      }
      if (options2?.EXPANDER) {
        args.push("EXPANDER", options2.EXPANDER);
      }
      if (options2?.SCORER) {
        args.push("SCORER", options2.SCORER);
      }
      if (options2?.SORTBY) {
        args.push("SORTBY");
        pushSortByProperty(args, options2.SORTBY);
      }
      if (options2?.LIMIT) {
        args.push("LIMIT", options2.LIMIT.from.toString(), options2.LIMIT.size.toString());
      }
      if (options2?.PARAMS) {
        pushParamsArgs(args, options2.PARAMS);
      }
      if (options2?.DIALECT) {
        args.push("DIALECT", options2.DIALECT.toString());
      }
      if (options2?.RETURN?.length === 0) {
        args.preserve = true;
      }
      if (options2?.TIMEOUT !== void 0) {
        args.push("TIMEOUT", options2.TIMEOUT.toString());
      }
      return args;
    }
    exports2.pushSearchOptions = pushSearchOptions;
    function transformProfile(reply) {
      return {
        totalProfileTime: reply[0][1],
        parsingTime: reply[1][1],
        pipelineCreationTime: reply[2][1],
        iteratorsProfile: transformIterators(reply[3][1])
      };
    }
    exports2.transformProfile = transformProfile;
    function transformIterators(IteratorsProfile) {
      var res = {};
      for (let i = 0; i < IteratorsProfile.length; i += 2) {
        const value = IteratorsProfile[i + 1];
        switch (IteratorsProfile[i]) {
          case "Type":
            res.type = value;
            break;
          case "Counter":
            res.counter = value;
            break;
          case "Time":
            res.time = value;
            break;
          case "Query type":
            res.queryType = value;
            break;
          case "Child iterators":
            res.childIterators = value.map(transformChildIterators);
            break;
        }
      }
      return res;
    }
    function transformChildIterators(IteratorsProfile) {
      var res = {};
      for (let i = 1; i < IteratorsProfile.length; i += 2) {
        const value = IteratorsProfile[i + 1];
        switch (IteratorsProfile[i]) {
          case "Type":
            res.type = value;
            break;
          case "Counter":
            res.counter = value;
            break;
          case "Time":
            res.time = value;
            break;
          case "Size":
            res.size = value;
            break;
          case "Term":
            res.term = value;
            break;
          case "Child iterators":
            res.childIterators = value.map(transformChildIterators);
            break;
        }
      }
      return res;
    }
  }
});

// node_modules/@redis/search/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/@redis/search/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AggregateSteps = exports2.AggregateGroupByReducers = exports2.VectorAlgorithms = exports2.SchemaTextFieldPhonetics = exports2.SchemaFieldTypes = exports2.RedisSearchLanguages = exports2.default = void 0;
    var commands_1 = require_commands6();
    Object.defineProperty(exports2, "default", { enumerable: true, get: function() {
      return commands_1.default;
    } });
    var commands_2 = require_commands6();
    Object.defineProperty(exports2, "RedisSearchLanguages", { enumerable: true, get: function() {
      return commands_2.RedisSearchLanguages;
    } });
    Object.defineProperty(exports2, "SchemaFieldTypes", { enumerable: true, get: function() {
      return commands_2.SchemaFieldTypes;
    } });
    Object.defineProperty(exports2, "SchemaTextFieldPhonetics", { enumerable: true, get: function() {
      return commands_2.SchemaTextFieldPhonetics;
    } });
    Object.defineProperty(exports2, "VectorAlgorithms", { enumerable: true, get: function() {
      return commands_2.VectorAlgorithms;
    } });
    var AGGREGATE_1 = require_AGGREGATE();
    Object.defineProperty(exports2, "AggregateGroupByReducers", { enumerable: true, get: function() {
      return AGGREGATE_1.AggregateGroupByReducers;
    } });
    Object.defineProperty(exports2, "AggregateSteps", { enumerable: true, get: function() {
      return AGGREGATE_1.AggregateSteps;
    } });
  }
});

// node_modules/@redis/time-series/dist/commands/ADD.js
var require_ADD5 = __commonJS({
  "node_modules/@redis/time-series/dist/commands/ADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands7();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, timestamp, value, options2) {
      const args = [
        "TS.ADD",
        key,
        (0, _1.transformTimestampArgument)(timestamp),
        value.toString()
      ];
      (0, _1.pushRetentionArgument)(args, options2?.RETENTION);
      (0, _1.pushEncodingArgument)(args, options2?.ENCODING);
      (0, _1.pushChunkSizeArgument)(args, options2?.CHUNK_SIZE);
      if (options2?.ON_DUPLICATE) {
        args.push("ON_DUPLICATE", options2.ON_DUPLICATE);
      }
      (0, _1.pushLabelsArgument)(args, options2?.LABELS);
      (0, _1.pushIgnoreArgument)(args, options2?.IGNORE);
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/time-series/dist/commands/ALTER.js
var require_ALTER2 = __commonJS({
  "node_modules/@redis/time-series/dist/commands/ALTER.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands7();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, options2) {
      const args = ["TS.ALTER", key];
      (0, _1.pushRetentionArgument)(args, options2?.RETENTION);
      (0, _1.pushChunkSizeArgument)(args, options2?.CHUNK_SIZE);
      (0, _1.pushDuplicatePolicy)(args, options2?.DUPLICATE_POLICY);
      (0, _1.pushLabelsArgument)(args, options2?.LABELS);
      (0, _1.pushIgnoreArgument)(args, options2?.IGNORE);
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/time-series/dist/commands/CREATE.js
var require_CREATE3 = __commonJS({
  "node_modules/@redis/time-series/dist/commands/CREATE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands7();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, options2) {
      const args = ["TS.CREATE", key];
      (0, _1.pushRetentionArgument)(args, options2?.RETENTION);
      (0, _1.pushEncodingArgument)(args, options2?.ENCODING);
      (0, _1.pushChunkSizeArgument)(args, options2?.CHUNK_SIZE);
      (0, _1.pushDuplicatePolicy)(args, options2?.DUPLICATE_POLICY);
      (0, _1.pushLabelsArgument)(args, options2?.LABELS);
      (0, _1.pushIgnoreArgument)(args, options2?.IGNORE);
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/time-series/dist/commands/CREATERULE.js
var require_CREATERULE = __commonJS({
  "node_modules/@redis/time-series/dist/commands/CREATERULE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(sourceKey, destinationKey, aggregationType, bucketDuration, alignTimestamp) {
      const args = [
        "TS.CREATERULE",
        sourceKey,
        destinationKey,
        "AGGREGATION",
        aggregationType,
        bucketDuration.toString()
      ];
      if (alignTimestamp) {
        args.push(alignTimestamp.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/time-series/dist/commands/DECRBY.js
var require_DECRBY2 = __commonJS({
  "node_modules/@redis/time-series/dist/commands/DECRBY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands7();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, value, options2) {
      return (0, _1.transformIncrDecrArguments)("TS.DECRBY", key, value, options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/time-series/dist/commands/DEL.js
var require_DEL4 = __commonJS({
  "node_modules/@redis/time-series/dist/commands/DEL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRTS_KEY_INDEX = void 0;
    var _1 = require_commands7();
    exports2.FIRTS_KEY_INDEX = 1;
    function transformArguments(key, fromTimestamp, toTimestamp) {
      return [
        "TS.DEL",
        key,
        (0, _1.transformTimestampArgument)(fromTimestamp),
        (0, _1.transformTimestampArgument)(toTimestamp)
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/time-series/dist/commands/DELETERULE.js
var require_DELETERULE = __commonJS({
  "node_modules/@redis/time-series/dist/commands/DELETERULE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(sourceKey, destinationKey) {
      return [
        "TS.DELETERULE",
        sourceKey,
        destinationKey
      ];
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/time-series/dist/commands/GET.js
var require_GET3 = __commonJS({
  "node_modules/@redis/time-series/dist/commands/GET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands7();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, options2) {
      return (0, _1.pushLatestArgument)(["TS.GET", key], options2?.LATEST);
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      if (reply.length === 0)
        return null;
      return (0, _1.transformSampleReply)(reply);
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/time-series/dist/commands/INCRBY.js
var require_INCRBY4 = __commonJS({
  "node_modules/@redis/time-series/dist/commands/INCRBY.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands7();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(key, value, options2) {
      return (0, _1.transformIncrDecrArguments)("TS.INCRBY", key, value, options2);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/time-series/dist/commands/INFO.js
var require_INFO8 = __commonJS({
  "node_modules/@redis/time-series/dist/commands/INFO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key) {
      return ["TS.INFO", key];
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return {
        totalSamples: reply[1],
        memoryUsage: reply[3],
        firstTimestamp: reply[5],
        lastTimestamp: reply[7],
        retentionTime: reply[9],
        chunkCount: reply[11],
        chunkSize: reply[13],
        chunkType: reply[15],
        duplicatePolicy: reply[17],
        labels: reply[19].map(([name, value]) => ({
          name,
          value
        })),
        sourceKey: reply[21],
        rules: reply[23].map(([key, timeBucket, aggregationType]) => ({
          key,
          timeBucket,
          aggregationType
        }))
      };
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/time-series/dist/commands/INFO_DEBUG.js
var require_INFO_DEBUG = __commonJS({
  "node_modules/@redis/time-series/dist/commands/INFO_DEBUG.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.FIRST_KEY_INDEX = exports2.IS_READ_ONLY = void 0;
    var INFO_1 = require_INFO8();
    var INFO_2 = require_INFO8();
    Object.defineProperty(exports2, "IS_READ_ONLY", { enumerable: true, get: function() {
      return INFO_2.IS_READ_ONLY;
    } });
    Object.defineProperty(exports2, "FIRST_KEY_INDEX", { enumerable: true, get: function() {
      return INFO_2.FIRST_KEY_INDEX;
    } });
    function transformArguments(key) {
      const args = (0, INFO_1.transformArguments)(key);
      args.push("DEBUG");
      return args;
    }
    exports2.transformArguments = transformArguments;
    function transformReply(rawReply) {
      const reply = (0, INFO_1.transformReply)(rawReply);
      reply.keySelfName = rawReply[25];
      reply.chunks = rawReply[27].map((chunk) => ({
        startTimestamp: chunk[1],
        endTimestamp: chunk[3],
        samples: chunk[5],
        size: chunk[7],
        bytesPerSample: chunk[9]
      }));
      return reply;
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/time-series/dist/commands/MADD.js
var require_MADD2 = __commonJS({
  "node_modules/@redis/time-series/dist/commands/MADD.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands7();
    exports2.FIRST_KEY_INDEX = 1;
    function transformArguments(toAdd) {
      const args = ["TS.MADD"];
      for (const { key, timestamp, value } of toAdd) {
        args.push(key, (0, _1.transformTimestampArgument)(timestamp), value.toString());
      }
      return args;
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/time-series/dist/commands/MGET.js
var require_MGET3 = __commonJS({
  "node_modules/@redis/time-series/dist/commands/MGET.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var _1 = require_commands7();
    exports2.IS_READ_ONLY = true;
    function transformArguments(filter, options2) {
      const args = (0, _1.pushLatestArgument)(["TS.MGET"], options2?.LATEST);
      return (0, _1.pushFilterArgument)(args, filter);
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.map(([key, _, sample]) => ({
        key,
        sample: (0, _1.transformSampleReply)(sample)
      }));
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/time-series/dist/commands/MGET_WITHLABELS.js
var require_MGET_WITHLABELS = __commonJS({
  "node_modules/@redis/time-series/dist/commands/MGET_WITHLABELS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var _1 = require_commands7();
    exports2.IS_READ_ONLY = true;
    function transformArguments(filter, options2) {
      const args = (0, _1.pushWithLabelsArgument)(["TS.MGET"], options2?.SELECTED_LABELS);
      return (0, _1.pushFilterArgument)(args, filter);
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return reply.map(([key, labels, sample]) => ({
        key,
        labels: (0, _1.transformLablesReply)(labels),
        sample: (0, _1.transformSampleReply)(sample)
      }));
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/time-series/dist/commands/QUERYINDEX.js
var require_QUERYINDEX = __commonJS({
  "node_modules/@redis/time-series/dist/commands/QUERYINDEX.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var generic_transformers_1 = require_generic_transformers();
    exports2.IS_READ_ONLY = true;
    function transformArguments(filter) {
      return (0, generic_transformers_1.pushVerdictArguments)(["TS.QUERYINDEX"], filter);
    }
    exports2.transformArguments = transformArguments;
  }
});

// node_modules/@redis/time-series/dist/commands/RANGE.js
var require_RANGE = __commonJS({
  "node_modules/@redis/time-series/dist/commands/RANGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands7();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, fromTimestamp, toTimestamp, options2) {
      return (0, _1.pushRangeArguments)(["TS.RANGE", key], fromTimestamp, toTimestamp, options2);
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return (0, _1.transformRangeReply)(reply);
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/time-series/dist/commands/REVRANGE.js
var require_REVRANGE = __commonJS({
  "node_modules/@redis/time-series/dist/commands/REVRANGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = exports2.FIRST_KEY_INDEX = void 0;
    var _1 = require_commands7();
    exports2.FIRST_KEY_INDEX = 1;
    exports2.IS_READ_ONLY = true;
    function transformArguments(key, fromTimestamp, toTimestamp, options2) {
      return (0, _1.pushRangeArguments)(["TS.REVRANGE", key], fromTimestamp, toTimestamp, options2);
    }
    exports2.transformArguments = transformArguments;
    function transformReply(reply) {
      return (0, _1.transformRangeReply)(reply);
    }
    exports2.transformReply = transformReply;
  }
});

// node_modules/@redis/time-series/dist/commands/MRANGE.js
var require_MRANGE = __commonJS({
  "node_modules/@redis/time-series/dist/commands/MRANGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var _1 = require_commands7();
    exports2.IS_READ_ONLY = true;
    function transformArguments(fromTimestamp, toTimestamp, filters, options2) {
      return (0, _1.pushMRangeArguments)(["TS.MRANGE"], fromTimestamp, toTimestamp, filters, options2);
    }
    exports2.transformArguments = transformArguments;
    var _2 = require_commands7();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _2.transformMRangeReply;
    } });
  }
});

// node_modules/@redis/time-series/dist/commands/MRANGE_WITHLABELS.js
var require_MRANGE_WITHLABELS = __commonJS({
  "node_modules/@redis/time-series/dist/commands/MRANGE_WITHLABELS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var _1 = require_commands7();
    exports2.IS_READ_ONLY = true;
    function transformArguments(fromTimestamp, toTimestamp, filters, options2) {
      return (0, _1.pushMRangeWithLabelsArguments)(["TS.MRANGE"], fromTimestamp, toTimestamp, filters, options2);
    }
    exports2.transformArguments = transformArguments;
    var _2 = require_commands7();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _2.transformMRangeWithLabelsReply;
    } });
  }
});

// node_modules/@redis/time-series/dist/commands/MREVRANGE.js
var require_MREVRANGE = __commonJS({
  "node_modules/@redis/time-series/dist/commands/MREVRANGE.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var _1 = require_commands7();
    exports2.IS_READ_ONLY = true;
    function transformArguments(fromTimestamp, toTimestamp, filters, options2) {
      return (0, _1.pushMRangeArguments)(["TS.MREVRANGE"], fromTimestamp, toTimestamp, filters, options2);
    }
    exports2.transformArguments = transformArguments;
    var _2 = require_commands7();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _2.transformMRangeReply;
    } });
  }
});

// node_modules/@redis/time-series/dist/commands/MREVRANGE_WITHLABELS.js
var require_MREVRANGE_WITHLABELS = __commonJS({
  "node_modules/@redis/time-series/dist/commands/MREVRANGE_WITHLABELS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.transformReply = exports2.transformArguments = exports2.IS_READ_ONLY = void 0;
    var _1 = require_commands7();
    exports2.IS_READ_ONLY = true;
    function transformArguments(fromTimestamp, toTimestamp, filters, options2) {
      return (0, _1.pushMRangeWithLabelsArguments)(["TS.MREVRANGE"], fromTimestamp, toTimestamp, filters, options2);
    }
    exports2.transformArguments = transformArguments;
    var _2 = require_commands7();
    Object.defineProperty(exports2, "transformReply", { enumerable: true, get: function() {
      return _2.transformMRangeWithLabelsReply;
    } });
  }
});

// node_modules/@redis/time-series/dist/commands/index.js
var require_commands7 = __commonJS({
  "node_modules/@redis/time-series/dist/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.pushLatestArgument = exports2.transformMRangeWithLabelsReply = exports2.transformMRangeReply = exports2.transformRangeReply = exports2.pushMRangeWithLabelsArguments = exports2.pushWithLabelsArgument = exports2.pushMRangeArguments = exports2.pushFilterArgument = exports2.pushMRangeGroupByArguments = exports2.pushRangeArguments = exports2.TimeSeriesBucketTimestamp = exports2.transformSampleReply = exports2.transformIncrDecrArguments = exports2.pushLabelsArgument = exports2.transformLablesReply = exports2.pushDuplicatePolicy = exports2.pushChunkSizeArgument = exports2.pushEncodingArgument = exports2.TimeSeriesEncoding = exports2.pushRetentionArgument = exports2.pushIgnoreArgument = exports2.transformTimestampArgument = exports2.TimeSeriesReducers = exports2.TimeSeriesDuplicatePolicies = exports2.TimeSeriesAggregationType = void 0;
    var ADD = require_ADD5();
    var ALTER = require_ALTER2();
    var CREATE = require_CREATE3();
    var CREATERULE = require_CREATERULE();
    var DECRBY = require_DECRBY2();
    var DEL = require_DEL4();
    var DELETERULE = require_DELETERULE();
    var GET = require_GET3();
    var INCRBY = require_INCRBY4();
    var INFO_DEBUG = require_INFO_DEBUG();
    var INFO = require_INFO8();
    var MADD = require_MADD2();
    var MGET = require_MGET3();
    var MGET_WITHLABELS = require_MGET_WITHLABELS();
    var QUERYINDEX = require_QUERYINDEX();
    var RANGE = require_RANGE();
    var REVRANGE = require_REVRANGE();
    var MRANGE = require_MRANGE();
    var MRANGE_WITHLABELS = require_MRANGE_WITHLABELS();
    var MREVRANGE = require_MREVRANGE();
    var MREVRANGE_WITHLABELS = require_MREVRANGE_WITHLABELS();
    var generic_transformers_1 = require_generic_transformers();
    exports2.default = {
      ADD,
      add: ADD,
      ALTER,
      alter: ALTER,
      CREATE,
      create: CREATE,
      CREATERULE,
      createRule: CREATERULE,
      DECRBY,
      decrBy: DECRBY,
      DEL,
      del: DEL,
      DELETERULE,
      deleteRule: DELETERULE,
      GET,
      get: GET,
      INCRBY,
      incrBy: INCRBY,
      INFO_DEBUG,
      infoDebug: INFO_DEBUG,
      INFO,
      info: INFO,
      MADD,
      mAdd: MADD,
      MGET,
      mGet: MGET,
      MGET_WITHLABELS,
      mGetWithLabels: MGET_WITHLABELS,
      QUERYINDEX,
      queryIndex: QUERYINDEX,
      RANGE,
      range: RANGE,
      REVRANGE,
      revRange: REVRANGE,
      MRANGE,
      mRange: MRANGE,
      MRANGE_WITHLABELS,
      mRangeWithLabels: MRANGE_WITHLABELS,
      MREVRANGE,
      mRevRange: MREVRANGE,
      MREVRANGE_WITHLABELS,
      mRevRangeWithLabels: MREVRANGE_WITHLABELS
    };
    var TimeSeriesAggregationType;
    (function(TimeSeriesAggregationType2) {
      TimeSeriesAggregationType2["AVG"] = "AVG";
      TimeSeriesAggregationType2["AVERAGE"] = "AVG";
      TimeSeriesAggregationType2["FIRST"] = "FIRST";
      TimeSeriesAggregationType2["LAST"] = "LAST";
      TimeSeriesAggregationType2["MIN"] = "MIN";
      TimeSeriesAggregationType2["MINIMUM"] = "MIN";
      TimeSeriesAggregationType2["MAX"] = "MAX";
      TimeSeriesAggregationType2["MAXIMUM"] = "MAX";
      TimeSeriesAggregationType2["SUM"] = "SUM";
      TimeSeriesAggregationType2["RANGE"] = "RANGE";
      TimeSeriesAggregationType2["COUNT"] = "COUNT";
      TimeSeriesAggregationType2["STD_P"] = "STD.P";
      TimeSeriesAggregationType2["STD_S"] = "STD.S";
      TimeSeriesAggregationType2["VAR_P"] = "VAR.P";
      TimeSeriesAggregationType2["VAR_S"] = "VAR.S";
      TimeSeriesAggregationType2["TWA"] = "TWA";
    })(TimeSeriesAggregationType || (exports2.TimeSeriesAggregationType = TimeSeriesAggregationType = {}));
    var TimeSeriesDuplicatePolicies;
    (function(TimeSeriesDuplicatePolicies2) {
      TimeSeriesDuplicatePolicies2["BLOCK"] = "BLOCK";
      TimeSeriesDuplicatePolicies2["FIRST"] = "FIRST";
      TimeSeriesDuplicatePolicies2["LAST"] = "LAST";
      TimeSeriesDuplicatePolicies2["MIN"] = "MIN";
      TimeSeriesDuplicatePolicies2["MAX"] = "MAX";
      TimeSeriesDuplicatePolicies2["SUM"] = "SUM";
    })(TimeSeriesDuplicatePolicies || (exports2.TimeSeriesDuplicatePolicies = TimeSeriesDuplicatePolicies = {}));
    var TimeSeriesReducers;
    (function(TimeSeriesReducers2) {
      TimeSeriesReducers2["AVG"] = "AVG";
      TimeSeriesReducers2["SUM"] = "SUM";
      TimeSeriesReducers2["MIN"] = "MIN";
      TimeSeriesReducers2["MINIMUM"] = "MIN";
      TimeSeriesReducers2["MAX"] = "MAX";
      TimeSeriesReducers2["MAXIMUM"] = "MAX";
      TimeSeriesReducers2["RANGE"] = "range";
      TimeSeriesReducers2["COUNT"] = "COUNT";
      TimeSeriesReducers2["STD_P"] = "STD.P";
      TimeSeriesReducers2["STD_S"] = "STD.S";
      TimeSeriesReducers2["VAR_P"] = "VAR.P";
      TimeSeriesReducers2["VAR_S"] = "VAR.S";
    })(TimeSeriesReducers || (exports2.TimeSeriesReducers = TimeSeriesReducers = {}));
    function transformTimestampArgument(timestamp) {
      if (typeof timestamp === "string")
        return timestamp;
      return (typeof timestamp === "number" ? timestamp : timestamp.getTime()).toString();
    }
    exports2.transformTimestampArgument = transformTimestampArgument;
    function pushIgnoreArgument(args, ignore) {
      if (ignore !== void 0) {
        args.push("IGNORE", ignore.MAX_TIME_DIFF.toString(), ignore.MAX_VAL_DIFF.toString());
      }
    }
    exports2.pushIgnoreArgument = pushIgnoreArgument;
    function pushRetentionArgument(args, retention) {
      if (retention !== void 0) {
        args.push("RETENTION", retention.toString());
      }
      return args;
    }
    exports2.pushRetentionArgument = pushRetentionArgument;
    var TimeSeriesEncoding;
    (function(TimeSeriesEncoding2) {
      TimeSeriesEncoding2["COMPRESSED"] = "COMPRESSED";
      TimeSeriesEncoding2["UNCOMPRESSED"] = "UNCOMPRESSED";
    })(TimeSeriesEncoding || (exports2.TimeSeriesEncoding = TimeSeriesEncoding = {}));
    function pushEncodingArgument(args, encoding) {
      if (encoding !== void 0) {
        args.push("ENCODING", encoding);
      }
      return args;
    }
    exports2.pushEncodingArgument = pushEncodingArgument;
    function pushChunkSizeArgument(args, chunkSize) {
      if (chunkSize !== void 0) {
        args.push("CHUNK_SIZE", chunkSize.toString());
      }
      return args;
    }
    exports2.pushChunkSizeArgument = pushChunkSizeArgument;
    function pushDuplicatePolicy(args, duplicatePolicy) {
      if (duplicatePolicy !== void 0) {
        args.push("DUPLICATE_POLICY", duplicatePolicy);
      }
      return args;
    }
    exports2.pushDuplicatePolicy = pushDuplicatePolicy;
    function transformLablesReply(reply) {
      const labels = {};
      for (const [key, value] of reply) {
        labels[key] = value;
      }
      return labels;
    }
    exports2.transformLablesReply = transformLablesReply;
    function pushLabelsArgument(args, labels) {
      if (labels) {
        args.push("LABELS");
        for (const [label, value] of Object.entries(labels)) {
          args.push(label, value);
        }
      }
      return args;
    }
    exports2.pushLabelsArgument = pushLabelsArgument;
    function transformIncrDecrArguments(command, key, value, options2) {
      const args = [
        command,
        key,
        value.toString()
      ];
      if (options2?.TIMESTAMP !== void 0 && options2?.TIMESTAMP !== null) {
        args.push("TIMESTAMP", transformTimestampArgument(options2.TIMESTAMP));
      }
      pushRetentionArgument(args, options2?.RETENTION);
      if (options2?.UNCOMPRESSED) {
        args.push("UNCOMPRESSED");
      }
      pushChunkSizeArgument(args, options2?.CHUNK_SIZE);
      pushLabelsArgument(args, options2?.LABELS);
      return args;
    }
    exports2.transformIncrDecrArguments = transformIncrDecrArguments;
    function transformSampleReply(reply) {
      return {
        timestamp: reply[0],
        value: Number(reply[1])
      };
    }
    exports2.transformSampleReply = transformSampleReply;
    var TimeSeriesBucketTimestamp;
    (function(TimeSeriesBucketTimestamp2) {
      TimeSeriesBucketTimestamp2["LOW"] = "-";
      TimeSeriesBucketTimestamp2["HIGH"] = "+";
      TimeSeriesBucketTimestamp2["MID"] = "~";
    })(TimeSeriesBucketTimestamp || (exports2.TimeSeriesBucketTimestamp = TimeSeriesBucketTimestamp = {}));
    function pushRangeArguments(args, fromTimestamp, toTimestamp, options2) {
      args.push(transformTimestampArgument(fromTimestamp), transformTimestampArgument(toTimestamp));
      pushLatestArgument(args, options2?.LATEST);
      if (options2?.FILTER_BY_TS) {
        args.push("FILTER_BY_TS");
        for (const ts of options2.FILTER_BY_TS) {
          args.push(transformTimestampArgument(ts));
        }
      }
      if (options2?.FILTER_BY_VALUE) {
        args.push("FILTER_BY_VALUE", options2.FILTER_BY_VALUE.min.toString(), options2.FILTER_BY_VALUE.max.toString());
      }
      if (options2?.COUNT) {
        args.push("COUNT", options2.COUNT.toString());
      }
      if (options2?.ALIGN) {
        args.push("ALIGN", transformTimestampArgument(options2.ALIGN));
      }
      if (options2?.AGGREGATION) {
        args.push("AGGREGATION", options2.AGGREGATION.type, transformTimestampArgument(options2.AGGREGATION.timeBucket));
        if (options2.AGGREGATION.BUCKETTIMESTAMP) {
          args.push("BUCKETTIMESTAMP", options2.AGGREGATION.BUCKETTIMESTAMP);
        }
        if (options2.AGGREGATION.EMPTY) {
          args.push("EMPTY");
        }
      }
      return args;
    }
    exports2.pushRangeArguments = pushRangeArguments;
    function pushMRangeGroupByArguments(args, groupBy) {
      if (groupBy) {
        args.push("GROUPBY", groupBy.label, "REDUCE", groupBy.reducer);
      }
      return args;
    }
    exports2.pushMRangeGroupByArguments = pushMRangeGroupByArguments;
    function pushFilterArgument(args, filter) {
      args.push("FILTER");
      return (0, generic_transformers_1.pushVerdictArguments)(args, filter);
    }
    exports2.pushFilterArgument = pushFilterArgument;
    function pushMRangeArguments(args, fromTimestamp, toTimestamp, filter, options2) {
      args = pushRangeArguments(args, fromTimestamp, toTimestamp, options2);
      args = pushFilterArgument(args, filter);
      return pushMRangeGroupByArguments(args, options2?.GROUPBY);
    }
    exports2.pushMRangeArguments = pushMRangeArguments;
    function pushWithLabelsArgument(args, selectedLabels) {
      if (!selectedLabels) {
        args.push("WITHLABELS");
      } else {
        args.push("SELECTED_LABELS");
        args = (0, generic_transformers_1.pushVerdictArguments)(args, selectedLabels);
      }
      return args;
    }
    exports2.pushWithLabelsArgument = pushWithLabelsArgument;
    function pushMRangeWithLabelsArguments(args, fromTimestamp, toTimestamp, filter, options2) {
      args = pushRangeArguments(args, fromTimestamp, toTimestamp, options2);
      args = pushWithLabelsArgument(args, options2?.SELECTED_LABELS);
      args = pushFilterArgument(args, filter);
      return pushMRangeGroupByArguments(args, options2?.GROUPBY);
    }
    exports2.pushMRangeWithLabelsArguments = pushMRangeWithLabelsArguments;
    function transformRangeReply(reply) {
      return reply.map(transformSampleReply);
    }
    exports2.transformRangeReply = transformRangeReply;
    function transformMRangeReply(reply) {
      const args = [];
      for (const [key, _, sample] of reply) {
        args.push({
          key,
          samples: sample.map(transformSampleReply)
        });
      }
      return args;
    }
    exports2.transformMRangeReply = transformMRangeReply;
    function transformMRangeWithLabelsReply(reply) {
      const args = [];
      for (const [key, labels, samples] of reply) {
        args.push({
          key,
          labels: transformLablesReply(labels),
          samples: samples.map(transformSampleReply)
        });
      }
      return args;
    }
    exports2.transformMRangeWithLabelsReply = transformMRangeWithLabelsReply;
    function pushLatestArgument(args, latest) {
      if (latest) {
        args.push("LATEST");
      }
      return args;
    }
    exports2.pushLatestArgument = pushLatestArgument;
  }
});

// node_modules/@redis/time-series/dist/index.js
var require_dist6 = __commonJS({
  "node_modules/@redis/time-series/dist/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TimeSeriesBucketTimestamp = exports2.TimeSeriesReducers = exports2.TimeSeriesAggregationType = exports2.TimeSeriesEncoding = exports2.TimeSeriesDuplicatePolicies = exports2.default = void 0;
    var commands_1 = require_commands7();
    Object.defineProperty(exports2, "default", { enumerable: true, get: function() {
      return commands_1.default;
    } });
    var commands_2 = require_commands7();
    Object.defineProperty(exports2, "TimeSeriesDuplicatePolicies", { enumerable: true, get: function() {
      return commands_2.TimeSeriesDuplicatePolicies;
    } });
    Object.defineProperty(exports2, "TimeSeriesEncoding", { enumerable: true, get: function() {
      return commands_2.TimeSeriesEncoding;
    } });
    Object.defineProperty(exports2, "TimeSeriesAggregationType", { enumerable: true, get: function() {
      return commands_2.TimeSeriesAggregationType;
    } });
    Object.defineProperty(exports2, "TimeSeriesReducers", { enumerable: true, get: function() {
      return commands_2.TimeSeriesReducers;
    } });
    Object.defineProperty(exports2, "TimeSeriesBucketTimestamp", { enumerable: true, get: function() {
      return commands_2.TimeSeriesBucketTimestamp;
    } });
  }
});

// node_modules/redis/dist/index.js
var require_dist7 = __commonJS({
  "node_modules/redis/dist/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p)) __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createCluster = exports2.createClient = void 0;
    var client_1 = require_dist();
    var bloom_1 = require_dist2();
    var graph_1 = require_dist3();
    var json_1 = require_dist4();
    var search_1 = require_dist5();
    var time_series_1 = require_dist6();
    __exportStar(require_dist(), exports2);
    __exportStar(require_dist2(), exports2);
    __exportStar(require_dist3(), exports2);
    __exportStar(require_dist4(), exports2);
    __exportStar(require_dist5(), exports2);
    __exportStar(require_dist6(), exports2);
    var modules = {
      ...bloom_1.default,
      graph: graph_1.default,
      json: json_1.default,
      ft: search_1.default,
      ts: time_series_1.default
    };
    function createClient2(options2) {
      return (0, client_1.createClient)({
        ...options2,
        modules: {
          ...modules,
          ...options2?.modules
        }
      });
    }
    exports2.createClient = createClient2;
    function createCluster(options2) {
      return (0, client_1.createCluster)({
        ...options2,
        modules: {
          ...modules,
          ...options2?.modules
        }
      });
    }
    exports2.createCluster = createCluster;
  }
});

// services/users/src/handlers/noTokenAccess.ts
var noTokenAccess_exports = {};
__export(noTokenAccess_exports, {
  handler: () => handler
});
module.exports = __toCommonJS(noTokenAccess_exports);

// node_modules/@middy/core/index.js
var import_node_stream = require("node:stream");
var import_promises = require("node:stream/promises");
var import_node_timers = require("node:timers");
var defaultLambdaHandler = () => {
};
var defaultPlugin = {
  timeoutEarlyInMillis: 5,
  timeoutEarlyResponse: () => {
    const err = new Error("[AbortError]: The operation was aborted.", {
      cause: { package: "@middy/core" }
    });
    err.name = "TimeoutError";
    throw err;
  },
  streamifyResponse: false
  // Deprecate need for this when AWS provides a flag for when it's looking for it
};
var middy = (lambdaHandler2 = defaultLambdaHandler, plugin = {}) => {
  if (typeof lambdaHandler2 !== "function") {
    plugin = lambdaHandler2;
    lambdaHandler2 = defaultLambdaHandler;
  }
  plugin = { ...defaultPlugin, ...plugin };
  plugin.timeoutEarly = plugin.timeoutEarlyInMillis > 0;
  plugin.beforePrefetch?.();
  const beforeMiddlewares = [];
  const afterMiddlewares = [];
  const onErrorMiddlewares = [];
  const middyHandler = (event = {}, context = {}) => {
    plugin.requestStart?.();
    const request = {
      event,
      context,
      response: void 0,
      error: void 0,
      internal: plugin.internal ?? {}
    };
    return runRequest(
      request,
      beforeMiddlewares,
      lambdaHandler2,
      afterMiddlewares,
      onErrorMiddlewares,
      plugin
    );
  };
  const middy2 = plugin.streamifyResponse ? awslambda.streamifyResponse(async (event, responseStream, context) => {
    const handlerResponse = await middyHandler(event, context);
    let handlerBody = handlerResponse;
    if (handlerResponse.statusCode) {
      handlerBody = handlerResponse.body ?? "";
      delete handlerResponse.body;
      responseStream = awslambda.HttpResponseStream.from(
        responseStream,
        handlerResponse
      );
    }
    let handlerStream;
    if (handlerBody._readableState) {
      handlerStream = handlerBody;
    } else if (typeof handlerBody === "string") {
      handlerStream = import_node_stream.Readable.from(
        handlerBody.length < stringIteratorSize ? handlerBody : stringIterator(handlerBody)
      );
    }
    if (!handlerStream) {
      throw new Error("handler response not a ReadableStream");
    }
    await (0, import_promises.pipeline)(handlerStream, responseStream);
  }) : middyHandler;
  middy2.use = (middlewares) => {
    if (!Array.isArray(middlewares)) {
      middlewares = [middlewares];
    }
    for (const middleware of middlewares) {
      const { before, after, onError } = middleware;
      if (before || after || onError) {
        if (before) middy2.before(before);
        if (after) middy2.after(after);
        if (onError) middy2.onError(onError);
      } else {
        throw new Error(
          'Middleware must be an object containing at least one key among "before", "after", "onError"'
        );
      }
    }
    return middy2;
  };
  middy2.before = (beforeMiddleware) => {
    beforeMiddlewares.push(beforeMiddleware);
    return middy2;
  };
  middy2.after = (afterMiddleware) => {
    afterMiddlewares.unshift(afterMiddleware);
    return middy2;
  };
  middy2.onError = (onErrorMiddleware) => {
    onErrorMiddlewares.unshift(onErrorMiddleware);
    return middy2;
  };
  middy2.handler = (replaceLambdaHandler) => {
    lambdaHandler2 = replaceLambdaHandler;
    return middy2;
  };
  return middy2;
};
var stringIteratorSize = 16384;
function* stringIterator(input) {
  let position = 0;
  const length = input.length;
  while (position < length) {
    yield input.substring(position, position + stringIteratorSize);
    position += stringIteratorSize;
  }
}
var handlerAbort = new AbortController();
var runRequest = async (request, beforeMiddlewares, lambdaHandler2, afterMiddlewares, onErrorMiddlewares, plugin) => {
  let timeoutID;
  const timeoutEarly = plugin.timeoutEarly && request.context.getRemainingTimeInMillis;
  try {
    await runMiddlewares(request, beforeMiddlewares, plugin);
    if (typeof request.response === "undefined") {
      plugin.beforeHandler?.();
      if (handlerAbort.signal.aborted) {
        handlerAbort = new AbortController();
      }
      const promises = [
        lambdaHandler2(request.event, request.context, {
          signal: handlerAbort.signal
        })
      ];
      if (timeoutEarly) {
        let timeoutResolve;
        const timeoutPromise = new Promise((resolve, reject) => {
          timeoutResolve = () => {
            handlerAbort.abort();
            try {
              resolve(plugin.timeoutEarlyResponse());
            } catch (e) {
              reject(e);
            }
          };
        });
        timeoutID = (0, import_node_timers.setTimeout)(
          timeoutResolve,
          request.context.getRemainingTimeInMillis() - plugin.timeoutEarlyInMillis
        );
        promises.push(timeoutPromise);
      }
      request.response = await Promise.race(promises);
      if (timeoutID) {
        clearTimeout(timeoutID);
      }
      plugin.afterHandler?.();
      await runMiddlewares(request, afterMiddlewares, plugin);
    }
  } catch (e) {
    if (timeoutID) {
      clearTimeout(timeoutID);
    }
    request.response = void 0;
    request.error = e;
    try {
      await runMiddlewares(request, onErrorMiddlewares, plugin);
    } catch (e2) {
      e2.originalError = request.error;
      request.error = e2;
      throw request.error;
    }
    if (typeof request.response === "undefined") throw request.error;
  } finally {
    await plugin.requestEnd?.(request);
  }
  return request.response;
};
var runMiddlewares = async (request, middlewares, plugin) => {
  for (const nextMiddleware of middlewares) {
    plugin.beforeMiddleware?.(nextMiddleware.name);
    const res = await nextMiddleware(request);
    plugin.afterMiddleware?.(nextMiddleware.name);
    if (typeof res !== "undefined") {
      request.response = res;
      return;
    }
  }
};
var core_default = middy;

// services/users/src/controllers/user.controller.ts
var import_jsonwebtoken = __toESM(require_jsonwebtoken());
var import_bcryptjs = __toESM(require_bcryptjs());

// services/users/src/electrodb/user.service.ts
var import_electrodb2 = __toESM(require_electrodb());

// src/clients/dynamodb.client.ts
var import_client_dynamodb = require("@aws-sdk/client-dynamodb");
var import_lib_dynamodb = require("@aws-sdk/lib-dynamodb");
var options = {
  region: process.env.AWS_REGION || "us-east-1",
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
};
var client = new import_client_dynamodb.DynamoDBClient(options);
var docClient = import_lib_dynamodb.DynamoDBDocumentClient.from(client);

// services/users/src/electrodb/schemas/user.schema.ts
var import_electrodb = __toESM(require_electrodb());
var User = (0, import_electrodb.createSchema)({
  model: {
    service: "user",
    entity: "User",
    version: "1"
  },
  attributes: {
    username: { type: "string" },
    password: { type: "string" },
    type: { type: "string" }
  },
  indexes: {
    user: {
      pk: {
        field: "pk",
        composite: ["username"]
      },
      sk: {
        field: "sk",
        composite: ["type"]
      }
    }
  }
});
var user_schema_default = User;

// services/users/src/electrodb/user.service.ts
var table = process.env.TABLE_NAME;
console.log("the table", table);
var sharedEntityOptions = {
  table,
  client
};
var userService = new import_electrodb2.Service(
  {
    user: new import_electrodb2.Entity(user_schema_default, sharedEntityOptions)
  },
  {
    table,
    client
  }
);

// services/users/src/controllers/user.controller.ts
function allowed() {
  return {
    statusCode: 200,
    body: { message: "allowed" }
  };
}

// src/common/response.common.ts
var generateResponse = (response) => {
  return {
    statusCode: response.statusCode,
    body: JSON.stringify(response.body),
    headers: {
      "Content-Type": "application/json"
    }
  };
};

// src/clients/redis.client.ts
var import_redis = __toESM(require_dist7());
var RedisClient = class _RedisClient {
  constructor() {
    this.redisClient = (0, import_redis.createClient)({
      url: `redis://${process.env.REDIS_HOST}:${process.env.REDIS_PORT}`
    });
    this.redisClient.on("error", (err) => {
      console.error("Redis error:", err);
      throw err;
    });
  }
  async connect() {
    if (!this.redisClient.isOpen) {
      await this.redisClient.connect();
    }
  }
  static getInstance() {
    if (!_RedisClient.instance) {
      _RedisClient.instance = new _RedisClient();
    }
    return _RedisClient.instance;
  }
  getMinuteKey(ip) {
    return `rate_limit:${ip}:minute`;
  }
  getHourlyKey(ip) {
    return `rate_limit:${ip}:hourly`;
  }
  getDayKey(ip) {
    return `rate_limit:${ip}:day`;
  }
  async getRateLimitData(ip) {
    const minuteKey = this.getMinuteKey(ip);
    const hourlyKey = this.getHourlyKey(ip);
    const dayKey = this.getDayKey(ip);
    const minuteData = await this.redisClient.hGetAll(minuteKey);
    const hourlyData = await this.redisClient.hGetAll(hourlyKey);
    const dayData = await this.redisClient.hGetAll(dayKey);
    return { minuteData, hourlyData, dayData };
  }
  async setRateLimitData(ip, type, data) {
    const key = type === "minute" ? this.getMinuteKey(ip) : type === "hourly" ? this.getHourlyKey(ip) : this.getDayKey(ip);
    await this.redisClient.hSet(key, data);
  }
  async incrementRateLimitCount(ip, type, field) {
    const key = type === "minute" ? this.getMinuteKey(ip) : type === "hourly" ? this.getHourlyKey(ip) : this.getDayKey(ip);
    await this.redisClient.hIncrBy(key, field, 1);
  }
  async setExpire(ip, ttl, type) {
    const key = type === "minute" ? this.getMinuteKey(ip) : type === "hourly" ? this.getHourlyKey(ip) : this.getDayKey(ip);
    await this.redisClient.expire(key, ttl);
  }
  async closeConnection() {
    await this.redisClient.quit();
  }
};
var redisClient = RedisClient.getInstance();

// services/users/src/middlewares/rateLimiter.middleware.ts
var MAX_REQUESTS_PER_MINUTE = 20;
var MAX_REQUESTS_PER_HOUR = 200;
var MAX_REQUESTS_PER_DAY = 400;
var DELAY_TIME = 24e3;
function timeout() {
  return new Promise((resolve) => {
    setTimeout(resolve, DELAY_TIME);
  });
}
async function rateLimiter(ip) {
  try {
    const currentTime = Date.now();
    const { minuteData, hourlyData, dayData } = await redisClient.getRateLimitData(ip);
    if (dayData && dayData.timestamp && dayData.count) {
      const dayTimestamp = parseInt(dayData.timestamp);
      const dayCount = parseInt(dayData.count);
      if (currentTime - dayTimestamp < 24 * 60 * 60 * 1e3) {
        if (dayCount >= MAX_REQUESTS_PER_DAY) {
          await timeout();
          return {
            statusCode: 429,
            body: {
              message: "Rate limit exceeded (per day). Please try again tommorrow."
            }
          };
        }
      }
      await redisClient.incrementRateLimitCount(ip, "day", "count");
    } else {
      await redisClient.setRateLimitData(ip, "day", {
        count: 1,
        timestamp: currentTime.toString()
      });
      await redisClient.setExpire(ip, 60 * 60 * 24, "day");
    }
    if (hourlyData && hourlyData.timestamp && hourlyData.count) {
      const hourlyTimestamp = parseInt(hourlyData.timestamp);
      const hourlyCount = parseInt(hourlyData.count);
      if (currentTime - hourlyTimestamp < 36e5) {
        if (hourlyCount >= MAX_REQUESTS_PER_HOUR) {
          await timeout();
          return {
            statusCode: 429,
            body: {
              message: "Rate limit exceeded (per hour). Please try again after an hour."
            }
          };
        }
      }
      await redisClient.incrementRateLimitCount(ip, "hourly", "count");
    } else {
      await redisClient.setRateLimitData(ip, "hourly", {
        count: 1,
        timestamp: currentTime.toString()
      });
      await redisClient.setExpire(ip, 60 * 60 * 2, "hourly");
    }
    if (minuteData && minuteData.timestamp && minuteData.count) {
      const minuteTimestamp = parseInt(minuteData.timestamp);
      const minuteCount = parseInt(minuteData.count);
      if (currentTime - minuteTimestamp < 6e4) {
        if (minuteCount >= MAX_REQUESTS_PER_MINUTE) {
          await timeout();
          return {
            statusCode: 429,
            body: {
              message: "Rate limit exceeded (per minute). Please try again later."
            }
          };
        }
      }
      await redisClient.incrementRateLimitCount(ip, "minute", "count");
    } else {
      await redisClient.setRateLimitData(ip, "minute", {
        count: 1,
        timestamp: currentTime.toString()
      });
      await redisClient.setExpire(ip, 60 * 2, "minute");
    }
  } catch (error) {
    console.error("rate limiter error", error);
    return {
      statusCode: 500,
      body: {
        message: "internal server error"
      }
    };
  }
}
var rateLimiterMiddleware = () => {
  const before = async (request) => {
    await redisClient.connect();
    const ipAddress = request.event.requestContext.http.sourceIp;
    const response = await rateLimiter(ipAddress);
    if (response) {
      return generateResponse(response);
    }
  };
  const after = async () => {
    await redisClient.closeConnection();
  };
  return {
    before,
    after
  };
};

// services/users/src/handlers/noTokenAccess.ts
var lambdaHandler = async (event) => {
  try {
    const result = await allowed();
    return generateResponse(result);
  } catch (error) {
    console.error("Error:", error);
    return generateResponse({
      statusCode: 500,
      body: {
        message: "internal server error"
      }
    });
  }
};
var handler = core_default(lambdaHandler).use(rateLimiterMiddleware());
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handler
});
/*! Bundled license information:

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

bcryptjs/dist/bcrypt.js:
  (**
   * @license bcrypt.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
   * Released under the Apache License, Version 2.0
   * see: https://github.com/dcodeIO/bcrypt.js for details
   *)
*/
//# sourceMappingURL=noTokenAccess.js.map
