service: sharedInfra

plugins:
  - serverless-plugin-utils

custom:
  esbuild:
    sourcemap: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_REGION, 'us-west-2'}
  versionFunctions: false
  tracing:
    apiGateway: true
    lambda: true
  environment:
    ENV: ${env:ENV}
    SERVICE_NAME: ${self:service}
    NODE_OPTIONS: --enable-source-maps
    AWS_ACCESS_KEY_ID: ${env:AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${env:AWS_SECRET_ACCESS_KEY}
    AWS_DEFAULT_REGION: ${env:AWS_DEFAULT_REGION}
    AWS_REGION: ${env:AWS_REGION}
  vpc:
    securityGroupIds:
      - !Ref ServerlessSecurityGroup
    subnetIds:
      - !Ref PrivateSubnet1

resources:
  Resources:
    ServerlessVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: '10.0.0.0/16'
        EnableDnsSupport: 'true'
        EnableDnsHostnames: 'true'
        Tags:
          - Key: Name
            Value: ServerlessVPC

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: ${env:AWS_AVAILABILITY_ZONE, 'us-east-1a'}
        CidrBlock: '10.0.2.0/24'
        VpcId: !Ref ServerlessVPC
        Tags:
          - Key: Name
            Value: PrivateSubnet1

    ServerlessSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: 'Allow Lambda access to ElastiCache and other services'
        VpcId: !Ref ServerlessVPC
        SecurityGroupIngress:
          - IpProtocol: 'tcp'
            FromPort: ${env:REDIS_PORT, '6379'}
            ToPort: ${env:REDIS_PORT, '6379'}
            CidrIp: '10.0.0.0/16'
          - IpProtocol: tcp
            FromPort: ${env:ES_PORT, '443'}
            ToPort: ${env:ES_PORT, '443'}
            CidrIp: '10.0.0.0/16'

    ServerlessRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref ServerlessVPC
        Tags:
          - Key: Name
            Value: 'ServerlessRouteTable'

    ServerlessRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref ServerlessRouteTable

    SharedCacheSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Properties:
        Description: 'Subnet group for ElastiCache'
        SubnetIds:
          - Ref: PrivateSubnet1

    SharedElasticCacheCluster:
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        ClusterName: shared-redis-cluster
        Engine: redis
        CacheNodeType: cache.t3.micro
        NumCacheNodes: 1
        VpcSecurityGroupIds:
          - Ref: ServerlessSecurityGroup
        AutoMinorVersionUpgrade: true
        CacheSubnetGroupName: !Ref SharedCacheSubnetGroup

    SharedDynamoDB:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ServerlessDB
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 3
          WriteCapacityUnits: 3

    DynamoDBGatewayEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        VpcId: !Ref ServerlessVPC
        ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
        RouteTableIds:
          - !Ref ServerlessRouteTable
        VpcEndpointType: Gateway
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - 'dynamodb:*'
              Resource: '*'

    SharedApiGateway:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: SharedApiGateway
        ProtocolType: HTTP
        CorsConfiguration:
          AllowMethods:
            - '*'
          AllowHeaders:
            - '*'
          AllowOrigins:
            - '*'

    ApiGatewayStage:
      Type: AWS::ApiGatewayV2::Stage
      Properties:
        ApiId: !Ref SharedApiGateway
        StageName: ${sls:stage}
        AutoDeploy: true
        DefaultRouteSettings:
          ThrottlingRateLimit: 20
          ThrottlingBurstLimit: 30

    SharedOpensearch:
      Type: AWS::OpenSearchService::Domain
      Properties:
        DomainName: serverless-${lower(${sls:stage})}
        EngineVersion: 'OpenSearch_2.3' # Use a supported version
        ClusterConfig:
          InstanceType: 't3.small.search' # Free-tier eligible
          InstanceCount: 1
          ZoneAwarenessEnabled: false # Single AZ
        EBSOptions:
          EBSEnabled: true
          VolumeType: 'gp2'
          VolumeSize: 10
        NodeToNodeEncryptionOptions:
          Enabled: true
        EncryptionAtRestOptions:
          Enabled: true
        VPCOptions:
          SubnetIds:
            - !Ref PrivateSubnet1
          SecurityGroupIds:
            - !Ref ServerlessSecurityGroup
        AccessPolicies:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                AWS: '*'
              Action: 'es:*'
              Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/serverless-${lower(${sls:stage})}/*'

  Outputs:
    SharedApiGatewayId:
      Description: 'API Gateway Id'
      Value: !Ref SharedApiGateway

    SharedDynamoDBArn:
      Description: 'DynamoDB arn'
      Value: !GetAtt SharedDynamoDB.Arn

    SharedDynamoDBTableName:
      Description: 'The DynamoDB table name'
      Value: !Ref SharedDynamoDB

    SharedElasticCacheClusterAddress:
      Description: 'Redis cluster address'
      Value: !GetAtt SharedElasticCacheCluster.RedisEndpoint.Address

    SharedElasticCacheClusterPort:
      Description: 'Redis cluster port'
      Value: !GetAtt SharedElasticCacheCluster.RedisEndpoint.Port

    ServerlessSecurityGroupId:
      Description: 'Lambda Security Group'
      Value: !Ref ServerlessSecurityGroup

    PrivateSubnet1:
      Description: 'Private Subnet 1'
      Value: !Ref PrivateSubnet1

    VPCId:
      Value: !Ref ServerlessVPC
      Export:
        Name: ${self:service}-VPCId

    SharedOpensearchURL:
      Value: !GetAtt SharedOpensearch.DomainEndpoint
      Export:
        Name: ${self:service}-SharedOpensearchURL

    SharedOpensearchArn:
      Value: !Ref SharedOpensearch
      Export:
        Name: ${self:service}-SharedOpensearchArn
